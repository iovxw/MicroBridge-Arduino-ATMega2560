   1               		.file	"pff.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__RAMPZ__ = 0x3b
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
   8               		.text
   9               	.Ltext0:
  10               		.cfi_sections	.debug_frame
  12               	clust2sect:
  13               	.LVL0:
  14               	.LFB3:
  15               		.file 1 "pff.c"
   1:pff.c         **** /*----------------------------------------------------------------------------/
   2:pff.c         **** /  Petit FatFs - FAT file system module  R0.02a                (C)ChaN, 2010
   3:pff.c         **** /-----------------------------------------------------------------------------/
   4:pff.c         **** / Petit FatFs module is an open source software to implement FAT file system to
   5:pff.c         **** / small embedded systems. This is a free software and is opened for education,
   6:pff.c         **** / research and commercial developments under license policy of following trems.
   7:pff.c         **** /
   8:pff.c         **** /  Copyright (C) 2010, ChaN, all right reserved.
   9:pff.c         **** /
  10:pff.c         **** / * The Petit FatFs module is a free software and there is NO WARRANTY.
  11:pff.c         **** / * No restriction on use. You can use, modify and redistribute it for
  12:pff.c         **** /   personal, non-profit or commercial use UNDER YOUR RESPONSIBILITY.
  13:pff.c         **** / * Redistributions of source code must retain the above copyright notice.
  14:pff.c         **** /
  15:pff.c         **** /-----------------------------------------------------------------------------/
  16:pff.c         **** / Jun 15,'09  R0.01a  First release. (Branched from FatFs R0.07b.)
  17:pff.c         **** /
  18:pff.c         **** / Dec 14,'09  R0.02   Added multiple code page support.
  19:pff.c         **** /                     Added write funciton.
  20:pff.c         **** /                     Changed stream read mode interface.
  21:pff.c         **** / Dec 07,'10  R0.02a  Added some configuration options.
  22:pff.c         **** /                     Fixed fails to open objects with DBCS character.
  23:pff.c         **** /----------------------------------------------------------------------------*/
  24:pff.c         **** 
  25:pff.c         **** #include "pff.h"		/* Petit FatFs configurations and declarations */
  26:pff.c         **** #include "diskio.h"		/* Declarations of low level disk I/O functions */
  27:pff.c         **** 
  28:pff.c         **** 
  29:pff.c         **** 
  30:pff.c         **** /*--------------------------------------------------------------------------
  31:pff.c         **** 
  32:pff.c         ****    Module Private Definitions
  33:pff.c         **** 
  34:pff.c         **** ---------------------------------------------------------------------------*/
  35:pff.c         **** 
  36:pff.c         **** 
  37:pff.c         **** #if _FS_FAT32
  38:pff.c         **** #define LD_CLUST(dir)	(((DWORD)LD_WORD(dir+DIR_FstClusHI)<<16) | LD_WORD(dir+DIR_FstClusLO))
  39:pff.c         **** #else
  40:pff.c         **** #define LD_CLUST(dir)	LD_WORD(dir+DIR_FstClusLO)
  41:pff.c         **** #endif
  42:pff.c         **** 
  43:pff.c         **** 
  44:pff.c         **** /*--------------------------------------------------------*/
  45:pff.c         **** /* DBCS code ranges and SBCS extend char conversion table */
  46:pff.c         **** 
  47:pff.c         **** #if _CODE_PAGE == 932	/* Japanese Shift-JIS */
  48:pff.c         **** #define _DF1S	0x81	/* DBC 1st byte range 1 start */
  49:pff.c         **** #define _DF1E	0x9F	/* DBC 1st byte range 1 end */
  50:pff.c         **** #define _DF2S	0xE0	/* DBC 1st byte range 2 start */
  51:pff.c         **** #define _DF2E	0xFC	/* DBC 1st byte range 2 end */
  52:pff.c         **** #define _DS1S	0x40	/* DBC 2nd byte range 1 start */
  53:pff.c         **** #define _DS1E	0x7E	/* DBC 2nd byte range 1 end */
  54:pff.c         **** #define _DS2S	0x80	/* DBC 2nd byte range 2 start */
  55:pff.c         **** #define _DS2E	0xFC	/* DBC 2nd byte range 2 end */
  56:pff.c         **** 
  57:pff.c         **** #elif _CODE_PAGE == 936	/* Simplified Chinese GBK */
  58:pff.c         **** #define _DF1S	0x81
  59:pff.c         **** #define _DF1E	0xFE
  60:pff.c         **** #define _DS1S	0x40
  61:pff.c         **** #define _DS1E	0x7E
  62:pff.c         **** #define _DS2S	0x80
  63:pff.c         **** #define _DS2E	0xFE
  64:pff.c         **** 
  65:pff.c         **** #elif _CODE_PAGE == 949	/* Korean */
  66:pff.c         **** #define _DF1S	0x81
  67:pff.c         **** #define _DF1E	0xFE
  68:pff.c         **** #define _DS1S	0x41
  69:pff.c         **** #define _DS1E	0x5A
  70:pff.c         **** #define _DS2S	0x61
  71:pff.c         **** #define _DS2E	0x7A
  72:pff.c         **** #define _DS3S	0x81
  73:pff.c         **** #define _DS3E	0xFE
  74:pff.c         **** 
  75:pff.c         **** #elif _CODE_PAGE == 950	/* Traditional Chinese Big5 */
  76:pff.c         **** #define _DF1S	0x81
  77:pff.c         **** #define _DF1E	0xFE
  78:pff.c         **** #define _DS1S	0x40
  79:pff.c         **** #define _DS1E	0x7E
  80:pff.c         **** #define _DS2S	0xA1
  81:pff.c         **** #define _DS2E	0xFE
  82:pff.c         **** 
  83:pff.c         **** #elif _CODE_PAGE == 437	/* U.S. (OEM) */
  84:pff.c         **** #define _DF1S	0
  85:pff.c         **** #define _EXCVT {0x80,0x9A,0x90,0x41,0x8E,0x41,0x8F,0x80,0x45,0x45,0x45,0x49,0x49,0x49,0x8E,0x8F,0x9
  86:pff.c         **** 				0x41,0x49,0x4F,0x55,0xA5,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0x21,0xAE,0xAF,0xB0,0xB1,0xB2,
  87:pff.c         **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
  88:pff.c         **** 				0xE0,0xE1,0xE2,0xE3,0xE4,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xEC,0xED,0xEE,0xEF,0xF0,0xF1,0xF2,
  89:pff.c         **** 
  90:pff.c         **** #elif _CODE_PAGE == 720	/* Arabic (OEM) */
  91:pff.c         **** #define _DF1S	0
  92:pff.c         **** #define _EXCVT {0x80,0x81,0x45,0x41,0x84,0x41,0x86,0x43,0x45,0x45,0x45,0x49,0x49,0x8D,0x8E,0x8F,0x9
  93:pff.c         **** 				0xA0,0xA1,0xA2,0xA3,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF,0xB0,0xB1,0xB2,
  94:pff.c         **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
  95:pff.c         **** 				0xE0,0xE1,0xE2,0xE3,0xE4,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xEC,0xED,0xEE,0xEF,0xF0,0xF1,0xF2,
  96:pff.c         **** 
  97:pff.c         **** #elif _CODE_PAGE == 737	/* Greek (OEM) */
  98:pff.c         **** #define _DF1S	0
  99:pff.c         **** #define _EXCVT {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0x9
 100:pff.c         **** 				0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0x90,0x91,0xAA,0x92,0x93,0x94,0x95,0x96,0xB0,0xB1,0xB2,
 101:pff.c         **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
 102:pff.c         **** 				0x97,0xEA,0xEB,0xEC,0xE4,0xED,0xEE,0xE7,0xE8,0xF1,0xEA,0xEB,0xEC,0xED,0xEE,0xEF,0xF0,0xF1,0xF2,
 103:pff.c         **** 
 104:pff.c         **** #elif _CODE_PAGE == 775	/* Baltic (OEM) */
 105:pff.c         **** #define _DF1S	0
 106:pff.c         **** #define _EXCVT {0x80,0x9A,0x91,0xA0,0x8E,0x95,0x8F,0x80,0xAD,0xED,0x8A,0x8A,0xA1,0x8D,0x8E,0x8F,0x9
 107:pff.c         **** 				0xA0,0xA1,0xE0,0xA3,0xA3,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF,0xB0,0xB1,0xB2,
 108:pff.c         **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xB5,0xB6,0xB7,
 109:pff.c         **** 				0xE0,0xE1,0xE2,0xE3,0xE5,0xE5,0xE6,0xE3,0xE8,0xE8,0xEA,0xEA,0xEE,0xED,0xEE,0xEF,0xF0,0xF1,0xF2,
 110:pff.c         **** 
 111:pff.c         **** #elif _CODE_PAGE == 850	/* Multilingual Latin 1 (OEM) */
 112:pff.c         **** #define _DF1S	0
 113:pff.c         **** #define _EXCVT {0x80,0x9A,0x90,0xB6,0x8E,0xB7,0x8F,0x80,0xD2,0xD3,0xD4,0xD8,0xD7,0xDE,0x8E,0x8F,0x9
 114:pff.c         **** 				0xB5,0xD6,0xE0,0xE9,0xA5,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0x21,0xAE,0xAF,0xB0,0xB1,0xB2,
 115:pff.c         **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC7,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
 116:pff.c         **** 				0xE0,0xE1,0xE2,0xE3,0xE5,0xE5,0xE6,0xE7,0xE7,0xE9,0xEA,0xEB,0xED,0xED,0xEE,0xEF,0xF0,0xF1,0xF2,
 117:pff.c         **** 
 118:pff.c         **** #elif _CODE_PAGE == 852	/* Latin 2 (OEM) */
 119:pff.c         **** #define _DF1S	0
 120:pff.c         **** #define _EXCVT {0x80,0x9A,0x90,0xB6,0x8E,0xDE,0x8F,0x80,0x9D,0xD3,0x8A,0x8A,0xD7,0x8D,0x8E,0x8F,0x9
 121:pff.c         **** 				0xB5,0xD6,0xE0,0xE9,0xA4,0xA4,0xA6,0xA6,0xA8,0xA8,0xAA,0x8D,0xAC,0xB8,0xAE,0xAF,0xB0,0xB1,0xB2,
 122:pff.c         **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC6,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD1,0xD1,0xD2,
 123:pff.c         **** 				0xE0,0xE1,0xE2,0xE3,0xE3,0xD5,0xE6,0xE6,0xE8,0xE9,0xE8,0xEB,0xED,0xED,0xDD,0xEF,0xF0,0xF1,0xF2,
 124:pff.c         **** 
 125:pff.c         **** #elif _CODE_PAGE == 855	/* Cyrillic (OEM) */
 126:pff.c         **** #define _DF1S	0
 127:pff.c         **** #define _EXCVT {0x81,0x81,0x83,0x83,0x85,0x85,0x87,0x87,0x89,0x89,0x8B,0x8B,0x8D,0x8D,0x8F,0x8F,0x9
 128:pff.c         **** 				0xA1,0xA1,0xA3,0xA3,0xA5,0xA5,0xA7,0xA7,0xA9,0xA9,0xAB,0xAB,0xAD,0xAD,0xAE,0xAF,0xB0,0xB1,0xB2,
 129:pff.c         **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC7,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD1,0xD1,0xD3,
 130:pff.c         **** 				0xE0,0xE2,0xE2,0xE4,0xE4,0xE6,0xE6,0xE8,0xE8,0xEA,0xEA,0xEC,0xEC,0xEE,0xEE,0xEF,0xF0,0xF2,0xF2,
 131:pff.c         **** 
 132:pff.c         **** #elif _CODE_PAGE == 857	/* Turkish (OEM) */
 133:pff.c         **** #define _DF1S	0
 134:pff.c         **** #define _EXCVT {0x80,0x9A,0x90,0xB6,0x8E,0xB7,0x8F,0x80,0xD2,0xD3,0xD4,0xD8,0xD7,0x98,0x8E,0x8F,0x9
 135:pff.c         **** 				0xB5,0xD6,0xE0,0xE9,0xA5,0xA5,0xA6,0xA6,0xA8,0xA9,0xAA,0xAB,0xAC,0x21,0xAE,0xAF,0xB0,0xB1,0xB2,
 136:pff.c         **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC7,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
 137:pff.c         **** 				0xE0,0xE1,0xE2,0xE3,0xE5,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xDE,0x59,0xEE,0xEF,0xF0,0xF1,0xF2,
 138:pff.c         **** 
 139:pff.c         **** #elif _CODE_PAGE == 858	/* Multilingual Latin 1 + Euro (OEM) */
 140:pff.c         **** #define _DF1S	0
 141:pff.c         **** #define _EXCVT {0x80,0x9A,0x90,0xB6,0x8E,0xB7,0x8F,0x80,0xD2,0xD3,0xD4,0xD8,0xD7,0xDE,0x8E,0x8F,0x9
 142:pff.c         **** 				0xB5,0xD6,0xE0,0xE9,0xA5,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0x21,0xAE,0xAF,0xB0,0xB1,0xB2,
 143:pff.c         **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC7,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD1,0xD1,0xD2,
 144:pff.c         **** 				0xE0,0xE1,0xE2,0xE3,0xE5,0xE5,0xE6,0xE7,0xE7,0xE9,0xEA,0xEB,0xED,0xED,0xEE,0xEF,0xF0,0xF1,0xF2,
 145:pff.c         **** 
 146:pff.c         **** #elif _CODE_PAGE == 862	/* Hebrew (OEM) */
 147:pff.c         **** #define _DF1S	0
 148:pff.c         **** #define _EXCVT {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0x9
 149:pff.c         **** 				0x41,0x49,0x4F,0x55,0xA5,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0x21,0xAE,0xAF,0xB0,0xB1,0xB2,
 150:pff.c         **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
 151:pff.c         **** 				0xE0,0xE1,0xE2,0xE3,0xE4,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xEC,0xED,0xEE,0xEF,0xF0,0xF1,0xF2,
 152:pff.c         **** 
 153:pff.c         **** #elif _CODE_PAGE == 866	/* Russian (OEM) */
 154:pff.c         **** #define _DF1S	0
 155:pff.c         **** #define _EXCVT {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0x9
 156:pff.c         **** 				0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0xB0,0xB1,0xB2,
 157:pff.c         **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
 158:pff.c         **** 				0x90,0x91,0x92,0x93,0x9d,0x95,0x96,0x97,0x98,0x99,0x9A,0x9B,0x9C,0x9D,0x9E,0x9F,0xF0,0xF0,0xF2,
 159:pff.c         **** 
 160:pff.c         **** #elif _CODE_PAGE == 874	/* Thai (OEM, Windows) */
 161:pff.c         **** #define _DF1S	0
 162:pff.c         **** #define _EXCVT {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0x9
 163:pff.c         **** 				0xA0,0xA1,0xA2,0xA3,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF,0xB0,0xB1,0xB2,
 164:pff.c         **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
 165:pff.c         **** 				0xE0,0xE1,0xE2,0xE3,0xE4,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xEC,0xED,0xEE,0xEF,0xF0,0xF1,0xF2,
 166:pff.c         **** 
 167:pff.c         **** #elif _CODE_PAGE == 1250 /* Central Europe (Windows) */
 168:pff.c         **** #define _DF1S	0
 169:pff.c         **** #define _EXCVT {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0x9
 170:pff.c         **** 				0xA0,0xA1,0xA2,0xA3,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF,0xB0,0xB1,0xB2,
 171:pff.c         **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
 172:pff.c         **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
 173:pff.c         **** 
 174:pff.c         **** #elif _CODE_PAGE == 1251 /* Cyrillic (Windows) */
 175:pff.c         **** #define _DF1S	0
 176:pff.c         **** #define _EXCVT {0x80,0x81,0x82,0x82,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0x8
 177:pff.c         **** 				0xA0,0xA2,0xA2,0xA3,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF,0xB0,0xB1,0xB2,
 178:pff.c         **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
 179:pff.c         **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
 180:pff.c         **** 
 181:pff.c         **** #elif _CODE_PAGE == 1252 /* Latin 1 (Windows) */
 182:pff.c         **** #define _DF1S	0
 183:pff.c         **** #define _EXCVT {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0x9
 184:pff.c         **** 				0xA0,0x21,0xA2,0xA3,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF,0xB0,0xB1,0xB2,
 185:pff.c         **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
 186:pff.c         **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
 187:pff.c         **** 
 188:pff.c         **** #elif _CODE_PAGE == 1253 /* Greek (Windows) */
 189:pff.c         **** #define _DF1S	0
 190:pff.c         **** #define _EXCVT {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0x9
 191:pff.c         **** 				0xA0,0xA1,0xA2,0xA3,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF,0xB0,0xB1,0xB2,
 192:pff.c         **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
 193:pff.c         **** 				0xE0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xF2,
 194:pff.c         **** 
 195:pff.c         **** #elif _CODE_PAGE == 1254 /* Turkish (Windows) */
 196:pff.c         **** #define _DF1S	0
 197:pff.c         **** #define _EXCVT {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0x9
 198:pff.c         **** 				0xA0,0x21,0xA2,0xA3,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF,0xB0,0xB1,0xB2,
 199:pff.c         **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
 200:pff.c         **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
 201:pff.c         **** 
 202:pff.c         **** #elif _CODE_PAGE == 1255 /* Hebrew (Windows) */
 203:pff.c         **** #define _DF1S	0
 204:pff.c         **** #define _EXCVT {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0x9
 205:pff.c         **** 				0xA0,0x21,0xA2,0xA3,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF,0xB0,0xB1,0xB2,
 206:pff.c         **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
 207:pff.c         **** 				0xE0,0xE1,0xE2,0xE3,0xE4,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xEC,0xED,0xEE,0xEF,0xF0,0xF1,0xF2,
 208:pff.c         **** 
 209:pff.c         **** #elif _CODE_PAGE == 1256 /* Arabic (Windows) */
 210:pff.c         **** #define _DF1S	0
 211:pff.c         **** #define _EXCVT {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0x9
 212:pff.c         **** 				0xA0,0xA1,0xA2,0xA3,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF,0xB0,0xB1,0xB2,
 213:pff.c         **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
 214:pff.c         **** 				0x41,0xE1,0x41,0xE3,0xE4,0xE5,0xE6,0x43,0x45,0x45,0x45,0x45,0xEC,0xED,0x49,0x49,0xF0,0xF1,0xF2,
 215:pff.c         **** 
 216:pff.c         **** #elif _CODE_PAGE == 1257 /* Baltic (Windows) */
 217:pff.c         **** #define _DF1S	0
 218:pff.c         **** #define _EXCVT {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0x9
 219:pff.c         **** 				0xA0,0xA1,0xA2,0xA3,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF,0xB0,0xB1,0xB2,
 220:pff.c         **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
 221:pff.c         **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
 222:pff.c         **** 
 223:pff.c         **** #elif _CODE_PAGE == 1258 /* Vietnam (OEM, Windows) */
 224:pff.c         **** #define _DF1S	0
 225:pff.c         **** #define _EXCVT {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0x9
 226:pff.c         **** 				0xA0,0x21,0xA2,0xA3,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF,0xB0,0xB1,0xB2,
 227:pff.c         **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
 228:pff.c         **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xEC,0xCD,0xCE,0xCF,0xD0,0xD1,0xF2,
 229:pff.c         **** 
 230:pff.c         **** #elif _CODE_PAGE == 1	/* ASCII (for only non-LFN cfg) */
 231:pff.c         **** #define _DF1S	0
 232:pff.c         **** 
 233:pff.c         **** #else
 234:pff.c         **** #error Unknown code page
 235:pff.c         **** 
 236:pff.c         **** #endif
 237:pff.c         **** 
 238:pff.c         **** 
 239:pff.c         **** 
 240:pff.c         **** /* Character code support macros */
 241:pff.c         **** 
 242:pff.c         **** #define IsUpper(c)	(((c)>='A')&&((c)<='Z'))
 243:pff.c         **** #define IsLower(c)	(((c)>='a')&&((c)<='z'))
 244:pff.c         **** 
 245:pff.c         **** #if _DF1S		/* DBCS configuration */
 246:pff.c         **** 
 247:pff.c         **** #ifdef _DF2S	/* Two 1st byte areas */
 248:pff.c         **** #define IsDBCS1(c)	(((BYTE)(c) >= _DF1S && (BYTE)(c) <= _DF1E) || ((BYTE)(c) >= _DF2S && (BYTE)(c) 
 249:pff.c         **** #else			/* One 1st byte area */
 250:pff.c         **** #define IsDBCS1(c)	((BYTE)(c) >= _DF1S && (BYTE)(c) <= _DF1E)
 251:pff.c         **** #endif
 252:pff.c         **** 
 253:pff.c         **** #ifdef _DS3S	/* Three 2nd byte areas */
 254:pff.c         **** #define IsDBCS2(c)	(((BYTE)(c) >= _DS1S && (BYTE)(c) <= _DS1E) || ((BYTE)(c) >= _DS2S && (BYTE)(c) 
 255:pff.c         **** #else			/* Two 2nd byte areas */
 256:pff.c         **** #define IsDBCS2(c)	(((BYTE)(c) >= _DS1S && (BYTE)(c) <= _DS1E) || ((BYTE)(c) >= _DS2S && (BYTE)(c) 
 257:pff.c         **** #endif
 258:pff.c         **** 
 259:pff.c         **** #else			/* SBCS configuration */
 260:pff.c         **** 
 261:pff.c         **** #define IsDBCS1(c)	0
 262:pff.c         **** #define IsDBCS2(c)	0
 263:pff.c         **** 
 264:pff.c         **** #endif /* _DF1S */
 265:pff.c         **** 
 266:pff.c         **** 
 267:pff.c         **** /* FatFs refers the members in the FAT structures with byte offset instead
 268:pff.c         **** / of structure member because there are incompatibility of the packing option
 269:pff.c         **** / between various compilers. */
 270:pff.c         **** 
 271:pff.c         **** #define BS_jmpBoot			0
 272:pff.c         **** #define BS_OEMName			3
 273:pff.c         **** #define BPB_BytsPerSec		11
 274:pff.c         **** #define BPB_SecPerClus		13
 275:pff.c         **** #define BPB_RsvdSecCnt		14
 276:pff.c         **** #define BPB_NumFATs			16
 277:pff.c         **** #define BPB_RootEntCnt		17
 278:pff.c         **** #define BPB_TotSec16		19
 279:pff.c         **** #define BPB_Media			21
 280:pff.c         **** #define BPB_FATSz16			22
 281:pff.c         **** #define BPB_SecPerTrk		24
 282:pff.c         **** #define BPB_NumHeads		26
 283:pff.c         **** #define BPB_HiddSec			28
 284:pff.c         **** #define BPB_TotSec32		32
 285:pff.c         **** #define BS_55AA				510
 286:pff.c         **** 
 287:pff.c         **** #define BS_DrvNum			36
 288:pff.c         **** #define BS_BootSig			38
 289:pff.c         **** #define BS_VolID			39
 290:pff.c         **** #define BS_VolLab			43
 291:pff.c         **** #define BS_FilSysType		54
 292:pff.c         **** 
 293:pff.c         **** #define BPB_FATSz32			36
 294:pff.c         **** #define BPB_ExtFlags		40
 295:pff.c         **** #define BPB_FSVer			42
 296:pff.c         **** #define BPB_RootClus		44
 297:pff.c         **** #define BPB_FSInfo			48
 298:pff.c         **** #define BPB_BkBootSec		50
 299:pff.c         **** #define BS_DrvNum32			64
 300:pff.c         **** #define BS_BootSig32		66
 301:pff.c         **** #define BS_VolID32			67
 302:pff.c         **** #define BS_VolLab32			71
 303:pff.c         **** #define BS_FilSysType32		82
 304:pff.c         **** 
 305:pff.c         **** #define MBR_Table			446
 306:pff.c         **** 
 307:pff.c         **** #define	DIR_Name			0
 308:pff.c         **** #define	DIR_Attr			11
 309:pff.c         **** #define	DIR_NTres			12
 310:pff.c         **** #define	DIR_CrtTime			14
 311:pff.c         **** #define	DIR_CrtDate			16
 312:pff.c         **** #define	DIR_FstClusHI		20
 313:pff.c         **** #define	DIR_WrtTime			22
 314:pff.c         **** #define	DIR_WrtDate			24
 315:pff.c         **** #define	DIR_FstClusLO		26
 316:pff.c         **** #define	DIR_FileSize		28
 317:pff.c         **** 
 318:pff.c         **** 
 319:pff.c         **** 
 320:pff.c         **** /*--------------------------------------------------------------------------
 321:pff.c         **** 
 322:pff.c         ****    Private Functions
 323:pff.c         **** 
 324:pff.c         **** ---------------------------------------------------------------------------*/
 325:pff.c         **** 
 326:pff.c         **** 
 327:pff.c         **** static
 328:pff.c         **** FATFS *FatFs;	/* Pointer to the file system object (logical drive) */
 329:pff.c         **** 
 330:pff.c         **** 
 331:pff.c         **** /* Fill memory */
 332:pff.c         **** static
 333:pff.c         **** void mem_set (void* dst, int val, int cnt) {
 334:pff.c         **** 	char *d = (char*)dst;
 335:pff.c         **** 	while (cnt--) *d++ = (char)val;
 336:pff.c         **** }
 337:pff.c         **** 
 338:pff.c         **** /* Compare memory to memory */
 339:pff.c         **** static
 340:pff.c         **** int mem_cmp (const void* dst, const void* src, int cnt) {
 341:pff.c         **** 	const char *d = (const char *)dst, *s = (const char *)src;
 342:pff.c         **** 	int r = 0;
 343:pff.c         **** 	while (cnt-- && (r = *d++ - *s++) == 0) ;
 344:pff.c         **** 	return r;
 345:pff.c         **** }
 346:pff.c         **** 
 347:pff.c         **** 
 348:pff.c         **** 
 349:pff.c         **** /*-----------------------------------------------------------------------*/
 350:pff.c         **** /* FAT access - Read value of a FAT entry                                */
 351:pff.c         **** /*-----------------------------------------------------------------------*/
 352:pff.c         **** 
 353:pff.c         **** static
 354:pff.c         **** CLUST get_fat (	/* 1:IO error, Else:Cluster status */
 355:pff.c         **** 	CLUST clst	/* Cluster# to get the link information */
 356:pff.c         **** )
 357:pff.c         **** {
 358:pff.c         **** 	WORD wc, bc, ofs;
 359:pff.c         **** 	BYTE buf[4];
 360:pff.c         **** 	FATFS *fs = FatFs;
 361:pff.c         **** 
 362:pff.c         **** 
 363:pff.c         **** 	if (clst < 2 || clst >= fs->n_fatent)	/* Range check */
 364:pff.c         **** 		return 1;
 365:pff.c         **** 
 366:pff.c         **** 	switch (fs->fs_type) {
 367:pff.c         **** #if _FS_FAT12
 368:pff.c         **** 	case FS_FAT12 :
 369:pff.c         **** 		bc = (WORD)clst; bc += bc / 2;
 370:pff.c         **** 		ofs = bc % 512; bc /= 512;
 371:pff.c         **** 		if (ofs != 511) {
 372:pff.c         **** 			if (disk_readp(buf, fs->fatbase + bc, ofs, 2)) break;
 373:pff.c         **** 		} else {
 374:pff.c         **** 			if (disk_readp(buf, fs->fatbase + bc, 511, 1)) break;
 375:pff.c         **** 			if (disk_readp(buf+1, fs->fatbase + bc + 1, 0, 1)) break;
 376:pff.c         **** 		}
 377:pff.c         **** 		wc = LD_WORD(buf);
 378:pff.c         **** 		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 379:pff.c         **** #endif
 380:pff.c         **** 	case FS_FAT16 :
 381:pff.c         **** 		if (disk_readp(buf, fs->fatbase + clst / 256, (WORD)(((WORD)clst % 256) * 2), 2)) break;
 382:pff.c         **** 		return LD_WORD(buf);
 383:pff.c         **** #if _FS_FAT32
 384:pff.c         **** 	case FS_FAT32 :
 385:pff.c         **** 		if (disk_readp(buf, fs->fatbase + clst / 128, (WORD)(((WORD)clst % 128) * 4), 4)) break;
 386:pff.c         **** 		return LD_DWORD(buf) & 0x0FFFFFFF;
 387:pff.c         **** #endif
 388:pff.c         **** 	}
 389:pff.c         **** 
 390:pff.c         **** 	return 1;	/* An error occured at the disk I/O layer */
 391:pff.c         **** }
 392:pff.c         **** 
 393:pff.c         **** 
 394:pff.c         **** 
 395:pff.c         **** 
 396:pff.c         **** /*-----------------------------------------------------------------------*/
 397:pff.c         **** /* Get sector# from cluster#                                             */
 398:pff.c         **** /*-----------------------------------------------------------------------*/
 399:pff.c         **** 
 400:pff.c         **** static
 401:pff.c         **** DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
 402:pff.c         **** 	CLUST clst		/* Cluster# to be converted */
 403:pff.c         **** )
 404:pff.c         **** {
  16               		.loc 1 404 1 view -0
  17               		.cfi_startproc
  18               		.loc 1 404 1 is_stmt 0 view .LVU1
  19 0000 CF93      		push r28
  20               	.LCFI0:
  21               		.cfi_def_cfa_offset 4
  22               		.cfi_offset 28, -3
  23 0002 DF93      		push r29
  24               	.LCFI1:
  25               		.cfi_def_cfa_offset 5
  26               		.cfi_offset 29, -4
  27 0004 00D0      		rcall .
  28 0006 0F92      		push __tmp_reg__
  29               	.LCFI2:
  30               		.cfi_def_cfa_offset 9
  31 0008 CDB7      		in r28,__SP_L__
  32 000a DEB7      		in r29,__SP_H__
  33               	.LCFI3:
  34               		.cfi_def_cfa_register 28
  35               	/* prologue: function */
  36               	/* frame size = 4 */
  37               	/* stack size = 6 */
  38               	.L__stack_usage = 6
  39 000c 6983      		std Y+1,r22
  40 000e 7A83      		std Y+2,r23
  41 0010 8B83      		std Y+3,r24
  42 0012 9C83      		std Y+4,r25
 405:pff.c         **** 	FATFS *fs = FatFs;
  43               		.loc 1 405 2 is_stmt 1 view .LVU2
  44               		.loc 1 405 9 is_stmt 0 view .LVU3
  45 0014 E091 0000 		lds r30,FatFs
  46 0018 F091 0000 		lds r31,FatFs+1
  47               	.LVL1:
 406:pff.c         **** 
 407:pff.c         **** 
 408:pff.c         **** 	clst -= 2;
  48               		.loc 1 408 2 is_stmt 1 view .LVU4
  49               		.loc 1 408 7 is_stmt 0 view .LVU5
  50 001c 9B01      		movw r18,r22
  51 001e AC01      		movw r20,r24
  52 0020 2250      		subi r18,2
  53 0022 3109      		sbc r19,__zero_reg__
  54 0024 4109      		sbc r20,__zero_reg__
  55 0026 5109      		sbc r21,__zero_reg__
  56               	.LVL2:
 409:pff.c         **** 	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
  57               		.loc 1 409 2 is_stmt 1 view .LVU6
  58               		.loc 1 409 28 is_stmt 0 view .LVU7
  59 0028 8681      		ldd r24,Z+6
  60 002a 9781      		ldd r25,Z+7
  61 002c A085      		ldd r26,Z+8
  62 002e B185      		ldd r27,Z+9
  63 0030 0297      		sbiw r24,2
  64 0032 A109      		sbc r26,__zero_reg__
  65 0034 B109      		sbc r27,__zero_reg__
  66               		.loc 1 409 5 view .LVU8
  67 0036 2817      		cp r18,r24
  68 0038 3907      		cpc r19,r25
  69 003a 4A07      		cpc r20,r26
  70 003c 5B07      		cpc r21,r27
  71 003e 00F4      		brsh .L3
 410:pff.c         **** 	return (DWORD)clst * fs->csize + fs->database;
  72               		.loc 1 410 2 is_stmt 1 view .LVU9
  73               		.loc 1 410 25 is_stmt 0 view .LVU10
  74 0040 A281      		ldd r26,Z+2
  75               		.loc 1 410 21 view .LVU11
  76 0042 B0E0      		ldi r27,0
  77 0044 0E94 0000 		call __muluhisi3
  78 0048 6983      		std Y+1,r22
  79 004a 7A83      		std Y+2,r23
  80 004c 8B83      		std Y+3,r24
  81 004e 9C83      		std Y+4,r25
  82               		.loc 1 410 33 view .LVU12
  83 0050 8289      		ldd r24,Z+18
  84 0052 9389      		ldd r25,Z+19
  85 0054 A489      		ldd r26,Z+20
  86 0056 B589      		ldd r27,Z+21
  87 0058 2981      		ldd r18,Y+1
  88 005a 3A81      		ldd r19,Y+2
  89 005c 4B81      		ldd r20,Y+3
  90 005e 5C81      		ldd r21,Y+4
  91               	.LVL3:
  92               		.loc 1 410 33 view .LVU13
  93 0060 280F      		add r18,r24
  94 0062 391F      		adc r19,r25
  95 0064 4A1F      		adc r20,r26
  96 0066 5B1F      		adc r21,r27
  97 0068 2983      		std Y+1,r18
  98 006a 3A83      		std Y+2,r19
  99 006c 4B83      		std Y+3,r20
 100 006e 5C83      		std Y+4,r21
 101               	.L1:
 411:pff.c         **** }
 102               		.loc 1 411 1 view .LVU14
 103 0070 6981      		ldd r22,Y+1
 104 0072 7A81      		ldd r23,Y+2
 105 0074 8B81      		ldd r24,Y+3
 106 0076 9C81      		ldd r25,Y+4
 107               	/* epilogue start */
 108 0078 0F90      		pop __tmp_reg__
 109 007a 0F90      		pop __tmp_reg__
 110 007c 0F90      		pop __tmp_reg__
 111 007e 0F90      		pop __tmp_reg__
 112 0080 DF91      		pop r29
 113 0082 CF91      		pop r28
 114 0084 0895      		ret
 115               	.LVL4:
 116               	.L3:
 409:pff.c         **** 	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
 117               		.loc 1 409 41 view .LVU15
 118 0086 1982      		std Y+1,__zero_reg__
 119 0088 1A82      		std Y+2,__zero_reg__
 120 008a 1B82      		std Y+3,__zero_reg__
 121 008c 1C82      		std Y+4,__zero_reg__
 122 008e 00C0      		rjmp .L1
 123               		.cfi_endproc
 124               	.LFE3:
 127               	dir_rewind:
 128               	.LVL5:
 129               	.LFB4:
 412:pff.c         **** 
 413:pff.c         **** 
 414:pff.c         **** 
 415:pff.c         **** 
 416:pff.c         **** /*-----------------------------------------------------------------------*/
 417:pff.c         **** /* Directory handling - Rewind directory index                           */
 418:pff.c         **** /*-----------------------------------------------------------------------*/
 419:pff.c         **** 
 420:pff.c         **** static
 421:pff.c         **** FRESULT dir_rewind (
 422:pff.c         **** 	DIR *dj			/* Pointer to directory object */
 423:pff.c         **** )
 424:pff.c         **** {
 130               		.loc 1 424 1 is_stmt 1 view -0
 131               		.cfi_startproc
 132               		.loc 1 424 1 is_stmt 0 view .LVU17
 133 0090 0F93      		push r16
 134               	.LCFI4:
 135               		.cfi_def_cfa_offset 4
 136               		.cfi_offset 16, -3
 137 0092 1F93      		push r17
 138               	.LCFI5:
 139               		.cfi_def_cfa_offset 5
 140               		.cfi_offset 17, -4
 141 0094 CF93      		push r28
 142               	.LCFI6:
 143               		.cfi_def_cfa_offset 6
 144               		.cfi_offset 28, -5
 145 0096 DF93      		push r29
 146               	.LCFI7:
 147               		.cfi_def_cfa_offset 7
 148               		.cfi_offset 29, -6
 149               	/* prologue: function */
 150               	/* frame size = 0 */
 151               	/* stack size = 4 */
 152               	.L__stack_usage = 4
 153 0098 EC01      		movw r28,r24
 425:pff.c         **** 	CLUST clst;
 154               		.loc 1 425 2 is_stmt 1 view .LVU18
 426:pff.c         **** 	FATFS *fs = FatFs;
 155               		.loc 1 426 2 view .LVU19
 156               		.loc 1 426 9 is_stmt 0 view .LVU20
 157 009a E091 0000 		lds r30,FatFs
 158 009e F091 0000 		lds r31,FatFs+1
 159               	.LVL6:
 427:pff.c         **** 
 428:pff.c         **** 
 429:pff.c         **** 	dj->index = 0;
 160               		.loc 1 429 2 is_stmt 1 view .LVU21
 161               		.loc 1 429 12 is_stmt 0 view .LVU22
 162 00a2 1982      		std Y+1,__zero_reg__
 163 00a4 1882      		st Y,__zero_reg__
 430:pff.c         **** 	clst = dj->sclust;
 164               		.loc 1 430 2 is_stmt 1 view .LVU23
 165               		.loc 1 430 7 is_stmt 0 view .LVU24
 166 00a6 6C81      		ldd r22,Y+4
 167 00a8 7D81      		ldd r23,Y+5
 168 00aa 8E81      		ldd r24,Y+6
 169 00ac 9F81      		ldd r25,Y+7
 170               	.LVL7:
 431:pff.c         **** 	if (clst == 1 || clst >= fs->n_fatent)	/* Check start cluster range */
 171               		.loc 1 431 2 is_stmt 1 view .LVU25
 172               		.loc 1 431 5 is_stmt 0 view .LVU26
 173 00ae 6130      		cpi r22,1
 174 00b0 7105      		cpc r23,__zero_reg__
 175 00b2 8105      		cpc r24,__zero_reg__
 176 00b4 9105      		cpc r25,__zero_reg__
 177 00b6 01F0      		breq .L10
 178               		.loc 1 431 16 discriminator 1 view .LVU27
 179 00b8 0681      		ldd r16,Z+6
 180 00ba 1781      		ldd r17,Z+7
 181 00bc 2085      		ldd r18,Z+8
 182 00be 3185      		ldd r19,Z+9
 183 00c0 6017      		cp r22,r16
 184 00c2 7107      		cpc r23,r17
 185 00c4 8207      		cpc r24,r18
 186 00c6 9307      		cpc r25,r19
 187 00c8 00F4      		brsh .L10
 432:pff.c         **** 		return FR_DISK_ERR;
 433:pff.c         **** 	if (_FS_FAT32 && !clst && fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in 
 188               		.loc 1 433 2 is_stmt 1 view .LVU28
 189               		.loc 1 433 5 is_stmt 0 view .LVU29
 190 00ca 6115      		cp r22,__zero_reg__
 191 00cc 7105      		cpc r23,__zero_reg__
 192 00ce 8105      		cpc r24,__zero_reg__
 193 00d0 9105      		cpc r25,__zero_reg__
 194 00d2 01F4      		brne .L6
 195               		.loc 1 433 25 discriminator 1 view .LVU30
 196 00d4 2081      		ld r18,Z
 197 00d6 2330      		cpi r18,lo8(3)
 198 00d8 01F4      		brne .L6
 434:pff.c         **** 		clst = (CLUST)fs->dirbase;
 199               		.loc 1 434 3 is_stmt 1 view .LVU31
 200               		.loc 1 434 8 is_stmt 0 view .LVU32
 201 00da 6685      		ldd r22,Z+14
 202 00dc 7785      		ldd r23,Z+15
 203 00de 8089      		ldd r24,Z+16
 204 00e0 9189      		ldd r25,Z+17
 205               	.LVL8:
 206               	.L6:
 435:pff.c         **** 	dj->clust = clst;						/* Current cluster */
 207               		.loc 1 435 2 is_stmt 1 view .LVU33
 208               		.loc 1 435 12 is_stmt 0 view .LVU34
 209 00e2 6887      		std Y+8,r22
 210 00e4 7987      		std Y+9,r23
 211 00e6 8A87      		std Y+10,r24
 212 00e8 9B87      		std Y+11,r25
 436:pff.c         **** 	dj->sect = clst ? clust2sect(clst) : fs->dirbase;	/* Current sector */
 213               		.loc 1 436 2 is_stmt 1 view .LVU35
 214               		.loc 1 436 37 is_stmt 0 view .LVU36
 215 00ea 6115      		cp r22,__zero_reg__
 216 00ec 7105      		cpc r23,__zero_reg__
 217 00ee 8105      		cpc r24,__zero_reg__
 218 00f0 9105      		cpc r25,__zero_reg__
 219 00f2 01F0      		breq .L7
 220               		.loc 1 436 20 discriminator 1 view .LVU37
 221 00f4 0E94 0000 		call clust2sect
 222               	.LVL9:
 223               	.L8:
 224               		.loc 1 436 11 discriminator 4 view .LVU38
 225 00f8 6C87      		std Y+12,r22
 226 00fa 7D87      		std Y+13,r23
 227 00fc 8E87      		std Y+14,r24
 228 00fe 9F87      		std Y+15,r25
 437:pff.c         **** 
 438:pff.c         **** 	return FR_OK;	/* Seek succeeded */
 229               		.loc 1 438 2 is_stmt 1 discriminator 4 view .LVU39
 230               		.loc 1 438 9 is_stmt 0 discriminator 4 view .LVU40
 231 0100 80E0      		ldi r24,0
 232               	.L4:
 233               	/* epilogue start */
 439:pff.c         **** }
 234               		.loc 1 439 1 view .LVU41
 235 0102 DF91      		pop r29
 236 0104 CF91      		pop r28
 237               	.LVL10:
 238               		.loc 1 439 1 view .LVU42
 239 0106 1F91      		pop r17
 240 0108 0F91      		pop r16
 241 010a 0895      		ret
 242               	.LVL11:
 243               	.L7:
 436:pff.c         **** 	dj->sect = clst ? clust2sect(clst) : fs->dirbase;	/* Current sector */
 244               		.loc 1 436 37 discriminator 2 view .LVU43
 245 010c 6685      		ldd r22,Z+14
 246 010e 7785      		ldd r23,Z+15
 247 0110 8089      		ldd r24,Z+16
 248               	.LVL12:
 436:pff.c         **** 	dj->sect = clst ? clust2sect(clst) : fs->dirbase;	/* Current sector */
 249               		.loc 1 436 37 discriminator 2 view .LVU44
 250 0112 9189      		ldd r25,Z+17
 251 0114 00C0      		rjmp .L8
 252               	.LVL13:
 253               	.L10:
 432:pff.c         **** 	if (_FS_FAT32 && !clst && fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in 
 254               		.loc 1 432 10 view .LVU45
 255 0116 81E0      		ldi r24,lo8(1)
 256               	.LVL14:
 432:pff.c         **** 	if (_FS_FAT32 && !clst && fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in 
 257               		.loc 1 432 10 view .LVU46
 258 0118 00C0      		rjmp .L4
 259               		.cfi_endproc
 260               	.LFE4:
 263               	get_fat:
 264               	.LVL15:
 265               	.LFB2:
 357:pff.c         **** 	WORD wc, bc, ofs;
 266               		.loc 1 357 1 is_stmt 1 view -0
 267               		.cfi_startproc
 357:pff.c         **** 	WORD wc, bc, ofs;
 268               		.loc 1 357 1 is_stmt 0 view .LVU48
 269 011a 0F93      		push r16
 270               	.LCFI8:
 271               		.cfi_def_cfa_offset 4
 272               		.cfi_offset 16, -3
 273 011c 1F93      		push r17
 274               	.LCFI9:
 275               		.cfi_def_cfa_offset 5
 276               		.cfi_offset 17, -4
 277 011e CF93      		push r28
 278               	.LCFI10:
 279               		.cfi_def_cfa_offset 6
 280               		.cfi_offset 28, -5
 281 0120 DF93      		push r29
 282               	.LCFI11:
 283               		.cfi_def_cfa_offset 7
 284               		.cfi_offset 29, -6
 285 0122 00D0      		rcall .
 286 0124 0F92      		push __tmp_reg__
 287               	.LCFI12:
 288               		.cfi_def_cfa_offset 11
 289 0126 CDB7      		in r28,__SP_L__
 290 0128 DEB7      		in r29,__SP_H__
 291               	.LCFI13:
 292               		.cfi_def_cfa_register 28
 293               	/* prologue: function */
 294               	/* frame size = 4 */
 295               	/* stack size = 8 */
 296               	.L__stack_usage = 8
 297 012a 462F      		mov r20,r22
 298 012c 572F      		mov r21,r23
 299 012e BC01      		movw r22,r24
 300               	.LVL16:
 358:pff.c         **** 	BYTE buf[4];
 301               		.loc 1 358 2 is_stmt 1 view .LVU49
 359:pff.c         **** 	FATFS *fs = FatFs;
 302               		.loc 1 359 2 view .LVU50
 360:pff.c         **** 
 303               		.loc 1 360 2 view .LVU51
 363:pff.c         **** 		return 1;
 304               		.loc 1 363 2 view .LVU52
 363:pff.c         **** 		return 1;
 305               		.loc 1 363 5 is_stmt 0 view .LVU53
 306 0130 4230      		cpi r20,2
 307 0132 5105      		cpc r21,__zero_reg__
 308 0134 6105      		cpc r22,__zero_reg__
 309 0136 7105      		cpc r23,__zero_reg__
 310 0138 00F4      		brsh .L12
 311               	.LVL17:
 312               	.L17:
 366:pff.c         **** #if _FS_FAT12
 313               		.loc 1 366 2 view .LVU54
 314 013a 61E0      		ldi r22,lo8(1)
 315 013c 70E0      		ldi r23,0
 316 013e 80E0      		ldi r24,0
 317 0140 90E0      		ldi r25,0
 318               	.L11:
 319               	/* epilogue start */
 391:pff.c         **** 
 320               		.loc 1 391 1 view .LVU55
 321 0142 0F90      		pop __tmp_reg__
 322 0144 0F90      		pop __tmp_reg__
 323 0146 0F90      		pop __tmp_reg__
 324 0148 0F90      		pop __tmp_reg__
 325 014a DF91      		pop r29
 326 014c CF91      		pop r28
 327 014e 1F91      		pop r17
 328 0150 0F91      		pop r16
 329 0152 0895      		ret
 330               	.LVL18:
 331               	.L12:
 360:pff.c         **** 
 332               		.loc 1 360 9 discriminator 1 view .LVU56
 333 0154 E091 0000 		lds r30,FatFs
 334 0158 F091 0000 		lds r31,FatFs+1
 363:pff.c         **** 		return 1;
 335               		.loc 1 363 15 discriminator 1 view .LVU57
 336 015c 8681      		ldd r24,Z+6
 337 015e 9781      		ldd r25,Z+7
 338 0160 A085      		ldd r26,Z+8
 339 0162 B185      		ldd r27,Z+9
 340 0164 4817      		cp r20,r24
 341 0166 5907      		cpc r21,r25
 342 0168 6A07      		cpc r22,r26
 343 016a 7B07      		cpc r23,r27
 344 016c 00F4      		brsh .L17
 366:pff.c         **** #if _FS_FAT12
 345               		.loc 1 366 2 is_stmt 1 view .LVU58
 366:pff.c         **** #if _FS_FAT12
 346               		.loc 1 366 12 is_stmt 0 view .LVU59
 347 016e 8081      		ld r24,Z
 366:pff.c         **** #if _FS_FAT12
 348               		.loc 1 366 2 view .LVU60
 349 0170 8230      		cpi r24,lo8(2)
 350 0172 01F0      		breq .L15
 351 0174 8330      		cpi r24,lo8(3)
 352 0176 01F4      		brne .L17
 385:pff.c         **** 		return LD_DWORD(buf) & 0x0FFFFFFF;
 353               		.loc 1 385 3 is_stmt 1 view .LVU61
 385:pff.c         **** 		return LD_DWORD(buf) & 0x0FFFFFFF;
 354               		.loc 1 385 68 is_stmt 0 view .LVU62
 355 0178 9A01      		movw r18,r20
 356 017a 2F77      		andi r18,127
 357 017c 3327      		clr r19
 385:pff.c         **** 		return LD_DWORD(buf) & 0x0FFFFFFF;
 358               		.loc 1 385 75 view .LVU63
 359 017e 220F      		lsl r18
 360 0180 331F      		rol r19
 361 0182 220F      		lsl r18
 362 0184 331F      		rol r19
 385:pff.c         **** 		return LD_DWORD(buf) & 0x0FFFFFFF;
 363               		.loc 1 385 42 view .LVU64
 364 0186 97E0      		ldi r25,7
 365               		1:
 366 0188 7695      		lsr r23
 367 018a 6795      		ror r22
 368 018c 5795      		ror r21
 369 018e 4795      		ror r20
 370 0190 9A95      		dec r25
 371 0192 01F4      		brne 1b
 385:pff.c         **** 		return LD_DWORD(buf) & 0x0FFFFFFF;
 372               		.loc 1 385 7 view .LVU65
 373 0194 8285      		ldd r24,Z+10
 374 0196 9385      		ldd r25,Z+11
 375 0198 A485      		ldd r26,Z+12
 376 019a B585      		ldd r27,Z+13
 377 019c 480F      		add r20,r24
 378 019e 591F      		adc r21,r25
 379 01a0 6A1F      		adc r22,r26
 380 01a2 7B1F      		adc r23,r27
 381 01a4 04E0      		ldi r16,lo8(4)
 382 01a6 10E0      		ldi r17,0
 383 01a8 CE01      		movw r24,r28
 384 01aa 0196      		adiw r24,1
 385 01ac 0E94 0000 		call disk_readp
 386               	.LVL19:
 385:pff.c         **** 		return LD_DWORD(buf) & 0x0FFFFFFF;
 387               		.loc 1 385 6 view .LVU66
 388 01b0 8111      		cpse r24,__zero_reg__
 389 01b2 00C0      		rjmp .L17
 386:pff.c         **** #endif
 390               		.loc 1 386 3 is_stmt 1 view .LVU67
 386:pff.c         **** #endif
 391               		.loc 1 386 24 is_stmt 0 view .LVU68
 392 01b4 6981      		ldd r22,Y+1
 393 01b6 7A81      		ldd r23,Y+2
 394 01b8 8B81      		ldd r24,Y+3
 395 01ba 9C81      		ldd r25,Y+4
 396 01bc 9F70      		andi r25,15
 397 01be 00C0      		rjmp .L11
 398               	.LVL20:
 399               	.L15:
 381:pff.c         **** 		return LD_WORD(buf);
 400               		.loc 1 381 3 is_stmt 1 view .LVU69
 381:pff.c         **** 		return LD_WORD(buf);
 401               		.loc 1 381 68 is_stmt 0 view .LVU70
 402 01c0 9A01      		movw r18,r20
 403 01c2 3327      		clr r19
 381:pff.c         **** 		return LD_WORD(buf);
 404               		.loc 1 381 75 view .LVU71
 405 01c4 220F      		lsl r18
 406 01c6 331F      		rol r19
 381:pff.c         **** 		return LD_WORD(buf);
 407               		.loc 1 381 42 view .LVU72
 408 01c8 452F      		mov r20,r21
 409 01ca 562F      		mov r21,r22
 410 01cc 672F      		mov r22,r23
 411 01ce 7727      		clr r23
 381:pff.c         **** 		return LD_WORD(buf);
 412               		.loc 1 381 7 view .LVU73
 413 01d0 8285      		ldd r24,Z+10
 414 01d2 9385      		ldd r25,Z+11
 415 01d4 A485      		ldd r26,Z+12
 416 01d6 B585      		ldd r27,Z+13
 417 01d8 480F      		add r20,r24
 418 01da 591F      		adc r21,r25
 419 01dc 6A1F      		adc r22,r26
 420 01de 7B1F      		adc r23,r27
 421 01e0 02E0      		ldi r16,lo8(2)
 422 01e2 10E0      		ldi r17,0
 423 01e4 CE01      		movw r24,r28
 424 01e6 0196      		adiw r24,1
 425 01e8 0E94 0000 		call disk_readp
 426               	.LVL21:
 381:pff.c         **** 		return LD_WORD(buf);
 427               		.loc 1 381 6 view .LVU74
 428 01ec 8111      		cpse r24,__zero_reg__
 429 01ee 00C0      		rjmp .L17
 382:pff.c         **** #if _FS_FAT32
 430               		.loc 1 382 3 is_stmt 1 view .LVU75
 382:pff.c         **** #if _FS_FAT32
 431               		.loc 1 382 10 is_stmt 0 view .LVU76
 432 01f0 6981      		ldd r22,Y+1
 433 01f2 7A81      		ldd r23,Y+2
 434 01f4 90E0      		ldi r25,0
 435 01f6 80E0      		ldi r24,0
 436 01f8 00C0      		rjmp .L11
 437               		.cfi_endproc
 438               	.LFE2:
 441               	check_fs:
 442               	.LVL22:
 443               	.LFB9:
 440:pff.c         **** 
 441:pff.c         **** 
 442:pff.c         **** 
 443:pff.c         **** 
 444:pff.c         **** /*-----------------------------------------------------------------------*/
 445:pff.c         **** /* Directory handling - Move directory index next                        */
 446:pff.c         **** /*-----------------------------------------------------------------------*/
 447:pff.c         **** 
 448:pff.c         **** static
 449:pff.c         **** FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table */
 450:pff.c         **** 	DIR *dj			/* Pointer to directory object */
 451:pff.c         **** )
 452:pff.c         **** {
 453:pff.c         **** 	CLUST clst;
 454:pff.c         **** 	WORD i;
 455:pff.c         **** 	FATFS *fs = FatFs;
 456:pff.c         **** 
 457:pff.c         **** 
 458:pff.c         **** 	i = dj->index + 1;
 459:pff.c         **** 	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
 460:pff.c         **** 		return FR_NO_FILE;
 461:pff.c         **** 
 462:pff.c         **** 	if (!(i % 16)) {		/* Sector changed? */
 463:pff.c         **** 		dj->sect++;			/* Next sector */
 464:pff.c         **** 
 465:pff.c         **** 		if (dj->clust == 0) {	/* Static table */
 466:pff.c         **** 			if (i >= fs->n_rootdir)	/* Report EOT when end of table */
 467:pff.c         **** 				return FR_NO_FILE;
 468:pff.c         **** 		}
 469:pff.c         **** 		else {					/* Dynamic table */
 470:pff.c         **** 			if (((i / 16) & (fs->csize-1)) == 0) {	/* Cluster changed? */
 471:pff.c         **** 				clst = get_fat(dj->clust);		/* Get next cluster */
 472:pff.c         **** 				if (clst <= 1) return FR_DISK_ERR;
 473:pff.c         **** 				if (clst >= fs->n_fatent)		/* When it reached end of dynamic table */
 474:pff.c         **** 					return FR_NO_FILE;			/* Report EOT */
 475:pff.c         **** 				dj->clust = clst;				/* Initialize data for new cluster */
 476:pff.c         **** 				dj->sect = clust2sect(clst);
 477:pff.c         **** 			}
 478:pff.c         **** 		}
 479:pff.c         **** 	}
 480:pff.c         **** 
 481:pff.c         **** 	dj->index = i;
 482:pff.c         **** 
 483:pff.c         **** 	return FR_OK;
 484:pff.c         **** }
 485:pff.c         **** 
 486:pff.c         **** 
 487:pff.c         **** 
 488:pff.c         **** 
 489:pff.c         **** /*-----------------------------------------------------------------------*/
 490:pff.c         **** /* Directory handling - Find an object in the directory                  */
 491:pff.c         **** /*-----------------------------------------------------------------------*/
 492:pff.c         **** 
 493:pff.c         **** static
 494:pff.c         **** FRESULT dir_find (
 495:pff.c         **** 	DIR *dj,		/* Pointer to the directory object linked to the file name */
 496:pff.c         **** 	BYTE *dir		/* 32-byte working buffer */
 497:pff.c         **** )
 498:pff.c         **** {
 499:pff.c         **** 	FRESULT res;
 500:pff.c         **** 	BYTE c;
 501:pff.c         **** 
 502:pff.c         **** 
 503:pff.c         **** 	res = dir_rewind(dj);			/* Rewind directory object */
 504:pff.c         **** 	if (res != FR_OK) return res;
 505:pff.c         **** 
 506:pff.c         **** 	do {
 507:pff.c         **** 		res = disk_readp(dir, dj->sect, (WORD)((dj->index % 16) * 32), 32)	/* Read an entry */
 508:pff.c         **** 			? FR_DISK_ERR : FR_OK;
 509:pff.c         **** 		if (res != FR_OK) break;
 510:pff.c         **** 		c = dir[DIR_Name];	/* First character */
 511:pff.c         **** 		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 512:pff.c         **** 		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
 513:pff.c         **** 			break;
 514:pff.c         **** 		res = dir_next(dj);					/* Next entry */
 515:pff.c         **** 	} while (res == FR_OK);
 516:pff.c         **** 
 517:pff.c         **** 	return res;
 518:pff.c         **** }
 519:pff.c         **** 
 520:pff.c         **** 
 521:pff.c         **** 
 522:pff.c         **** 
 523:pff.c         **** /*-----------------------------------------------------------------------*/
 524:pff.c         **** /* Read an object from the directory                                     */
 525:pff.c         **** /*-----------------------------------------------------------------------*/
 526:pff.c         **** #if _USE_DIR
 527:pff.c         **** static
 528:pff.c         **** FRESULT dir_read (
 529:pff.c         **** 	DIR *dj,		/* Pointer to the directory object to store read object name */
 530:pff.c         **** 	BYTE *dir		/* 32-byte working buffer */
 531:pff.c         **** )
 532:pff.c         **** {
 533:pff.c         **** 	FRESULT res;
 534:pff.c         **** 	BYTE a, c;
 535:pff.c         **** 
 536:pff.c         **** 
 537:pff.c         **** 	res = FR_NO_FILE;
 538:pff.c         **** 	while (dj->sect) {
 539:pff.c         **** 		res = disk_readp(dir, dj->sect, (WORD)((dj->index % 16) * 32), 32)	/* Read an entry */
 540:pff.c         **** 			? FR_DISK_ERR : FR_OK;
 541:pff.c         **** 		if (res != FR_OK) break;
 542:pff.c         **** 		c = dir[DIR_Name];
 543:pff.c         **** 		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 544:pff.c         **** 		a = dir[DIR_Attr] & AM_MASK;
 545:pff.c         **** 		if (c != 0xE5 && c != '.' && !(a & AM_VOL))	/* Is it a valid entry? */
 546:pff.c         **** 			break;
 547:pff.c         **** 		res = dir_next(dj);			/* Next entry */
 548:pff.c         **** 		if (res != FR_OK) break;
 549:pff.c         **** 	}
 550:pff.c         **** 
 551:pff.c         **** 	if (res != FR_OK) dj->sect = 0;
 552:pff.c         **** 
 553:pff.c         **** 	return res;
 554:pff.c         **** }
 555:pff.c         **** #endif
 556:pff.c         **** 
 557:pff.c         **** 
 558:pff.c         **** 
 559:pff.c         **** /*-----------------------------------------------------------------------*/
 560:pff.c         **** /* Pick a segment and create the object name in directory form           */
 561:pff.c         **** /*-----------------------------------------------------------------------*/
 562:pff.c         **** 
 563:pff.c         **** #ifdef _EXCVT
 564:pff.c         **** 	static const BYTE cvt[] = _EXCVT;
 565:pff.c         **** #endif
 566:pff.c         **** 
 567:pff.c         **** static
 568:pff.c         **** FRESULT create_name (
 569:pff.c         **** 	DIR *dj,			/* Pointer to the directory object */
 570:pff.c         **** 	const char **path	/* Pointer to pointer to the segment in the path string */
 571:pff.c         **** )
 572:pff.c         **** {
 573:pff.c         **** 	BYTE c, d, ni, si, i, *sfn;
 574:pff.c         **** 	const char *p;
 575:pff.c         **** 
 576:pff.c         **** 	/* Create file name in directory form */
 577:pff.c         **** 	sfn = dj->fn;
 578:pff.c         **** 	mem_set(sfn, ' ', 11);
 579:pff.c         **** 	si = i = 0; ni = 8;
 580:pff.c         **** 	p = *path;
 581:pff.c         **** 	for (;;) {
 582:pff.c         **** 		c = p[si++];
 583:pff.c         **** 		if (c <= ' ' || c == '/') break;	/* Break on end of segment */
 584:pff.c         **** 		if (c == '.' || i >= ni) {
 585:pff.c         **** 			if (ni != 8 || c != '.') break;
 586:pff.c         **** 			i = 8; ni = 11;
 587:pff.c         **** 			continue;
 588:pff.c         **** 		}
 589:pff.c         **** #ifdef _EXCVT
 590:pff.c         **** 		if (c >= 0x80)					/* To upper extended char (SBCS) */
 591:pff.c         **** 			c = cvt[c - 0x80];
 592:pff.c         **** #endif
 593:pff.c         **** 		if (IsDBCS1(c) && i < ni - 1) {	/* DBC 1st byte? */
 594:pff.c         **** 			d = p[si++];				/* Get 2nd byte */
 595:pff.c         **** 			sfn[i++] = c;
 596:pff.c         **** 			sfn[i++] = d;
 597:pff.c         **** 		} else {						/* Single byte code */
 598:pff.c         **** 			if (IsLower(c)) c -= 0x20;	/* toupper */
 599:pff.c         **** 			sfn[i++] = c;
 600:pff.c         **** 		}
 601:pff.c         **** 	}
 602:pff.c         **** 	*path = &p[si];						/* Rerurn pointer to the next segment */
 603:pff.c         **** 
 604:pff.c         **** 	sfn[11] = (c <= ' ') ? 1 : 0;		/* Set last segment flag if end of path */
 605:pff.c         **** 
 606:pff.c         **** 	return FR_OK;
 607:pff.c         **** }
 608:pff.c         **** 
 609:pff.c         **** 
 610:pff.c         **** 
 611:pff.c         **** 
 612:pff.c         **** /*-----------------------------------------------------------------------*/
 613:pff.c         **** /* Get file information from directory entry                             */
 614:pff.c         **** /*-----------------------------------------------------------------------*/
 615:pff.c         **** #if _USE_DIR
 616:pff.c         **** static
 617:pff.c         **** void get_fileinfo (		/* No return code */
 618:pff.c         **** 	DIR *dj,			/* Pointer to the directory object */
 619:pff.c         **** 	BYTE *dir,			/* 32-byte working buffer */
 620:pff.c         **** 	FILINFO *fno	 	/* Pointer to store the file information */
 621:pff.c         **** )
 622:pff.c         **** {
 623:pff.c         **** 	BYTE i, c;
 624:pff.c         **** 	char *p;
 625:pff.c         **** 
 626:pff.c         **** 
 627:pff.c         **** 	p = fno->fname;
 628:pff.c         **** 	if (dj->sect) {
 629:pff.c         **** 		for (i = 0; i < 8; i++) {	/* Copy file name body */
 630:pff.c         **** 			c = dir[i];
 631:pff.c         **** 			if (c == ' ') break;
 632:pff.c         **** 			if (c == 0x05) c = 0xE5;
 633:pff.c         **** 			*p++ = c;
 634:pff.c         **** 		}
 635:pff.c         **** 		if (dir[8] != ' ') {		/* Copy file name extension */
 636:pff.c         **** 			*p++ = '.';
 637:pff.c         **** 			for (i = 8; i < 11; i++) {
 638:pff.c         **** 				c = dir[i];
 639:pff.c         **** 				if (c == ' ') break;
 640:pff.c         **** 				*p++ = c;
 641:pff.c         **** 			}
 642:pff.c         **** 		}
 643:pff.c         **** 		fno->fattrib = dir[DIR_Attr];				/* Attribute */
 644:pff.c         **** 		fno->fsize = LD_DWORD(dir+DIR_FileSize);	/* Size */
 645:pff.c         **** 		fno->fdate = LD_WORD(dir+DIR_WrtDate);		/* Date */
 646:pff.c         **** 		fno->ftime = LD_WORD(dir+DIR_WrtTime);		/* Time */
 647:pff.c         **** 	}
 648:pff.c         **** 	*p = 0;
 649:pff.c         **** }
 650:pff.c         **** #endif /* _USE_DIR */
 651:pff.c         **** 
 652:pff.c         **** 
 653:pff.c         **** 
 654:pff.c         **** /*-----------------------------------------------------------------------*/
 655:pff.c         **** /* Follow a file path                                                    */
 656:pff.c         **** /*-----------------------------------------------------------------------*/
 657:pff.c         **** 
 658:pff.c         **** static
 659:pff.c         **** FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
 660:pff.c         **** 	DIR *dj,			/* Directory object to return last directory and found object */
 661:pff.c         **** 	BYTE *dir,			/* 32-byte working buffer */
 662:pff.c         **** 	const char *path	/* Full-path string to find a file or directory */
 663:pff.c         **** )
 664:pff.c         **** {
 665:pff.c         **** 	FRESULT res;
 666:pff.c         **** 
 667:pff.c         **** 
 668:pff.c         **** 	while (*path == ' ') path++;		/* Skip leading spaces */
 669:pff.c         **** 	if (*path == '/') path++;			/* Strip heading separator */
 670:pff.c         **** 	dj->sclust = 0;						/* Set start directory (always root dir) */
 671:pff.c         **** 
 672:pff.c         **** 	if ((BYTE)*path <= ' ') {			/* Null path means the root directory */
 673:pff.c         **** 		res = dir_rewind(dj);
 674:pff.c         **** 		dir[0] = 0;
 675:pff.c         **** 
 676:pff.c         **** 	} else {							/* Follow path */
 677:pff.c         **** 		for (;;) {
 678:pff.c         **** 			res = create_name(dj, &path);	/* Get a segment */
 679:pff.c         **** 			if (res != FR_OK) break;
 680:pff.c         **** 			res = dir_find(dj, dir);		/* Find it */
 681:pff.c         **** 			if (res != FR_OK) {				/* Could not find the object */
 682:pff.c         **** 				if (res == FR_NO_FILE && !*(dj->fn+11))
 683:pff.c         **** 					res = FR_NO_PATH;
 684:pff.c         **** 				break;
 685:pff.c         **** 			}
 686:pff.c         **** 			if (*(dj->fn+11)) break;		/* Last segment match. Function completed. */
 687:pff.c         **** 			if (!(dir[DIR_Attr] & AM_DIR)) { /* Cannot follow because it is a file */
 688:pff.c         **** 				res = FR_NO_PATH; break;
 689:pff.c         **** 			}
 690:pff.c         **** 			dj->sclust = LD_CLUST(dir);
 691:pff.c         **** 		}
 692:pff.c         **** 	}
 693:pff.c         **** 
 694:pff.c         **** 	return res;
 695:pff.c         **** }
 696:pff.c         **** 
 697:pff.c         **** 
 698:pff.c         **** 
 699:pff.c         **** 
 700:pff.c         **** /*-----------------------------------------------------------------------*/
 701:pff.c         **** /* Check a sector if it is an FAT boot record                            */
 702:pff.c         **** /*-----------------------------------------------------------------------*/
 703:pff.c         **** 
 704:pff.c         **** static
 705:pff.c         **** BYTE check_fs (	/* 0:The FAT boot record, 1:Valid boot record but not an FAT, 2:Not a boot record, 
 706:pff.c         **** 	BYTE *buf,	/* Working buffer */
 707:pff.c         **** 	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
 708:pff.c         **** )
 709:pff.c         **** {
 444               		.loc 1 709 1 is_stmt 1 view -0
 445               		.cfi_startproc
 446               		.loc 1 709 1 is_stmt 0 view .LVU78
 447 01fa CF92      		push r12
 448               	.LCFI14:
 449               		.cfi_def_cfa_offset 4
 450               		.cfi_offset 12, -3
 451 01fc DF92      		push r13
 452               	.LCFI15:
 453               		.cfi_def_cfa_offset 5
 454               		.cfi_offset 13, -4
 455 01fe EF92      		push r14
 456               	.LCFI16:
 457               		.cfi_def_cfa_offset 6
 458               		.cfi_offset 14, -5
 459 0200 FF92      		push r15
 460               	.LCFI17:
 461               		.cfi_def_cfa_offset 7
 462               		.cfi_offset 15, -6
 463 0202 0F93      		push r16
 464               	.LCFI18:
 465               		.cfi_def_cfa_offset 8
 466               		.cfi_offset 16, -7
 467 0204 1F93      		push r17
 468               	.LCFI19:
 469               		.cfi_def_cfa_offset 9
 470               		.cfi_offset 17, -8
 471 0206 CF93      		push r28
 472               	.LCFI20:
 473               		.cfi_def_cfa_offset 10
 474               		.cfi_offset 28, -9
 475 0208 DF93      		push r29
 476               	.LCFI21:
 477               		.cfi_def_cfa_offset 11
 478               		.cfi_offset 29, -10
 479               	/* prologue: function */
 480               	/* frame size = 0 */
 481               	/* stack size = 8 */
 482               	.L__stack_usage = 8
 483 020a EC01      		movw r28,r24
 484 020c 6A01      		movw r12,r20
 485 020e 7B01      		movw r14,r22
 710:pff.c         **** 	if (disk_readp(buf, sect, 510, 2))		/* Read the boot sector */
 486               		.loc 1 710 2 is_stmt 1 view .LVU79
 487               		.loc 1 710 6 is_stmt 0 view .LVU80
 488 0210 02E0      		ldi r16,lo8(2)
 489 0212 10E0      		ldi r17,0
 490 0214 2EEF      		ldi r18,lo8(-2)
 491 0216 31E0      		ldi r19,lo8(1)
 492 0218 0E94 0000 		call disk_readp
 493               	.LVL23:
 494               		.loc 1 710 5 view .LVU81
 495 021c 8111      		cpse r24,__zero_reg__
 496 021e 00C0      		rjmp .L22
 711:pff.c         **** 		return 3;
 712:pff.c         **** 	if (LD_WORD(buf) != 0xAA55)				/* Check record signature */
 497               		.loc 1 712 2 is_stmt 1 view .LVU82
 498               		.loc 1 712 5 is_stmt 0 view .LVU83
 499 0220 8881      		ld r24,Y
 500 0222 9981      		ldd r25,Y+1
 501 0224 8535      		cpi r24,85
 502 0226 9A4A      		sbci r25,-86
 503 0228 01F4      		brne .L23
 504               	.LVL24:
 505               	.LBB4:
 506               	.LBI4:
 705:pff.c         **** 	BYTE *buf,	/* Working buffer */
 507               		.loc 1 705 6 is_stmt 1 view .LVU84
 508               	.LBB5:
 713:pff.c         **** 		return 2;
 714:pff.c         **** 
 715:pff.c         **** 	if (!disk_readp(buf, sect, BS_FilSysType, 2) && LD_WORD(buf) == 0x4146)	/* Check FAT12/16 */
 509               		.loc 1 715 2 view .LVU85
 510               		.loc 1 715 7 is_stmt 0 view .LVU86
 511 022a 26E3      		ldi r18,lo8(54)
 512 022c 30E0      		ldi r19,0
 513 022e A601      		movw r20,r12
 514 0230 B701      		movw r22,r14
 515 0232 CE01      		movw r24,r28
 516 0234 0E94 0000 		call disk_readp
 517               	.LVL25:
 518               		.loc 1 715 5 view .LVU87
 519 0238 8111      		cpse r24,__zero_reg__
 520 023a 00C0      		rjmp .L20
 521               		.loc 1 715 47 view .LVU88
 522 023c 2881      		ld r18,Y
 523 023e 3981      		ldd r19,Y+1
 524 0240 2634      		cpi r18,70
 525 0242 3144      		sbci r19,65
 526 0244 01F0      		breq .L18
 527               	.L20:
 716:pff.c         **** 		return 0;
 717:pff.c         **** 	if (_FS_FAT32 && !disk_readp(buf, sect, BS_FilSysType32, 2) && LD_WORD(buf) == 0x4146)	/* Check FA
 528               		.loc 1 717 2 is_stmt 1 view .LVU89
 529               		.loc 1 717 20 is_stmt 0 view .LVU90
 530 0246 02E0      		ldi r16,lo8(2)
 531 0248 10E0      		ldi r17,0
 532 024a 22E5      		ldi r18,lo8(82)
 533 024c 30E0      		ldi r19,0
 534 024e A601      		movw r20,r12
 535 0250 B701      		movw r22,r14
 536 0252 CE01      		movw r24,r28
 537 0254 0E94 0000 		call disk_readp
 538               	.LVL26:
 539               		.loc 1 717 5 view .LVU91
 540 0258 8111      		cpse r24,__zero_reg__
 541 025a 00C0      		rjmp .L24
 542               		.loc 1 717 62 view .LVU92
 543 025c 81E0      		ldi r24,lo8(1)
 544 025e 2881      		ld r18,Y
 545 0260 3981      		ldd r19,Y+1
 546 0262 2634      		cpi r18,70
 547 0264 3144      		sbci r19,65
 548 0266 01F4      		brne .L18
 549 0268 80E0      		ldi r24,0
 550               	.LVL27:
 551               	.L18:
 552               	/* epilogue start */
 553               		.loc 1 717 62 view .LVU93
 554               	.LBE5:
 555               	.LBE4:
 718:pff.c         **** 		return 0;
 719:pff.c         **** 	return 1;
 720:pff.c         **** }
 556               		.loc 1 720 1 view .LVU94
 557 026a DF91      		pop r29
 558 026c CF91      		pop r28
 559               	.LVL28:
 560               		.loc 1 720 1 view .LVU95
 561 026e 1F91      		pop r17
 562 0270 0F91      		pop r16
 563 0272 FF90      		pop r15
 564 0274 EF90      		pop r14
 565 0276 DF90      		pop r13
 566 0278 CF90      		pop r12
 567 027a 0895      		ret
 568               	.LVL29:
 569               	.L22:
 711:pff.c         **** 	if (LD_WORD(buf) != 0xAA55)				/* Check record signature */
 570               		.loc 1 711 10 view .LVU96
 571 027c 83E0      		ldi r24,lo8(3)
 572 027e 00C0      		rjmp .L18
 573               	.L23:
 713:pff.c         **** 
 574               		.loc 1 713 10 view .LVU97
 575 0280 82E0      		ldi r24,lo8(2)
 576 0282 00C0      		rjmp .L18
 577               	.LVL30:
 578               	.L24:
 579               	.LBB7:
 580               	.LBB6:
 719:pff.c         **** }
 581               		.loc 1 719 9 view .LVU98
 582 0284 81E0      		ldi r24,lo8(1)
 583               	.LVL31:
 719:pff.c         **** }
 584               		.loc 1 719 9 view .LVU99
 585 0286 00C0      		rjmp .L18
 586               	.LBE6:
 587               	.LBE7:
 588               		.cfi_endproc
 589               	.LFE9:
 591               	.global	pf_mount
 593               	pf_mount:
 594               	.LVL32:
 595               	.LFB10:
 721:pff.c         **** 
 722:pff.c         **** 
 723:pff.c         **** 
 724:pff.c         **** 
 725:pff.c         **** /*--------------------------------------------------------------------------
 726:pff.c         **** 
 727:pff.c         ****    Public Functions
 728:pff.c         **** 
 729:pff.c         **** --------------------------------------------------------------------------*/
 730:pff.c         **** 
 731:pff.c         **** 
 732:pff.c         **** 
 733:pff.c         **** /*-----------------------------------------------------------------------*/
 734:pff.c         **** /* Mount/Unmount a Locical Drive                                         */
 735:pff.c         **** /*-----------------------------------------------------------------------*/
 736:pff.c         **** 
 737:pff.c         **** FRESULT pf_mount (
 738:pff.c         **** 	FATFS *fs		/* Pointer to new file system object (NULL: Unmount) */
 739:pff.c         **** )
 740:pff.c         **** {
 596               		.loc 1 740 1 is_stmt 1 view -0
 597               		.cfi_startproc
 598               		.loc 1 740 1 is_stmt 0 view .LVU101
 599 0288 4F92      		push r4
 600               	.LCFI22:
 601               		.cfi_def_cfa_offset 4
 602               		.cfi_offset 4, -3
 603 028a 5F92      		push r5
 604               	.LCFI23:
 605               		.cfi_def_cfa_offset 5
 606               		.cfi_offset 5, -4
 607 028c 6F92      		push r6
 608               	.LCFI24:
 609               		.cfi_def_cfa_offset 6
 610               		.cfi_offset 6, -5
 611 028e 7F92      		push r7
 612               	.LCFI25:
 613               		.cfi_def_cfa_offset 7
 614               		.cfi_offset 7, -6
 615 0290 8F92      		push r8
 616               	.LCFI26:
 617               		.cfi_def_cfa_offset 8
 618               		.cfi_offset 8, -7
 619 0292 9F92      		push r9
 620               	.LCFI27:
 621               		.cfi_def_cfa_offset 9
 622               		.cfi_offset 9, -8
 623 0294 AF92      		push r10
 624               	.LCFI28:
 625               		.cfi_def_cfa_offset 10
 626               		.cfi_offset 10, -9
 627 0296 BF92      		push r11
 628               	.LCFI29:
 629               		.cfi_def_cfa_offset 11
 630               		.cfi_offset 11, -10
 631 0298 EF92      		push r14
 632               	.LCFI30:
 633               		.cfi_def_cfa_offset 12
 634               		.cfi_offset 14, -11
 635 029a FF92      		push r15
 636               	.LCFI31:
 637               		.cfi_def_cfa_offset 13
 638               		.cfi_offset 15, -12
 639 029c 0F93      		push r16
 640               	.LCFI32:
 641               		.cfi_def_cfa_offset 14
 642               		.cfi_offset 16, -13
 643 029e 1F93      		push r17
 644               	.LCFI33:
 645               		.cfi_def_cfa_offset 15
 646               		.cfi_offset 17, -14
 647 02a0 CF93      		push r28
 648               	.LCFI34:
 649               		.cfi_def_cfa_offset 16
 650               		.cfi_offset 28, -15
 651 02a2 DF93      		push r29
 652               	.LCFI35:
 653               		.cfi_def_cfa_offset 17
 654               		.cfi_offset 29, -16
 655 02a4 CDB7      		in r28,__SP_L__
 656 02a6 DEB7      		in r29,__SP_H__
 657               	.LCFI36:
 658               		.cfi_def_cfa_register 28
 659 02a8 AC97      		sbiw r28,44
 660               	.LCFI37:
 661               		.cfi_def_cfa_offset 61
 662 02aa 0FB6      		in __tmp_reg__,__SREG__
 663 02ac F894      		cli
 664 02ae DEBF      		out __SP_H__,r29
 665 02b0 0FBE      		out __SREG__,__tmp_reg__
 666 02b2 CDBF      		out __SP_L__,r28
 667               	/* prologue: function */
 668               	/* frame size = 44 */
 669               	/* stack size = 58 */
 670               	.L__stack_usage = 58
 671 02b4 7C01      		movw r14,r24
 741:pff.c         **** 	BYTE fmt, buf[36];
 672               		.loc 1 741 2 is_stmt 1 view .LVU102
 742:pff.c         **** 	DWORD bsect, fsize, tsect, mclst;
 673               		.loc 1 742 2 view .LVU103
 743:pff.c         **** 
 744:pff.c         **** 
 745:pff.c         **** 	FatFs = 0;
 674               		.loc 1 745 2 view .LVU104
 675               		.loc 1 745 8 is_stmt 0 view .LVU105
 676 02b6 1092 0000 		sts FatFs+1,__zero_reg__
 677 02ba 1092 0000 		sts FatFs,__zero_reg__
 746:pff.c         **** 	if (!fs) return FR_OK;				/* Unregister fs object */
 678               		.loc 1 746 2 is_stmt 1 view .LVU106
 679               		.loc 1 746 18 is_stmt 0 view .LVU107
 680 02be 10E0      		ldi r17,0
 681               		.loc 1 746 5 view .LVU108
 682 02c0 892B      		or r24,r25
 683 02c2 01F0      		breq .L28
 747:pff.c         **** 
 748:pff.c         **** 	if (disk_initialize() & STA_NOINIT)	/* Check if the drive is ready or not */
 684               		.loc 1 748 2 is_stmt 1 view .LVU109
 685               		.loc 1 748 6 is_stmt 0 view .LVU110
 686 02c4 0E94 0000 		call disk_initialize
 687               	.LVL33:
 749:pff.c         **** 		return FR_NOT_READY;
 688               		.loc 1 749 10 view .LVU111
 689 02c8 12E0      		ldi r17,lo8(2)
 748:pff.c         **** 		return FR_NOT_READY;
 690               		.loc 1 748 5 view .LVU112
 691 02ca 80FD      		sbrc r24,0
 692 02cc 00C0      		rjmp .L28
 750:pff.c         **** 
 751:pff.c         **** 	/* Search FAT partition on the drive */
 752:pff.c         **** 	bsect = 0;
 693               		.loc 1 752 2 is_stmt 1 view .LVU113
 694               	.LVL34:
 753:pff.c         **** 	fmt = check_fs(buf, bsect);			/* Check sector 0 as an SFD format */
 695               		.loc 1 753 2 view .LVU114
 696               		.loc 1 753 8 is_stmt 0 view .LVU115
 697 02ce 40E0      		ldi r20,0
 698 02d0 50E0      		ldi r21,0
 699 02d2 BA01      		movw r22,r20
 700 02d4 CE01      		movw r24,r28
 701 02d6 0196      		adiw r24,1
 702 02d8 3C01      		movw r6,r24
 703 02da 0E94 0000 		call check_fs
 704               	.LVL35:
 754:pff.c         **** 	if (fmt == 1) {						/* Not an FAT boot record, it may be FDISK format */
 705               		.loc 1 754 2 is_stmt 1 view .LVU116
 706 02de 2301      		movw r4,r6
 752:pff.c         **** 	fmt = check_fs(buf, bsect);			/* Check sector 0 as an SFD format */
 707               		.loc 1 752 8 is_stmt 0 view .LVU117
 708 02e0 812C      		mov r8,__zero_reg__
 709 02e2 912C      		mov r9,__zero_reg__
 710 02e4 5401      		movw r10,r8
 711               		.loc 1 754 5 view .LVU118
 712 02e6 8130      		cpi r24,lo8(1)
 713 02e8 01F4      		brne .L30
 755:pff.c         **** 		/* Check a partition listed in top of the partition table */
 756:pff.c         **** 		if (disk_readp(buf, bsect, MBR_Table, 16)) {	/* 1st partition entry */
 714               		.loc 1 756 3 is_stmt 1 view .LVU119
 715               		.loc 1 756 7 is_stmt 0 view .LVU120
 716 02ea 00E1      		ldi r16,lo8(16)
 717 02ec 10E0      		ldi r17,0
 718 02ee 2EEB      		ldi r18,lo8(-66)
 719 02f0 31E0      		ldi r19,lo8(1)
 720 02f2 40E0      		ldi r20,0
 721 02f4 50E0      		ldi r21,0
 722 02f6 BA01      		movw r22,r20
 723 02f8 C301      		movw r24,r6
 724               	.LVL36:
 725               		.loc 1 756 7 view .LVU121
 726 02fa 0E94 0000 		call disk_readp
 727               	.LVL37:
 728               		.loc 1 756 6 view .LVU122
 729 02fe 8823      		tst r24
 730 0300 01F0      		breq .L31
 731               	.LVL38:
 732               	.L33:
 757:pff.c         **** 			fmt = 3;
 758:pff.c         **** 		} else {
 759:pff.c         **** 			if (buf[4]) {					/* Is the partition existing? */
 760:pff.c         **** 				bsect = LD_DWORD(&buf[8]);	/* Partition offset in LBA */
 761:pff.c         **** 				fmt = check_fs(buf, bsect);	/* Check the partition */
 762:pff.c         **** 			}
 763:pff.c         **** 		}
 764:pff.c         **** 	}
 765:pff.c         **** 	if (fmt == 3) return FR_DISK_ERR;
 733               		.loc 1 765 23 view .LVU123
 734 0302 11E0      		ldi r17,lo8(1)
 735               	.L28:
 766:pff.c         **** 	if (fmt) return FR_NO_FILESYSTEM;	/* No valid FAT patition is found */
 767:pff.c         **** 
 768:pff.c         **** 	/* Initialize the file system object */
 769:pff.c         **** 	if (disk_readp(buf, bsect, 13, sizeof(buf))) return FR_DISK_ERR;
 770:pff.c         **** 
 771:pff.c         **** 	fsize = LD_WORD(buf+BPB_FATSz16-13);				/* Number of sectors per FAT */
 772:pff.c         **** 	if (!fsize) fsize = LD_DWORD(buf+BPB_FATSz32-13);
 773:pff.c         **** 
 774:pff.c         **** 	fsize *= buf[BPB_NumFATs-13];						/* Number of sectors in FAT area */
 775:pff.c         **** 	fs->fatbase = bsect + LD_WORD(buf+BPB_RsvdSecCnt-13); /* FAT start sector (lba) */
 776:pff.c         **** 	fs->csize = buf[BPB_SecPerClus-13];					/* Number of sectors per cluster */
 777:pff.c         **** 	fs->n_rootdir = LD_WORD(buf+BPB_RootEntCnt-13);		/* Nmuber of root directory entries */
 778:pff.c         **** 	tsect = LD_WORD(buf+BPB_TotSec16-13);				/* Number of sectors on the file system */
 779:pff.c         **** 	if (!tsect) tsect = LD_DWORD(buf+BPB_TotSec32-13);
 780:pff.c         **** 	mclst = (tsect						/* Last cluster# + 1 */
 781:pff.c         **** 		- LD_WORD(buf+BPB_RsvdSecCnt-13) - fsize - fs->n_rootdir / 16
 782:pff.c         **** 		) / fs->csize + 2;
 783:pff.c         **** 	fs->n_fatent = (CLUST)mclst;
 784:pff.c         **** 
 785:pff.c         **** 	fmt = FS_FAT16;							/* Determine the FAT sub type */
 786:pff.c         **** 	if (mclst < 0xFF7) 						/* Number of clusters < 0xFF5 */
 787:pff.c         **** #if _FS_FAT12
 788:pff.c         **** 		fmt = FS_FAT12;
 789:pff.c         **** #else
 790:pff.c         **** 		return FR_NO_FILESYSTEM;
 791:pff.c         **** #endif
 792:pff.c         **** 	if (mclst >= 0xFFF7)					/* Number of clusters >= 0xFFF5 */
 793:pff.c         **** #if _FS_FAT32
 794:pff.c         **** 		fmt = FS_FAT32;
 795:pff.c         **** #else
 796:pff.c         **** 		return FR_NO_FILESYSTEM;
 797:pff.c         **** #endif
 798:pff.c         **** 
 799:pff.c         **** 	fs->fs_type = fmt;		/* FAT sub-type */
 800:pff.c         **** 	if (_FS_FAT32 && fmt == FS_FAT32)
 801:pff.c         **** 		fs->dirbase = LD_DWORD(buf+(BPB_RootClus-13));	/* Root directory start cluster */
 802:pff.c         **** 	else
 803:pff.c         **** 		fs->dirbase = fs->fatbase + fsize;				/* Root directory start sector (lba) */
 804:pff.c         **** 	fs->database = fs->fatbase + fsize + fs->n_rootdir / 16;	/* Data start sector (lba) */
 805:pff.c         **** 
 806:pff.c         **** 	fs->flag = 0;
 807:pff.c         **** 	FatFs = fs;
 808:pff.c         **** 
 809:pff.c         **** 	return FR_OK;
 810:pff.c         **** }
 736               		.loc 1 810 1 view .LVU124
 737 0304 812F      		mov r24,r17
 738               	/* epilogue start */
 739 0306 AC96      		adiw r28,44
 740 0308 0FB6      		in __tmp_reg__,__SREG__
 741 030a F894      		cli
 742 030c DEBF      		out __SP_H__,r29
 743 030e 0FBE      		out __SREG__,__tmp_reg__
 744 0310 CDBF      		out __SP_L__,r28
 745 0312 DF91      		pop r29
 746 0314 CF91      		pop r28
 747 0316 1F91      		pop r17
 748 0318 0F91      		pop r16
 749 031a FF90      		pop r15
 750 031c EF90      		pop r14
 751               	.LVL39:
 752               		.loc 1 810 1 view .LVU125
 753 031e BF90      		pop r11
 754 0320 AF90      		pop r10
 755 0322 9F90      		pop r9
 756 0324 8F90      		pop r8
 757 0326 7F90      		pop r7
 758 0328 6F90      		pop r6
 759 032a 5F90      		pop r5
 760 032c 4F90      		pop r4
 761 032e 0895      		ret
 762               	.LVL40:
 763               	.L31:
 759:pff.c         **** 				bsect = LD_DWORD(&buf[8]);	/* Partition offset in LBA */
 764               		.loc 1 759 4 is_stmt 1 view .LVU126
 759:pff.c         **** 				bsect = LD_DWORD(&buf[8]);	/* Partition offset in LBA */
 765               		.loc 1 759 7 is_stmt 0 view .LVU127
 766 0330 8D81      		ldd r24,Y+5
 767 0332 8111      		cpse r24,__zero_reg__
 768 0334 00C0      		rjmp .L32
 769               	.LVL41:
 770               	.L34:
 766:pff.c         **** 	if (fmt) return FR_NO_FILESYSTEM;	/* No valid FAT patition is found */
 771               		.loc 1 766 18 view .LVU128
 772 0336 17E0      		ldi r17,lo8(7)
 773 0338 00C0      		rjmp .L28
 774               	.LVL42:
 775               	.L32:
 760:pff.c         **** 				fmt = check_fs(buf, bsect);	/* Check the partition */
 776               		.loc 1 760 5 is_stmt 1 view .LVU129
 760:pff.c         **** 				fmt = check_fs(buf, bsect);	/* Check the partition */
 777               		.loc 1 760 11 is_stmt 0 view .LVU130
 778 033a 8984      		ldd r8,Y+9
 779 033c 9A84      		ldd r9,Y+10
 780 033e AB84      		ldd r10,Y+11
 781 0340 BC84      		ldd r11,Y+12
 782               	.LVL43:
 761:pff.c         **** 			}
 783               		.loc 1 761 5 is_stmt 1 view .LVU131
 761:pff.c         **** 			}
 784               		.loc 1 761 11 is_stmt 0 view .LVU132
 785 0342 B501      		movw r22,r10
 786 0344 A401      		movw r20,r8
 787 0346 C301      		movw r24,r6
 788 0348 0E94 0000 		call check_fs
 789               	.LVL44:
 790               	.L30:
 765:pff.c         **** 	if (fmt) return FR_NO_FILESYSTEM;	/* No valid FAT patition is found */
 791               		.loc 1 765 2 is_stmt 1 view .LVU133
 765:pff.c         **** 	if (fmt) return FR_NO_FILESYSTEM;	/* No valid FAT patition is found */
 792               		.loc 1 765 5 is_stmt 0 view .LVU134
 793 034c 8330      		cpi r24,lo8(3)
 794 034e 01F0      		breq .L33
 766:pff.c         **** 
 795               		.loc 1 766 2 is_stmt 1 view .LVU135
 766:pff.c         **** 
 796               		.loc 1 766 5 is_stmt 0 view .LVU136
 797 0350 8111      		cpse r24,__zero_reg__
 798 0352 00C0      		rjmp .L34
 769:pff.c         **** 
 799               		.loc 1 769 2 is_stmt 1 view .LVU137
 769:pff.c         **** 
 800               		.loc 1 769 6 is_stmt 0 view .LVU138
 801 0354 04E2      		ldi r16,lo8(36)
 802 0356 10E0      		ldi r17,0
 803 0358 2DE0      		ldi r18,lo8(13)
 804 035a 30E0      		ldi r19,0
 805 035c B501      		movw r22,r10
 806 035e A401      		movw r20,r8
 807 0360 C201      		movw r24,r4
 808               	.LVL45:
 769:pff.c         **** 
 809               		.loc 1 769 6 view .LVU139
 810 0362 0E94 0000 		call disk_readp
 811               	.LVL46:
 812 0366 182F      		mov r17,r24
 769:pff.c         **** 
 813               		.loc 1 769 5 view .LVU140
 814 0368 8111      		cpse r24,__zero_reg__
 815 036a 00C0      		rjmp .L33
 771:pff.c         **** 	if (!fsize) fsize = LD_DWORD(buf+BPB_FATSz32-13);
 816               		.loc 1 771 2 is_stmt 1 view .LVU141
 771:pff.c         **** 	if (!fsize) fsize = LD_DWORD(buf+BPB_FATSz32-13);
 817               		.loc 1 771 8 is_stmt 0 view .LVU142
 818 036c 8A85      		ldd r24,Y+10
 819 036e 9B85      		ldd r25,Y+11
 820 0370 9C01      		movw r18,r24
 821 0372 50E0      		ldi r21,0
 822 0374 40E0      		ldi r20,0
 823               	.LVL47:
 772:pff.c         **** 
 824               		.loc 1 772 2 is_stmt 1 view .LVU143
 772:pff.c         **** 
 825               		.loc 1 772 5 is_stmt 0 view .LVU144
 826 0376 892B      		or r24,r25
 827 0378 01F4      		brne .L35
 772:pff.c         **** 
 828               		.loc 1 772 14 is_stmt 1 discriminator 1 view .LVU145
 772:pff.c         **** 
 829               		.loc 1 772 20 is_stmt 0 discriminator 1 view .LVU146
 830 037a 288D      		ldd r18,Y+24
 831 037c 398D      		ldd r19,Y+25
 832 037e 4A8D      		ldd r20,Y+26
 833 0380 5B8D      		ldd r21,Y+27
 834               	.LVL48:
 835               	.L35:
 774:pff.c         **** 	fs->fatbase = bsect + LD_WORD(buf+BPB_RsvdSecCnt-13); /* FAT start sector (lba) */
 836               		.loc 1 774 2 is_stmt 1 view .LVU147
 774:pff.c         **** 	fs->fatbase = bsect + LD_WORD(buf+BPB_RsvdSecCnt-13); /* FAT start sector (lba) */
 837               		.loc 1 774 14 is_stmt 0 view .LVU148
 838 0382 AC81      		ldd r26,Y+4
 774:pff.c         **** 	fs->fatbase = bsect + LD_WORD(buf+BPB_RsvdSecCnt-13); /* FAT start sector (lba) */
 839               		.loc 1 774 8 view .LVU149
 840 0384 B0E0      		ldi r27,0
 841 0386 0E94 0000 		call __muluhisi3
 842 038a 69A7      		std Y+41,r22
 843 038c 7AA7      		std Y+42,r23
 844 038e 8BA7      		std Y+43,r24
 845 0390 9CA7      		std Y+44,r25
 846               	.LVL49:
 775:pff.c         **** 	fs->csize = buf[BPB_SecPerClus-13];					/* Number of sectors per cluster */
 847               		.loc 1 775 2 is_stmt 1 view .LVU150
 775:pff.c         **** 	fs->csize = buf[BPB_SecPerClus-13];					/* Number of sectors per cluster */
 848               		.loc 1 775 24 is_stmt 0 view .LVU151
 849 0392 4A81      		ldd r20,Y+2
 850 0394 5B81      		ldd r21,Y+3
 851 0396 70E0      		ldi r23,0
 852 0398 60E0      		ldi r22,0
 853               	.LVL50:
 775:pff.c         **** 	fs->csize = buf[BPB_SecPerClus-13];					/* Number of sectors per cluster */
 854               		.loc 1 775 22 view .LVU152
 855 039a 840E      		add r8,r20
 856 039c 951E      		adc r9,r21
 857 039e A61E      		adc r10,r22
 858 03a0 B71E      		adc r11,r23
 859               	.LVL51:
 775:pff.c         **** 	fs->csize = buf[BPB_SecPerClus-13];					/* Number of sectors per cluster */
 860               		.loc 1 775 14 view .LVU153
 861 03a2 D701      		movw r26,r14
 862 03a4 1A96      		adiw r26,10
 863 03a6 8D92      		st X+,r8
 864 03a8 9D92      		st X+,r9
 865 03aa AD92      		st X+,r10
 866 03ac BC92      		st X,r11
 867 03ae 1D97      		sbiw r26,10+3
 776:pff.c         **** 	fs->n_rootdir = LD_WORD(buf+BPB_RootEntCnt-13);		/* Nmuber of root directory entries */
 868               		.loc 1 776 2 is_stmt 1 view .LVU154
 776:pff.c         **** 	fs->n_rootdir = LD_WORD(buf+BPB_RootEntCnt-13);		/* Nmuber of root directory entries */
 869               		.loc 1 776 17 is_stmt 0 view .LVU155
 870 03b0 E981      		ldd r30,Y+1
 776:pff.c         **** 	fs->n_rootdir = LD_WORD(buf+BPB_RootEntCnt-13);		/* Nmuber of root directory entries */
 871               		.loc 1 776 12 view .LVU156
 872 03b2 1296      		adiw r26,2
 873 03b4 EC93      		st X,r30
 874 03b6 1297      		sbiw r26,2
 777:pff.c         **** 	tsect = LD_WORD(buf+BPB_TotSec16-13);				/* Number of sectors on the file system */
 875               		.loc 1 777 2 is_stmt 1 view .LVU157
 777:pff.c         **** 	tsect = LD_WORD(buf+BPB_TotSec16-13);				/* Number of sectors on the file system */
 876               		.loc 1 777 18 is_stmt 0 view .LVU158
 877 03b8 8D81      		ldd r24,Y+5
 878 03ba 9E81      		ldd r25,Y+6
 777:pff.c         **** 	tsect = LD_WORD(buf+BPB_TotSec16-13);				/* Number of sectors on the file system */
 879               		.loc 1 777 16 view .LVU159
 880 03bc 1596      		adiw r26,4+1
 881 03be 9C93      		st X,r25
 882 03c0 8E93      		st -X,r24
 883 03c2 1497      		sbiw r26,4
 778:pff.c         **** 	if (!tsect) tsect = LD_DWORD(buf+BPB_TotSec32-13);
 884               		.loc 1 778 2 is_stmt 1 view .LVU160
 778:pff.c         **** 	if (!tsect) tsect = LD_DWORD(buf+BPB_TotSec32-13);
 885               		.loc 1 778 8 is_stmt 0 view .LVU161
 886 03c4 2F81      		ldd r18,Y+7
 887 03c6 3885      		ldd r19,Y+8
 888 03c8 2901      		movw r4,r18
 889 03ca 712C      		mov r7,__zero_reg__
 890 03cc 612C      		mov r6,__zero_reg__
 891 03ce 4DA2      		std Y+37,r4
 892 03d0 5EA2      		std Y+38,r5
 893 03d2 6FA2      		std Y+39,r6
 894 03d4 78A6      		std Y+40,r7
 895               	.LVL52:
 779:pff.c         **** 	mclst = (tsect						/* Last cluster# + 1 */
 896               		.loc 1 779 2 is_stmt 1 view .LVU162
 779:pff.c         **** 	mclst = (tsect						/* Last cluster# + 1 */
 897               		.loc 1 779 5 is_stmt 0 view .LVU163
 898 03d6 232B      		or r18,r19
 899 03d8 01F4      		brne .L36
 779:pff.c         **** 	mclst = (tsect						/* Last cluster# + 1 */
 900               		.loc 1 779 14 is_stmt 1 discriminator 1 view .LVU164
 779:pff.c         **** 	mclst = (tsect						/* Last cluster# + 1 */
 901               		.loc 1 779 20 is_stmt 0 discriminator 1 view .LVU165
 902 03da 4C88      		ldd r4,Y+20
 903 03dc 5D88      		ldd r5,Y+21
 904 03de 6E88      		ldd r6,Y+22
 905 03e0 7F88      		ldd r7,Y+23
 906               	.LVL53:
 779:pff.c         **** 	mclst = (tsect						/* Last cluster# + 1 */
 907               		.loc 1 779 20 discriminator 1 view .LVU166
 908 03e2 4DA2      		std Y+37,r4
 909 03e4 5EA2      		std Y+38,r5
 910 03e6 6FA2      		std Y+39,r6
 911 03e8 78A6      		std Y+40,r7
 912               	.LVL54:
 913               	.L36:
 780:pff.c         **** 		- LD_WORD(buf+BPB_RsvdSecCnt-13) - fsize - fs->n_rootdir / 16
 914               		.loc 1 780 2 is_stmt 1 view .LVU167
 781:pff.c         **** 		) / fs->csize + 2;
 915               		.loc 1 781 60 is_stmt 0 view .LVU168
 916 03ea 24E0      		ldi r18,4
 917               		1:
 918 03ec 9695      		lsr r25
 919 03ee 8795      		ror r24
 920 03f0 2A95      		dec r18
 921 03f2 01F4      		brne 1b
 922 03f4 2C01      		movw r4,r24
 923 03f6 712C      		mov r7,__zero_reg__
 924 03f8 612C      		mov r6,__zero_reg__
 781:pff.c         **** 		) / fs->csize + 2;
 925               		.loc 1 781 44 view .LVU169
 926 03fa 440D      		add r20,r4
 927 03fc 551D      		adc r21,r5
 928 03fe 661D      		adc r22,r6
 929 0400 771D      		adc r23,r7
 930 0402 89A5      		ldd r24,Y+41
 931 0404 9AA5      		ldd r25,Y+42
 932 0406 ABA5      		ldd r26,Y+43
 933 0408 BCA5      		ldd r27,Y+44
 934 040a 480F      		add r20,r24
 935 040c 591F      		adc r21,r25
 936 040e 6A1F      		adc r22,r26
 937 0410 7B1F      		adc r23,r27
 938 0412 8DA1      		ldd r24,Y+37
 939 0414 9EA1      		ldd r25,Y+38
 940 0416 AFA1      		ldd r26,Y+39
 941 0418 B8A5      		ldd r27,Y+40
 942 041a 841B      		sub r24,r20
 943 041c 950B      		sbc r25,r21
 944 041e A60B      		sbc r26,r22
 945 0420 B70B      		sbc r27,r23
 782:pff.c         **** 	fs->n_fatent = (CLUST)mclst;
 946               		.loc 1 782 9 view .LVU170
 947 0422 2E2F      		mov r18,r30
 948 0424 30E0      		ldi r19,0
 949 0426 50E0      		ldi r21,0
 950 0428 40E0      		ldi r20,0
 782:pff.c         **** 	fs->n_fatent = (CLUST)mclst;
 951               		.loc 1 782 5 view .LVU171
 952 042a BC01      		movw r22,r24
 953 042c CD01      		movw r24,r26
 954 042e 0E94 0000 		call __udivmodsi4
 780:pff.c         **** 		- LD_WORD(buf+BPB_RsvdSecCnt-13) - fsize - fs->n_rootdir / 16
 955               		.loc 1 780 8 view .LVU172
 956 0432 DA01      		movw r26,r20
 957 0434 C901      		movw r24,r18
 958 0436 0296      		adiw r24,2
 959 0438 A11D      		adc r26,__zero_reg__
 960 043a B11D      		adc r27,__zero_reg__
 961               	.LVL55:
 783:pff.c         **** 
 962               		.loc 1 783 2 is_stmt 1 view .LVU173
 783:pff.c         **** 
 963               		.loc 1 783 15 is_stmt 0 view .LVU174
 964 043c F701      		movw r30,r14
 965 043e 8683      		std Z+6,r24
 966 0440 9783      		std Z+7,r25
 967 0442 A087      		std Z+8,r26
 968 0444 B187      		std Z+9,r27
 785:pff.c         **** 	if (mclst < 0xFF7) 						/* Number of clusters < 0xFF5 */
 969               		.loc 1 785 2 is_stmt 1 view .LVU175
 970               	.LVL56:
 786:pff.c         **** #if _FS_FAT12
 971               		.loc 1 786 2 view .LVU176
 786:pff.c         **** #if _FS_FAT12
 972               		.loc 1 786 5 is_stmt 0 view .LVU177
 973 0446 873F      		cpi r24,-9
 974 0448 FFE0      		ldi r31,15
 975 044a 9F07      		cpc r25,r31
 976 044c A105      		cpc r26,__zero_reg__
 977 044e B105      		cpc r27,__zero_reg__
 978 0450 00F4      		brsh .+2
 979 0452 00C0      		rjmp .L34
 792:pff.c         **** #if _FS_FAT32
 980               		.loc 1 792 2 is_stmt 1 view .LVU178
 792:pff.c         **** #if _FS_FAT32
 981               		.loc 1 792 5 is_stmt 0 view .LVU179
 982 0454 873F      		cpi r24,-9
 983 0456 9F4F      		sbci r25,-1
 984 0458 A105      		cpc r26,__zero_reg__
 985 045a B105      		cpc r27,__zero_reg__
 986 045c 00F0      		brlo .L37
 794:pff.c         **** #else
 987               		.loc 1 794 3 is_stmt 1 view .LVU180
 988               	.LVL57:
 799:pff.c         **** 	if (_FS_FAT32 && fmt == FS_FAT32)
 989               		.loc 1 799 2 view .LVU181
 799:pff.c         **** 	if (_FS_FAT32 && fmt == FS_FAT32)
 990               		.loc 1 799 14 is_stmt 0 view .LVU182
 991 045e 83E0      		ldi r24,lo8(3)
 992               	.LVL58:
 799:pff.c         **** 	if (_FS_FAT32 && fmt == FS_FAT32)
 993               		.loc 1 799 14 view .LVU183
 994 0460 D701      		movw r26,r14
 995 0462 8C93      		st X,r24
 800:pff.c         **** 		fs->dirbase = LD_DWORD(buf+(BPB_RootClus-13));	/* Root directory start cluster */
 996               		.loc 1 800 2 is_stmt 1 view .LVU184
 801:pff.c         **** 	else
 997               		.loc 1 801 3 view .LVU185
 801:pff.c         **** 	else
 998               		.loc 1 801 15 is_stmt 0 view .LVU186
 999 0464 88A1      		ldd r24,Y+32
 1000 0466 99A1      		ldd r25,Y+33
 1001 0468 AAA1      		ldd r26,Y+34
 1002 046a BBA1      		ldd r27,Y+35
 1003               	.LVL59:
 1004               	.L45:
 803:pff.c         **** 	fs->database = fs->fatbase + fsize + fs->n_rootdir / 16;	/* Data start sector (lba) */
 1005               		.loc 1 803 15 view .LVU187
 1006 046c F701      		movw r30,r14
 1007 046e 8687      		std Z+14,r24
 1008 0470 9787      		std Z+15,r25
 1009 0472 A08B      		std Z+16,r26
 1010 0474 B18B      		std Z+17,r27
 804:pff.c         **** 
 1011               		.loc 1 804 2 is_stmt 1 view .LVU188
 804:pff.c         **** 
 1012               		.loc 1 804 37 is_stmt 0 view .LVU189
 1013 0476 840C      		add r8,r4
 1014 0478 951C      		adc r9,r5
 1015 047a A61C      		adc r10,r6
 1016 047c B71C      		adc r11,r7
 1017 047e 49A4      		ldd r4,Y+41
 1018 0480 5AA4      		ldd r5,Y+42
 1019 0482 6BA4      		ldd r6,Y+43
 1020 0484 7CA4      		ldd r7,Y+44
 1021 0486 840C      		add r8,r4
 1022 0488 951C      		adc r9,r5
 1023 048a A61C      		adc r10,r6
 1024 048c B71C      		adc r11,r7
 804:pff.c         **** 
 1025               		.loc 1 804 15 view .LVU190
 1026 048e 828A      		std Z+18,r8
 1027 0490 938A      		std Z+19,r9
 1028 0492 A48A      		std Z+20,r10
 1029 0494 B58A      		std Z+21,r11
 806:pff.c         **** 	FatFs = fs;
 1030               		.loc 1 806 2 is_stmt 1 view .LVU191
 806:pff.c         **** 	FatFs = fs;
 1031               		.loc 1 806 11 is_stmt 0 view .LVU192
 1032 0496 1182      		std Z+1,__zero_reg__
 807:pff.c         **** 
 1033               		.loc 1 807 2 is_stmt 1 view .LVU193
 807:pff.c         **** 
 1034               		.loc 1 807 8 is_stmt 0 view .LVU194
 1035 0498 F092 0000 		sts FatFs+1,r15
 1036 049c E092 0000 		sts FatFs,r14
 809:pff.c         **** }
 1037               		.loc 1 809 2 is_stmt 1 view .LVU195
 809:pff.c         **** }
 1038               		.loc 1 809 9 is_stmt 0 view .LVU196
 1039 04a0 00C0      		rjmp .L28
 1040               	.LVL60:
 1041               	.L37:
 799:pff.c         **** 	if (_FS_FAT32 && fmt == FS_FAT32)
 1042               		.loc 1 799 2 is_stmt 1 view .LVU197
 799:pff.c         **** 	if (_FS_FAT32 && fmt == FS_FAT32)
 1043               		.loc 1 799 14 is_stmt 0 view .LVU198
 1044 04a2 82E0      		ldi r24,lo8(2)
 1045               	.LVL61:
 799:pff.c         **** 	if (_FS_FAT32 && fmt == FS_FAT32)
 1046               		.loc 1 799 14 view .LVU199
 1047 04a4 D701      		movw r26,r14
 1048 04a6 8C93      		st X,r24
 800:pff.c         **** 		fs->dirbase = LD_DWORD(buf+(BPB_RootClus-13));	/* Root directory start cluster */
 1049               		.loc 1 800 2 is_stmt 1 view .LVU200
 803:pff.c         **** 	fs->database = fs->fatbase + fsize + fs->n_rootdir / 16;	/* Data start sector (lba) */
 1050               		.loc 1 803 3 view .LVU201
 803:pff.c         **** 	fs->database = fs->fatbase + fsize + fs->n_rootdir / 16;	/* Data start sector (lba) */
 1051               		.loc 1 803 29 is_stmt 0 view .LVU202
 1052 04a8 89A5      		ldd r24,Y+41
 1053 04aa 9AA5      		ldd r25,Y+42
 1054 04ac ABA5      		ldd r26,Y+43
 1055 04ae BCA5      		ldd r27,Y+44
 1056 04b0 880D      		add r24,r8
 1057 04b2 991D      		adc r25,r9
 1058 04b4 AA1D      		adc r26,r10
 1059 04b6 BB1D      		adc r27,r11
 1060 04b8 00C0      		rjmp .L45
 1061               		.cfi_endproc
 1062               	.LFE10:
 1064               	.global	pf_open
 1066               	pf_open:
 1067               	.LVL62:
 1068               	.LFB11:
 811:pff.c         **** 
 812:pff.c         **** 
 813:pff.c         **** 
 814:pff.c         **** 
 815:pff.c         **** /*-----------------------------------------------------------------------*/
 816:pff.c         **** /* Open or Create a File                                                 */
 817:pff.c         **** /*-----------------------------------------------------------------------*/
 818:pff.c         **** 
 819:pff.c         **** FRESULT pf_open (
 820:pff.c         **** 	const char *path	/* Pointer to the file name */
 821:pff.c         **** )
 822:pff.c         **** {
 1069               		.loc 1 822 1 is_stmt 1 view -0
 1070               		.cfi_startproc
 1071               		.loc 1 822 1 is_stmt 0 view .LVU204
 1072 04ba 4F92      		push r4
 1073               	.LCFI38:
 1074               		.cfi_def_cfa_offset 4
 1075               		.cfi_offset 4, -3
 1076 04bc 5F92      		push r5
 1077               	.LCFI39:
 1078               		.cfi_def_cfa_offset 5
 1079               		.cfi_offset 5, -4
 1080 04be 6F92      		push r6
 1081               	.LCFI40:
 1082               		.cfi_def_cfa_offset 6
 1083               		.cfi_offset 6, -5
 1084 04c0 7F92      		push r7
 1085               	.LCFI41:
 1086               		.cfi_def_cfa_offset 7
 1087               		.cfi_offset 7, -6
 1088 04c2 8F92      		push r8
 1089               	.LCFI42:
 1090               		.cfi_def_cfa_offset 8
 1091               		.cfi_offset 8, -7
 1092 04c4 9F92      		push r9
 1093               	.LCFI43:
 1094               		.cfi_def_cfa_offset 9
 1095               		.cfi_offset 9, -8
 1096 04c6 AF92      		push r10
 1097               	.LCFI44:
 1098               		.cfi_def_cfa_offset 10
 1099               		.cfi_offset 10, -9
 1100 04c8 BF92      		push r11
 1101               	.LCFI45:
 1102               		.cfi_def_cfa_offset 11
 1103               		.cfi_offset 11, -10
 1104 04ca CF92      		push r12
 1105               	.LCFI46:
 1106               		.cfi_def_cfa_offset 12
 1107               		.cfi_offset 12, -11
 1108 04cc DF92      		push r13
 1109               	.LCFI47:
 1110               		.cfi_def_cfa_offset 13
 1111               		.cfi_offset 13, -12
 1112 04ce EF92      		push r14
 1113               	.LCFI48:
 1114               		.cfi_def_cfa_offset 14
 1115               		.cfi_offset 14, -13
 1116 04d0 FF92      		push r15
 1117               	.LCFI49:
 1118               		.cfi_def_cfa_offset 15
 1119               		.cfi_offset 15, -14
 1120 04d2 0F93      		push r16
 1121               	.LCFI50:
 1122               		.cfi_def_cfa_offset 16
 1123               		.cfi_offset 16, -15
 1124 04d4 1F93      		push r17
 1125               	.LCFI51:
 1126               		.cfi_def_cfa_offset 17
 1127               		.cfi_offset 17, -16
 1128 04d6 CF93      		push r28
 1129               	.LCFI52:
 1130               		.cfi_def_cfa_offset 18
 1131               		.cfi_offset 28, -17
 1132 04d8 DF93      		push r29
 1133               	.LCFI53:
 1134               		.cfi_def_cfa_offset 19
 1135               		.cfi_offset 29, -18
 1136 04da CDB7      		in r28,__SP_L__
 1137 04dc DEB7      		in r29,__SP_H__
 1138               	.LCFI54:
 1139               		.cfi_def_cfa_register 28
 1140 04de C054      		subi r28,64
 1141 04e0 D109      		sbc r29,__zero_reg__
 1142               	.LCFI55:
 1143               		.cfi_def_cfa_offset 83
 1144 04e2 0FB6      		in __tmp_reg__,__SREG__
 1145 04e4 F894      		cli
 1146 04e6 DEBF      		out __SP_H__,r29
 1147 04e8 0FBE      		out __SREG__,__tmp_reg__
 1148 04ea CDBF      		out __SP_L__,r28
 1149               	/* prologue: function */
 1150               	/* frame size = 64 */
 1151               	/* stack size = 80 */
 1152               	.L__stack_usage = 80
 823:pff.c         **** 	FRESULT res;
 1153               		.loc 1 823 2 is_stmt 1 view .LVU205
 824:pff.c         **** 	DIR dj;
 1154               		.loc 1 824 2 view .LVU206
 825:pff.c         **** 	BYTE sp[12], dir[32];
 1155               		.loc 1 825 2 view .LVU207
 826:pff.c         **** 	FATFS *fs = FatFs;
 1156               		.loc 1 826 2 view .LVU208
 1157               		.loc 1 826 9 is_stmt 0 view .LVU209
 1158 04ec C090 0000 		lds r12,FatFs
 1159 04f0 D090 0000 		lds r13,FatFs+1
 1160               	.LVL63:
 827:pff.c         **** 
 828:pff.c         **** 
 829:pff.c         **** 	if (!fs)						/* Check file system */
 1161               		.loc 1 829 2 is_stmt 1 view .LVU210
 1162               		.loc 1 829 5 is_stmt 0 view .LVU211
 1163 04f4 C114      		cp r12,__zero_reg__
 1164 04f6 D104      		cpc r13,__zero_reg__
 1165 04f8 01F4      		brne .+2
 1166 04fa 00C0      		rjmp .L72
 830:pff.c         **** 		return FR_NOT_ENABLED;
 831:pff.c         **** 
 832:pff.c         **** 	fs->flag = 0;
 1167               		.loc 1 832 2 is_stmt 1 view .LVU212
 1168               		.loc 1 832 11 is_stmt 0 view .LVU213
 1169 04fc D601      		movw r26,r12
 1170 04fe 1196      		adiw r26,1
 1171 0500 1C92      		st X,__zero_reg__
 833:pff.c         **** 	dj.fn = sp;
 1172               		.loc 1 833 2 is_stmt 1 view .LVU214
 1173               		.loc 1 833 8 is_stmt 0 view .LVU215
 1174 0502 9E01      		movw r18,r28
 1175 0504 2F5C      		subi r18,-49
 1176 0506 3F4F      		sbci r19,-1
 1177 0508 3CA3      		std Y+36,r19
 1178 050a 2BA3      		std Y+35,r18
 834:pff.c         **** 	res = follow_path(&dj, dir, path);	/* Follow the file path */
 1179               		.loc 1 834 2 is_stmt 1 view .LVU216
 1180               	.LVL64:
 1181               	.LBB20:
 1182               	.LBI20:
 659:pff.c         **** 	DIR *dj,			/* Directory object to return last directory and found object */
 1183               		.loc 1 659 9 view .LVU217
 1184               	.LBB21:
 665:pff.c         **** 
 1185               		.loc 1 665 2 view .LVU218
 668:pff.c         **** 	if (*path == '/') path++;			/* Strip heading separator */
 1186               		.loc 1 668 2 view .LVU219
 1187 050c 9C01      		movw r18,r24
 1188               	.LVL65:
 1189               	.L48:
 668:pff.c         **** 	if (*path == '/') path++;			/* Strip heading separator */
 1190               		.loc 1 668 2 is_stmt 0 view .LVU220
 1191 050e 7901      		movw r14,r18
 668:pff.c         **** 	if (*path == '/') path++;			/* Strip heading separator */
 1192               		.loc 1 668 8 is_stmt 1 view .LVU221
 668:pff.c         **** 	if (*path == '/') path++;			/* Strip heading separator */
 1193               		.loc 1 668 9 is_stmt 0 view .LVU222
 1194 0510 F901      		movw r30,r18
 1195 0512 8081      		ld r24,Z
 1196               	.LVL66:
 668:pff.c         **** 	if (*path == '/') path++;			/* Strip heading separator */
 1197               		.loc 1 668 9 view .LVU223
 1198 0514 2F5F      		subi r18,-1
 1199 0516 3F4F      		sbci r19,-1
 1200               	.LVL67:
 668:pff.c         **** 	if (*path == '/') path++;			/* Strip heading separator */
 1201               		.loc 1 668 8 view .LVU224
 1202 0518 8032      		cpi r24,lo8(32)
 1203 051a 01F0      		breq .L48
 669:pff.c         **** 	dj->sclust = 0;						/* Set start directory (always root dir) */
 1204               		.loc 1 669 2 is_stmt 1 view .LVU225
 669:pff.c         **** 	dj->sclust = 0;						/* Set start directory (always root dir) */
 1205               		.loc 1 669 5 is_stmt 0 view .LVU226
 1206 051c 8F32      		cpi r24,lo8(47)
 1207 051e 01F4      		brne .L49
 669:pff.c         **** 	dj->sclust = 0;						/* Set start directory (always root dir) */
 1208               		.loc 1 669 20 is_stmt 1 view .LVU227
 669:pff.c         **** 	dj->sclust = 0;						/* Set start directory (always root dir) */
 1209               		.loc 1 669 24 is_stmt 0 view .LVU228
 1210 0520 7901      		movw r14,r18
 1211               	.L49:
 1212               	.LVL68:
 670:pff.c         **** 
 1213               		.loc 1 670 2 is_stmt 1 view .LVU229
 670:pff.c         **** 
 1214               		.loc 1 670 13 is_stmt 0 view .LVU230
 1215 0522 1DA2      		std Y+37,__zero_reg__
 1216 0524 1EA2      		std Y+38,__zero_reg__
 1217 0526 1FA2      		std Y+39,__zero_reg__
 1218 0528 18A6      		std Y+40,__zero_reg__
 672:pff.c         **** 		res = dir_rewind(dj);
 1219               		.loc 1 672 2 is_stmt 1 view .LVU231
 672:pff.c         **** 		res = dir_rewind(dj);
 1220               		.loc 1 672 5 is_stmt 0 view .LVU232
 1221 052a D701      		movw r26,r14
 1222 052c 8C91      		ld r24,X
 1223               	.LBB22:
 1224               	.LBB23:
 507:pff.c         **** 			? FR_DISK_ERR : FR_OK;
 1225               		.loc 1 507 9 view .LVU233
 1226 052e FE01      		movw r30,r28
 1227 0530 3196      		adiw r30,1
 1228 0532 5F01      		movw r10,r30
 1229               	.LBE23:
 1230               	.LBE22:
 672:pff.c         **** 		res = dir_rewind(dj);
 1231               		.loc 1 672 5 view .LVU234
 1232 0534 8132      		cpi r24,lo8(33)
 1233 0536 00F0      		brlo .+2
 1234 0538 00C0      		rjmp .L50
 673:pff.c         **** 		dir[0] = 0;
 1235               		.loc 1 673 3 is_stmt 1 view .LVU235
 673:pff.c         **** 		dir[0] = 0;
 1236               		.loc 1 673 9 is_stmt 0 view .LVU236
 1237 053a CE01      		movw r24,r28
 1238 053c 8196      		adiw r24,33
 1239 053e 0E94 0000 		call dir_rewind
 1240               	.LVL69:
 674:pff.c         **** 
 1241               		.loc 1 674 3 is_stmt 1 view .LVU237
 694:pff.c         **** }
 1242               		.loc 1 694 2 view .LVU238
 694:pff.c         **** }
 1243               		.loc 1 694 2 is_stmt 0 view .LVU239
 1244               	.LBE21:
 1245               	.LBE20:
 835:pff.c         **** 	if (res != FR_OK) return res;		/* Follow failed */
 1246               		.loc 1 835 2 is_stmt 1 view .LVU240
 1247               		.loc 1 835 5 is_stmt 0 view .LVU241
 1248 0542 8111      		cpse r24,__zero_reg__
 1249 0544 00C0      		rjmp .L46
 1250               	.LVL70:
 1251               	.L71:
 836:pff.c         **** 	if (!dir[0] || (dir[DIR_Attr] & AM_DIR))	/* It is a directory */
 837:pff.c         **** 		return FR_NO_FILE;
 1252               		.loc 1 837 10 view .LVU242
 1253 0546 83E0      		ldi r24,lo8(3)
 1254               	.L46:
 1255               	/* epilogue start */
 838:pff.c         **** 
 839:pff.c         **** 	fs->org_clust = LD_CLUST(dir);			/* File start cluster */
 840:pff.c         **** 	fs->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
 841:pff.c         **** 	fs->fptr = 0;						/* File pointer */
 842:pff.c         **** 	fs->flag = FA_OPENED;
 843:pff.c         **** 
 844:pff.c         **** 	return FR_OK;
 845:pff.c         **** }
 1256               		.loc 1 845 1 view .LVU243
 1257 0548 C05C      		subi r28,-64
 1258 054a DF4F      		sbci r29,-1
 1259 054c 0FB6      		in __tmp_reg__,__SREG__
 1260 054e F894      		cli
 1261 0550 DEBF      		out __SP_H__,r29
 1262 0552 0FBE      		out __SREG__,__tmp_reg__
 1263 0554 CDBF      		out __SP_L__,r28
 1264 0556 DF91      		pop r29
 1265 0558 CF91      		pop r28
 1266 055a 1F91      		pop r17
 1267 055c 0F91      		pop r16
 1268 055e FF90      		pop r15
 1269 0560 EF90      		pop r14
 1270 0562 DF90      		pop r13
 1271 0564 CF90      		pop r12
 1272               	.LVL71:
 1273               		.loc 1 845 1 view .LVU244
 1274 0566 BF90      		pop r11
 1275 0568 AF90      		pop r10
 1276 056a 9F90      		pop r9
 1277 056c 8F90      		pop r8
 1278 056e 7F90      		pop r7
 1279 0570 6F90      		pop r6
 1280 0572 5F90      		pop r5
 1281 0574 4F90      		pop r4
 1282 0576 0895      		ret
 1283               	.LVL72:
 1284               	.L52:
 1285               	.LBB51:
 1286               	.LBB49:
 1287               	.LBB38:
 1288               	.LBB39:
 602:pff.c         **** 
 1289               		.loc 1 602 2 is_stmt 1 view .LVU245
 602:pff.c         **** 
 1290               		.loc 1 602 10 is_stmt 0 view .LVU246
 1291 0578 E40E      		add r14,r20
 1292 057a F11C      		adc r15,__zero_reg__
 1293               	.LVL73:
 604:pff.c         **** 
 1294               		.loc 1 604 2 is_stmt 1 view .LVU247
 604:pff.c         **** 
 1295               		.loc 1 604 27 is_stmt 0 view .LVU248
 1296 057c 91E0      		ldi r25,lo8(1)
 1297               	.LVL74:
 604:pff.c         **** 
 1298               		.loc 1 604 27 view .LVU249
 1299 057e 8132      		cpi r24,lo8(33)
 1300 0580 00F0      		brlo .L56
 604:pff.c         **** 
 1301               		.loc 1 604 27 view .LVU250
 1302 0582 90E0      		ldi r25,0
 1303               	.L56:
 604:pff.c         **** 
 1304               		.loc 1 604 10 view .LVU251
 1305 0584 D801      		movw r26,r16
 1306 0586 1B96      		adiw r26,11
 1307 0588 9C93      		st X,r25
 606:pff.c         **** }
 1308               		.loc 1 606 2 is_stmt 1 view .LVU252
 1309               	.LVL75:
 606:pff.c         **** }
 1310               		.loc 1 606 2 is_stmt 0 view .LVU253
 1311               	.LBE39:
 1312               	.LBE38:
 679:pff.c         **** 			res = dir_find(dj, dir);		/* Find it */
 1313               		.loc 1 679 4 is_stmt 1 view .LVU254
 680:pff.c         **** 			if (res != FR_OK) {				/* Could not find the object */
 1314               		.loc 1 680 4 view .LVU255
 1315               	.LBB44:
 1316               	.LBI22:
 494:pff.c         **** 	DIR *dj,		/* Pointer to the directory object linked to the file name */
 1317               		.loc 1 494 9 view .LVU256
 1318               	.LBB35:
 499:pff.c         **** 	BYTE c;
 1319               		.loc 1 499 2 view .LVU257
 500:pff.c         **** 
 1320               		.loc 1 500 2 view .LVU258
 503:pff.c         **** 	if (res != FR_OK) return res;
 1321               		.loc 1 503 2 view .LVU259
 503:pff.c         **** 	if (res != FR_OK) return res;
 1322               		.loc 1 503 8 is_stmt 0 view .LVU260
 1323 058a CE01      		movw r24,r28
 1324 058c 8196      		adiw r24,33
 1325 058e 0E94 0000 		call dir_rewind
 1326               	.LVL76:
 504:pff.c         **** 
 1327               		.loc 1 504 2 is_stmt 1 view .LVU261
 504:pff.c         **** 
 1328               		.loc 1 504 5 is_stmt 0 view .LVU262
 1329 0592 8111      		cpse r24,__zero_reg__
 1330 0594 00C0      		rjmp .L57
 1331               	.LVL77:
 1332               	.L67:
 506:pff.c         **** 		res = disk_readp(dir, dj->sect, (WORD)((dj->index % 16) * 32), 32)	/* Read an entry */
 1333               		.loc 1 506 2 is_stmt 1 view .LVU263
 507:pff.c         **** 			? FR_DISK_ERR : FR_OK;
 1334               		.loc 1 507 3 view .LVU264
 507:pff.c         **** 			? FR_DISK_ERR : FR_OK;
 1335               		.loc 1 507 53 is_stmt 0 view .LVU265
 1336 0596 29A1      		ldd r18,Y+33
 1337 0598 3AA1      		ldd r19,Y+34
 1338 059a 2F70      		andi r18,15
 1339 059c 3327      		clr r19
 507:pff.c         **** 			? FR_DISK_ERR : FR_OK;
 1340               		.loc 1 507 59 view .LVU266
 1341 059e 55E0      		ldi r21,5
 1342               		1:
 1343 05a0 220F      		lsl r18
 1344 05a2 331F      		rol r19
 1345 05a4 5A95      		dec r21
 1346 05a6 01F4      		brne 1b
 507:pff.c         **** 			? FR_DISK_ERR : FR_OK;
 1347               		.loc 1 507 9 view .LVU267
 1348 05a8 4DA5      		ldd r20,Y+45
 1349 05aa 5EA5      		ldd r21,Y+46
 1350 05ac 6FA5      		ldd r22,Y+47
 1351 05ae 78A9      		ldd r23,Y+48
 1352 05b0 00E2      		ldi r16,lo8(32)
 1353 05b2 10E0      		ldi r17,0
 1354 05b4 C501      		movw r24,r10
 1355 05b6 0E94 0000 		call disk_readp
 1356               	.LVL78:
 509:pff.c         **** 		c = dir[DIR_Name];	/* First character */
 1357               		.loc 1 509 3 is_stmt 1 view .LVU268
 509:pff.c         **** 		c = dir[DIR_Name];	/* First character */
 1358               		.loc 1 509 6 is_stmt 0 view .LVU269
 1359 05ba 8111      		cpse r24,__zero_reg__
 1360 05bc 00C0      		rjmp .L58
 510:pff.c         **** 		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 1361               		.loc 1 510 3 is_stmt 1 view .LVU270
 1362               	.LVL79:
 511:pff.c         **** 		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
 1363               		.loc 1 511 3 view .LVU271
 511:pff.c         **** 		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
 1364               		.loc 1 511 6 is_stmt 0 view .LVU272
 1365 05be 8981      		ldd r24,Y+1
 1366               	.LVL80:
 511:pff.c         **** 		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
 1367               		.loc 1 511 6 view .LVU273
 1368 05c0 8823      		tst r24
 1369 05c2 01F4      		brne .+2
 1370 05c4 00C0      		rjmp .L68
 512:pff.c         **** 			break;
 1371               		.loc 1 512 3 is_stmt 1 view .LVU274
 512:pff.c         **** 			break;
 1372               		.loc 1 512 12 is_stmt 0 view .LVU275
 1373 05c6 8C85      		ldd r24,Y+12
 512:pff.c         **** 			break;
 1374               		.loc 1 512 6 view .LVU276
 1375 05c8 83FD      		sbrc r24,3
 1376 05ca 00C0      		rjmp .L60
 512:pff.c         **** 			break;
 1377               		.loc 1 512 52 view .LVU277
 1378 05cc 2BA1      		ldd r18,Y+35
 1379 05ce 3CA1      		ldd r19,Y+36
 1380               	.LVL81:
 1381               	.LBB24:
 1382               	.LBI24:
 340:pff.c         **** 	const char *d = (const char *)dst, *s = (const char *)src;
 1383               		.loc 1 340 5 is_stmt 1 view .LVU278
 340:pff.c         **** 	const char *d = (const char *)dst, *s = (const char *)src;
 1384               		.loc 1 340 5 is_stmt 0 view .LVU279
 1385 05d0 A901      		movw r20,r18
 1386 05d2 455F      		subi r20,-11
 1387 05d4 5F4F      		sbci r21,-1
 1388               	.LBE24:
 512:pff.c         **** 			break;
 1389               		.loc 1 512 52 view .LVU280
 1390 05d6 F901      		movw r30,r18
 1391               	.LBB28:
 1392               	.LBB25:
 341:pff.c         **** 	int r = 0;
 1393               		.loc 1 341 14 view .LVU281
 1394 05d8 6A2D      		mov r22,r10
 1395 05da 9B2D      		mov r25,r11
 1396               	.LVL82:
 1397               	.L62:
 343:pff.c         **** 	return r;
 1398               		.loc 1 343 42 is_stmt 1 view .LVU282
 343:pff.c         **** 	return r;
 1399               		.loc 1 343 8 view .LVU283
 343:pff.c         **** 	return r;
 1400               		.loc 1 343 8 is_stmt 0 view .LVU284
 1401 05dc E417      		cp r30,r20
 1402 05de F507      		cpc r31,r21
 1403 05e0 01F4      		brne .+2
 1404 05e2 00C0      		rjmp .L61
 343:pff.c         **** 	return r;
 1405               		.loc 1 343 25 view .LVU285
 1406 05e4 A62F      		mov r26,r22
 1407 05e6 B92F      		mov r27,r25
 1408               	.LVL83:
 343:pff.c         **** 	return r;
 1409               		.loc 1 343 15 view .LVU286
 1410 05e8 6D91      		ld r22,X+
 1411               	.LVL84:
 343:pff.c         **** 	return r;
 1412               		.loc 1 343 15 view .LVU287
 1413 05ea 9191      		ld r25,Z+
 1414               	.LVL85:
 343:pff.c         **** 	return r;
 1415               		.loc 1 343 15 view .LVU288
 1416 05ec 6917      		cp r22,r25
 1417 05ee 01F0      		breq .L73
 1418               	.LVL86:
 1419               	.L60:
 343:pff.c         **** 	return r;
 1420               		.loc 1 343 15 view .LVU289
 1421               	.LBE25:
 1422               	.LBE28:
 514:pff.c         **** 	} while (res == FR_OK);
 1423               		.loc 1 514 3 is_stmt 1 view .LVU290
 1424               	.LBB29:
 1425               	.LBI29:
 449:pff.c         **** 	DIR *dj			/* Pointer to directory object */
 1426               		.loc 1 449 9 view .LVU291
 1427               	.LBB30:
 453:pff.c         **** 	WORD i;
 1428               		.loc 1 453 2 view .LVU292
 454:pff.c         **** 	FATFS *fs = FatFs;
 1429               		.loc 1 454 2 view .LVU293
 455:pff.c         **** 
 1430               		.loc 1 455 2 view .LVU294
 458:pff.c         **** 	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
 1431               		.loc 1 458 2 view .LVU295
 458:pff.c         **** 	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
 1432               		.loc 1 458 4 is_stmt 0 view .LVU296
 1433 05f0 09A1      		ldd r16,Y+33
 1434 05f2 1AA1      		ldd r17,Y+34
 1435 05f4 0F5F      		subi r16,-1
 1436 05f6 1F4F      		sbci r17,-1
 1437               	.LVL87:
 459:pff.c         **** 		return FR_NO_FILE;
 1438               		.loc 1 459 2 is_stmt 1 view .LVU297
 459:pff.c         **** 		return FR_NO_FILE;
 1439               		.loc 1 459 5 is_stmt 0 view .LVU298
 1440 05f8 01F0      		breq .L68
 459:pff.c         **** 		return FR_NO_FILE;
 1441               		.loc 1 459 15 view .LVU299
 1442 05fa 8DA5      		ldd r24,Y+45
 1443 05fc 9EA5      		ldd r25,Y+46
 1444 05fe AFA5      		ldd r26,Y+47
 1445 0600 B8A9      		ldd r27,Y+48
 459:pff.c         **** 		return FR_NO_FILE;
 1446               		.loc 1 459 9 view .LVU300
 1447 0602 0097      		sbiw r24,0
 1448 0604 A105      		cpc r26,__zero_reg__
 1449 0606 B105      		cpc r27,__zero_reg__
 1450 0608 01F0      		breq .L68
 462:pff.c         **** 		dj->sect++;			/* Next sector */
 1451               		.loc 1 462 2 is_stmt 1 view .LVU301
 462:pff.c         **** 		dj->sect++;			/* Next sector */
 1452               		.loc 1 462 10 is_stmt 0 view .LVU302
 1453 060a 9801      		movw r18,r16
 1454 060c 2F70      		andi r18,15
 1455 060e 3327      		clr r19
 462:pff.c         **** 		dj->sect++;			/* Next sector */
 1456               		.loc 1 462 5 view .LVU303
 1457 0610 232B      		or r18,r19
 1458 0612 01F0      		breq .+2
 1459 0614 00C0      		rjmp .L64
 455:pff.c         **** 
 1460               		.loc 1 455 9 view .LVU304
 1461 0616 8090 0000 		lds r8,FatFs
 1462 061a 9090 0000 		lds r9,FatFs+1
 463:pff.c         **** 
 1463               		.loc 1 463 3 is_stmt 1 view .LVU305
 463:pff.c         **** 
 1464               		.loc 1 463 11 is_stmt 0 view .LVU306
 1465 061e 0196      		adiw r24,1
 1466 0620 A11D      		adc r26,__zero_reg__
 1467 0622 B11D      		adc r27,__zero_reg__
 1468 0624 8DA7      		std Y+45,r24
 1469 0626 9EA7      		std Y+46,r25
 1470 0628 AFA7      		std Y+47,r26
 1471 062a B8AB      		std Y+48,r27
 465:pff.c         **** 			if (i >= fs->n_rootdir)	/* Report EOT when end of table */
 1472               		.loc 1 465 3 is_stmt 1 view .LVU307
 465:pff.c         **** 			if (i >= fs->n_rootdir)	/* Report EOT when end of table */
 1473               		.loc 1 465 9 is_stmt 0 view .LVU308
 1474 062c 89A5      		ldd r24,Y+41
 1475 062e 9AA5      		ldd r25,Y+42
 1476 0630 ABA5      		ldd r26,Y+43
 1477 0632 BCA5      		ldd r27,Y+44
 1478 0634 2196      		adiw r28,61-60
 1479 0636 8CAF      		std Y+60,r24
 1480 0638 9DAF      		std Y+61,r25
 1481 063a AEAF      		std Y+62,r26
 1482 063c BFAF      		std Y+63,r27
 1483 063e 2197      		sbiw r28,61-60
 465:pff.c         **** 			if (i >= fs->n_rootdir)	/* Report EOT when end of table */
 1484               		.loc 1 465 6 view .LVU309
 1485 0640 892B      		or r24,r25
 1486 0642 8A2B      		or r24,r26
 1487 0644 8B2B      		or r24,r27
 1488 0646 01F4      		brne .L65
 466:pff.c         **** 				return FR_NO_FILE;
 1489               		.loc 1 466 4 is_stmt 1 view .LVU310
 466:pff.c         **** 				return FR_NO_FILE;
 1490               		.loc 1 466 7 is_stmt 0 view .LVU311
 1491 0648 D401      		movw r26,r8
 1492 064a 1496      		adiw r26,4
 1493 064c 8D91      		ld r24,X+
 1494 064e 9C91      		ld r25,X
 1495 0650 0817      		cp r16,r24
 1496 0652 1907      		cpc r17,r25
 1497 0654 00F0      		brlo .L64
 1498               	.LVL88:
 1499               	.L68:
 466:pff.c         **** 				return FR_NO_FILE;
 1500               		.loc 1 466 7 view .LVU312
 1501               	.LBE30:
 1502               	.LBE29:
 1503               	.LBE35:
 1504               	.LBE44:
 682:pff.c         **** 					res = FR_NO_PATH;
 1505               		.loc 1 682 5 is_stmt 1 view .LVU313
 682:pff.c         **** 					res = FR_NO_PATH;
 1506               		.loc 1 682 31 is_stmt 0 view .LVU314
 1507 0656 EBA1      		ldd r30,Y+35
 1508 0658 FCA1      		ldd r31,Y+36
 682:pff.c         **** 					res = FR_NO_PATH;
 1509               		.loc 1 682 27 view .LVU315
 1510 065a 8385      		ldd r24,Z+11
 1511 065c 8111      		cpse r24,__zero_reg__
 1512 065e 00C0      		rjmp .L71
 1513               	.LVL89:
 1514               	.L70:
 683:pff.c         **** 				break;
 1515               		.loc 1 683 10 view .LVU316
 1516 0660 84E0      		ldi r24,lo8(4)
 1517 0662 00C0      		rjmp .L46
 1518               	.LVL90:
 1519               	.L73:
 1520               	.LBB45:
 1521               	.LBB36:
 1522               	.LBB32:
 1523               	.LBB26:
 343:pff.c         **** 	return r;
 1524               		.loc 1 343 25 view .LVU317
 1525 0664 6A2F      		mov r22,r26
 1526               	.LVL91:
 343:pff.c         **** 	return r;
 1527               		.loc 1 343 25 view .LVU318
 1528 0666 9B2F      		mov r25,r27
 1529               	.LVL92:
 343:pff.c         **** 	return r;
 1530               		.loc 1 343 25 view .LVU319
 1531 0668 00C0      		rjmp .L62
 1532               	.LVL93:
 1533               	.L65:
 343:pff.c         **** 	return r;
 1534               		.loc 1 343 25 view .LVU320
 1535               	.LBE26:
 1536               	.LBE32:
 1537               	.LBB33:
 1538               	.LBB31:
 470:pff.c         **** 				clst = get_fat(dj->clust);		/* Get next cluster */
 1539               		.loc 1 470 4 is_stmt 1 view .LVU321
 470:pff.c         **** 				clst = get_fat(dj->clust);		/* Get next cluster */
 1540               		.loc 1 470 23 is_stmt 0 view .LVU322
 1541 066a F401      		movw r30,r8
 1542 066c 8281      		ldd r24,Z+2
 470:pff.c         **** 				clst = get_fat(dj->clust);		/* Get next cluster */
 1543               		.loc 1 470 30 view .LVU323
 1544 066e 8150      		subi r24,1
 1545 0670 990B      		sbc r25,r25
 470:pff.c         **** 				clst = get_fat(dj->clust);		/* Get next cluster */
 1546               		.loc 1 470 12 view .LVU324
 1547 0672 9801      		movw r18,r16
 1548 0674 44E0      		ldi r20,4
 1549               		1:
 1550 0676 3695      		lsr r19
 1551 0678 2795      		ror r18
 1552 067a 4A95      		dec r20
 1553 067c 01F4      		brne 1b
 470:pff.c         **** 				clst = get_fat(dj->clust);		/* Get next cluster */
 1554               		.loc 1 470 18 view .LVU325
 1555 067e 8223      		and r24,r18
 1556 0680 9323      		and r25,r19
 470:pff.c         **** 				clst = get_fat(dj->clust);		/* Get next cluster */
 1557               		.loc 1 470 7 view .LVU326
 1558 0682 892B      		or r24,r25
 1559 0684 01F4      		brne .L64
 471:pff.c         **** 				if (clst <= 1) return FR_DISK_ERR;
 1560               		.loc 1 471 5 is_stmt 1 view .LVU327
 471:pff.c         **** 				if (clst <= 1) return FR_DISK_ERR;
 1561               		.loc 1 471 12 is_stmt 0 view .LVU328
 1562 0686 2196      		adiw r28,61-60
 1563 0688 6CAD      		ldd r22,Y+60
 1564 068a 7DAD      		ldd r23,Y+61
 1565 068c 8EAD      		ldd r24,Y+62
 1566 068e 9FAD      		ldd r25,Y+63
 1567 0690 2197      		sbiw r28,61-60
 1568 0692 0E94 0000 		call get_fat
 1569               	.LVL94:
 472:pff.c         **** 				if (clst >= fs->n_fatent)		/* When it reached end of dynamic table */
 1570               		.loc 1 472 5 is_stmt 1 view .LVU329
 472:pff.c         **** 				if (clst >= fs->n_fatent)		/* When it reached end of dynamic table */
 1571               		.loc 1 472 8 is_stmt 0 view .LVU330
 1572 0696 6230      		cpi r22,2
 1573 0698 7105      		cpc r23,__zero_reg__
 1574 069a 8105      		cpc r24,__zero_reg__
 1575 069c 9105      		cpc r25,__zero_reg__
 1576 069e 00F4      		brsh .+2
 1577 06a0 00C0      		rjmp .L58
 473:pff.c         **** 					return FR_NO_FILE;			/* Report EOT */
 1578               		.loc 1 473 5 is_stmt 1 view .LVU331
 473:pff.c         **** 					return FR_NO_FILE;			/* Report EOT */
 1579               		.loc 1 473 8 is_stmt 0 view .LVU332
 1580 06a2 D401      		movw r26,r8
 1581 06a4 1696      		adiw r26,6
 1582 06a6 4D90      		ld r4,X+
 1583 06a8 5D90      		ld r5,X+
 1584 06aa 6D90      		ld r6,X+
 1585 06ac 7C90      		ld r7,X
 1586 06ae 1997      		sbiw r26,6+3
 1587 06b0 6415      		cp r22,r4
 1588 06b2 7505      		cpc r23,r5
 1589 06b4 8605      		cpc r24,r6
 1590 06b6 9705      		cpc r25,r7
 1591 06b8 00F4      		brsh .L68
 475:pff.c         **** 				dj->sect = clust2sect(clst);
 1592               		.loc 1 475 5 is_stmt 1 view .LVU333
 475:pff.c         **** 				dj->sect = clust2sect(clst);
 1593               		.loc 1 475 15 is_stmt 0 view .LVU334
 1594 06ba 69A7      		std Y+41,r22
 1595 06bc 7AA7      		std Y+42,r23
 1596 06be 8BA7      		std Y+43,r24
 1597 06c0 9CA7      		std Y+44,r25
 476:pff.c         **** 			}
 1598               		.loc 1 476 5 is_stmt 1 view .LVU335
 476:pff.c         **** 			}
 1599               		.loc 1 476 16 is_stmt 0 view .LVU336
 1600 06c2 0E94 0000 		call clust2sect
 1601               	.LVL95:
 476:pff.c         **** 			}
 1602               		.loc 1 476 16 view .LVU337
 1603 06c6 6DA7      		std Y+45,r22
 1604 06c8 7EA7      		std Y+46,r23
 1605 06ca 8FA7      		std Y+47,r24
 1606 06cc 98AB      		std Y+48,r25
 1607               	.LVL96:
 1608               	.L64:
 481:pff.c         **** 
 1609               		.loc 1 481 2 is_stmt 1 view .LVU338
 481:pff.c         **** 
 1610               		.loc 1 481 12 is_stmt 0 view .LVU339
 1611 06ce 1AA3      		std Y+34,r17
 1612 06d0 09A3      		std Y+33,r16
 483:pff.c         **** }
 1613               		.loc 1 483 2 is_stmt 1 view .LVU340
 1614               	.LVL97:
 483:pff.c         **** }
 1615               		.loc 1 483 2 is_stmt 0 view .LVU341
 1616               	.LBE31:
 1617               	.LBE33:
 515:pff.c         **** 
 1618               		.loc 1 515 10 is_stmt 1 view .LVU342
 1619 06d2 00C0      		rjmp .L67
 1620               	.LVL98:
 1621               	.L57:
 515:pff.c         **** 
 1622               		.loc 1 515 10 is_stmt 0 view .LVU343
 1623               	.LBE36:
 1624               	.LBE45:
 682:pff.c         **** 					res = FR_NO_PATH;
 1625               		.loc 1 682 5 is_stmt 1 view .LVU344
 682:pff.c         **** 					res = FR_NO_PATH;
 1626               		.loc 1 682 8 is_stmt 0 view .LVU345
 1627 06d4 8330      		cpi r24,lo8(3)
 1628 06d6 01F4      		brne .+2
 1629 06d8 00C0      		rjmp .L68
 1630 06da 00C0      		rjmp .L46
 1631               	.LVL99:
 1632               	.L61:
 681:pff.c         **** 				if (res == FR_NO_FILE && !*(dj->fn+11))
 1633               		.loc 1 681 4 is_stmt 1 view .LVU346
 686:pff.c         **** 			if (!(dir[DIR_Attr] & AM_DIR)) { /* Cannot follow because it is a file */
 1634               		.loc 1 686 4 view .LVU347
 686:pff.c         **** 			if (!(dir[DIR_Attr] & AM_DIR)) { /* Cannot follow because it is a file */
 1635               		.loc 1 686 7 is_stmt 0 view .LVU348
 1636 06dc F901      		movw r30,r18
 1637 06de 9385      		ldd r25,Z+11
 1638 06e0 8071      		andi r24,lo8(16)
 1639 06e2 9111      		cpse r25,__zero_reg__
 1640 06e4 00C0      		rjmp .L69
 687:pff.c         **** 				res = FR_NO_PATH; break;
 1641               		.loc 1 687 4 is_stmt 1 view .LVU349
 687:pff.c         **** 				res = FR_NO_PATH; break;
 1642               		.loc 1 687 7 is_stmt 0 view .LVU350
 1643 06e6 01F4      		brne .+2
 1644 06e8 00C0      		rjmp .L70
 690:pff.c         **** 		}
 1645               		.loc 1 690 4 is_stmt 1 view .LVU351
 690:pff.c         **** 		}
 1646               		.loc 1 690 17 is_stmt 0 view .LVU352
 1647 06ea 8D89      		ldd r24,Y+21
 1648 06ec 9E89      		ldd r25,Y+22
 1649 06ee B0E0      		ldi r27,0
 1650 06f0 A0E0      		ldi r26,0
 1651 06f2 DC01      		movw r26,r24
 1652 06f4 9927      		clr r25
 1653 06f6 8827      		clr r24
 1654 06f8 4B8D      		ldd r20,Y+27
 1655 06fa 5C8D      		ldd r21,Y+28
 1656 06fc 70E0      		ldi r23,0
 1657 06fe 60E0      		ldi r22,0
 1658 0700 842B      		or r24,r20
 1659 0702 952B      		or r25,r21
 1660 0704 A62B      		or r26,r22
 1661 0706 B72B      		or r27,r23
 690:pff.c         **** 		}
 1662               		.loc 1 690 15 view .LVU353
 1663 0708 8DA3      		std Y+37,r24
 1664 070a 9EA3      		std Y+38,r25
 1665 070c AFA3      		std Y+39,r26
 1666 070e B8A7      		std Y+40,r27
 677:pff.c         **** 			res = create_name(dj, &path);	/* Get a segment */
 1667               		.loc 1 677 9 is_stmt 1 view .LVU354
 1668               	.LVL100:
 1669               	.L50:
 677:pff.c         **** 			res = create_name(dj, &path);	/* Get a segment */
 1670               		.loc 1 677 3 view .LVU355
 678:pff.c         **** 			if (res != FR_OK) break;
 1671               		.loc 1 678 4 view .LVU356
 1672 0710 0BA1      		ldd r16,Y+35
 1673 0712 1CA1      		ldd r17,Y+36
 1674               	.LVL101:
 1675               	.LBB46:
 1676               	.LBI38:
 568:pff.c         **** 	DIR *dj,			/* Pointer to the directory object */
 1677               		.loc 1 568 9 view .LVU357
 1678               	.LBB42:
 573:pff.c         **** 	const char *p;
 1679               		.loc 1 573 2 view .LVU358
 574:pff.c         **** 
 1680               		.loc 1 574 2 view .LVU359
 577:pff.c         **** 	mem_set(sfn, ' ', 11);
 1681               		.loc 1 577 2 view .LVU360
 578:pff.c         **** 	si = i = 0; ni = 8;
 1682               		.loc 1 578 2 view .LVU361
 1683               	.LBB40:
 1684               	.LBI40:
 333:pff.c         **** 	char *d = (char*)dst;
 1685               		.loc 1 333 6 view .LVU362
 1686               	.LBB41:
 335:pff.c         **** }
 1687               		.loc 1 335 21 is_stmt 0 view .LVU363
 1688 0714 4BE0      		ldi r20,lo8(11)
 1689 0716 50E0      		ldi r21,0
 1690 0718 60E2      		ldi r22,lo8(32)
 1691 071a 70E0      		ldi r23,0
 1692 071c C801      		movw r24,r16
 1693 071e 0E94 0000 		call memset
 1694               	.LVL102:
 1695               	.LBE41:
 1696               	.LBE40:
 579:pff.c         **** 	p = *path;
 1697               		.loc 1 579 9 view .LVU364
 1698 0722 20E0      		ldi r18,0
 579:pff.c         **** 	p = *path;
 1699               		.loc 1 579 5 view .LVU365
 1700 0724 80E0      		ldi r24,0
 579:pff.c         **** 	p = *path;
 1701               		.loc 1 579 17 view .LVU366
 1702 0726 98E0      		ldi r25,lo8(8)
 1703               	.LVL103:
 1704               	.L51:
 581:pff.c         **** 		c = p[si++];
 1705               		.loc 1 581 2 is_stmt 1 view .LVU367
 582:pff.c         **** 		if (c <= ' ' || c == '/') break;	/* Break on end of segment */
 1706               		.loc 1 582 3 view .LVU368
 582:pff.c         **** 		if (c <= ' ' || c == '/') break;	/* Break on end of segment */
 1707               		.loc 1 582 11 is_stmt 0 view .LVU369
 1708 0728 41E0      		ldi r20,lo8(1)
 1709 072a 480F      		add r20,r24
 1710               	.LVL104:
 582:pff.c         **** 		if (c <= ' ' || c == '/') break;	/* Break on end of segment */
 1711               		.loc 1 582 5 view .LVU370
 1712 072c F701      		movw r30,r14
 1713 072e E80F      		add r30,r24
 1714 0730 F11D      		adc r31,__zero_reg__
 1715 0732 8081      		ld r24,Z
 1716               	.LVL105:
 583:pff.c         **** 		if (c == '.' || i >= ni) {
 1717               		.loc 1 583 3 is_stmt 1 view .LVU371
 583:pff.c         **** 		if (c == '.' || i >= ni) {
 1718               		.loc 1 583 6 is_stmt 0 view .LVU372
 1719 0734 8132      		cpi r24,lo8(33)
 1720 0736 00F4      		brsh .+2
 1721 0738 00C0      		rjmp .L52
 583:pff.c         **** 		if (c == '.' || i >= ni) {
 1722               		.loc 1 583 16 view .LVU373
 1723 073a 8F32      		cpi r24,lo8(47)
 1724 073c 01F4      		brne .+2
 1725 073e 00C0      		rjmp .L52
 584:pff.c         **** 			if (ni != 8 || c != '.') break;
 1726               		.loc 1 584 3 is_stmt 1 view .LVU374
 584:pff.c         **** 			if (ni != 8 || c != '.') break;
 1727               		.loc 1 584 6 is_stmt 0 view .LVU375
 1728 0740 8E32      		cpi r24,lo8(46)
 1729 0742 01F4      		brne .+2
 1730 0744 00C0      		rjmp .L53
 584:pff.c         **** 			if (ni != 8 || c != '.') break;
 1731               		.loc 1 584 16 view .LVU376
 1732 0746 2917      		cp r18,r25
 1733 0748 00F0      		brlo .+2
 1734 074a 00C0      		rjmp .L52
 593:pff.c         **** 			d = p[si++];				/* Get 2nd byte */
 1735               		.loc 1 593 3 is_stmt 1 view .LVU377
 598:pff.c         **** 			sfn[i++] = c;
 1736               		.loc 1 598 4 view .LVU378
 598:pff.c         **** 			sfn[i++] = c;
 1737               		.loc 1 598 8 is_stmt 0 view .LVU379
 1738 074c 3FE9      		ldi r19,lo8(-97)
 1739 074e 380F      		add r19,r24
 598:pff.c         **** 			sfn[i++] = c;
 1740               		.loc 1 598 7 view .LVU380
 1741 0750 3A31      		cpi r19,lo8(26)
 1742 0752 00F4      		brsh .L54
 598:pff.c         **** 			sfn[i++] = c;
 1743               		.loc 1 598 20 is_stmt 1 view .LVU381
 598:pff.c         **** 			sfn[i++] = c;
 1744               		.loc 1 598 22 is_stmt 0 view .LVU382
 1745 0754 8052      		subi r24,lo8(-(-32))
 1746               	.LVL106:
 1747               	.L54:
 599:pff.c         **** 		}
 1748               		.loc 1 599 4 is_stmt 1 view .LVU383
 599:pff.c         **** 		}
 1749               		.loc 1 599 13 is_stmt 0 view .LVU384
 1750 0756 F801      		movw r30,r16
 1751 0758 E20F      		add r30,r18
 1752 075a F11D      		adc r31,__zero_reg__
 1753 075c 8083      		st Z,r24
 1754 075e 392F      		mov r19,r25
 599:pff.c         **** 		}
 1755               		.loc 1 599 9 view .LVU385
 1756 0760 91E0      		ldi r25,lo8(1)
 1757               	.LVL107:
 599:pff.c         **** 		}
 1758               		.loc 1 599 9 view .LVU386
 1759 0762 920F      		add r25,r18
 1760               	.LVL108:
 1761               	.L55:
 586:pff.c         **** 			continue;
 1762               		.loc 1 586 14 view .LVU387
 1763 0764 292F      		mov r18,r25
 582:pff.c         **** 		if (c <= ' ' || c == '/') break;	/* Break on end of segment */
 1764               		.loc 1 582 11 view .LVU388
 1765 0766 842F      		mov r24,r20
 1766               	.LVL109:
 582:pff.c         **** 		if (c <= ' ' || c == '/') break;	/* Break on end of segment */
 1767               		.loc 1 582 11 view .LVU389
 1768 0768 932F      		mov r25,r19
 1769 076a 00C0      		rjmp .L51
 1770               	.LVL110:
 1771               	.L69:
 582:pff.c         **** 		if (c <= ' ' || c == '/') break;	/* Break on end of segment */
 1772               		.loc 1 582 11 view .LVU390
 1773               	.LBE42:
 1774               	.LBE46:
 1775               	.LBE49:
 1776               	.LBE51:
 836:pff.c         **** 		return FR_NO_FILE;
 1777               		.loc 1 836 2 is_stmt 1 discriminator 1 view .LVU391
 836:pff.c         **** 		return FR_NO_FILE;
 1778               		.loc 1 836 14 is_stmt 0 discriminator 1 view .LVU392
 1779 076c 8111      		cpse r24,__zero_reg__
 1780 076e 00C0      		rjmp .L71
 839:pff.c         **** 	fs->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
 1781               		.loc 1 839 2 is_stmt 1 view .LVU393
 839:pff.c         **** 	fs->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
 1782               		.loc 1 839 18 is_stmt 0 view .LVU394
 1783 0770 4D89      		ldd r20,Y+21
 1784 0772 5E89      		ldd r21,Y+22
 1785 0774 70E0      		ldi r23,0
 1786 0776 60E0      		ldi r22,0
 1787 0778 BA01      		movw r22,r20
 1788 077a 5527      		clr r21
 1789 077c 4427      		clr r20
 1790 077e 0B8D      		ldd r16,Y+27
 1791 0780 1C8D      		ldd r17,Y+28
 1792 0782 30E0      		ldi r19,0
 1793 0784 20E0      		ldi r18,0
 1794 0786 402B      		or r20,r16
 1795 0788 512B      		or r21,r17
 1796 078a 622B      		or r22,r18
 1797 078c 732B      		or r23,r19
 839:pff.c         **** 	fs->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
 1798               		.loc 1 839 16 view .LVU395
 1799 078e D601      		movw r26,r12
 1800 0790 5E96      		adiw r26,30
 1801 0792 4D93      		st X+,r20
 1802 0794 5D93      		st X+,r21
 1803 0796 6D93      		st X+,r22
 1804 0798 7C93      		st X,r23
 1805 079a 9197      		sbiw r26,30+3
 840:pff.c         **** 	fs->fptr = 0;						/* File pointer */
 1806               		.loc 1 840 2 is_stmt 1 view .LVU396
 840:pff.c         **** 	fs->fptr = 0;						/* File pointer */
 1807               		.loc 1 840 12 is_stmt 0 view .LVU397
 1808 079c 4D8D      		ldd r20,Y+29
 1809 079e 5E8D      		ldd r21,Y+30
 1810 07a0 6F8D      		ldd r22,Y+31
 1811 07a2 78A1      		ldd r23,Y+32
 1812 07a4 F601      		movw r30,r12
 1813 07a6 428F      		std Z+26,r20
 1814 07a8 538F      		std Z+27,r21
 1815 07aa 648F      		std Z+28,r22
 1816 07ac 758F      		std Z+29,r23
 841:pff.c         **** 	fs->flag = FA_OPENED;
 1817               		.loc 1 841 2 is_stmt 1 view .LVU398
 841:pff.c         **** 	fs->flag = FA_OPENED;
 1818               		.loc 1 841 11 is_stmt 0 view .LVU399
 1819 07ae 5696      		adiw r26,22
 1820 07b0 1D92      		st X+,__zero_reg__
 1821 07b2 1D92      		st X+,__zero_reg__
 1822 07b4 1D92      		st X+,__zero_reg__
 1823 07b6 1C92      		st X,__zero_reg__
 1824 07b8 5997      		sbiw r26,22+3
 842:pff.c         **** 
 1825               		.loc 1 842 2 is_stmt 1 view .LVU400
 842:pff.c         **** 
 1826               		.loc 1 842 11 is_stmt 0 view .LVU401
 1827 07ba 91E0      		ldi r25,lo8(1)
 1828 07bc 1196      		adiw r26,1
 1829 07be 9C93      		st X,r25
 844:pff.c         **** }
 1830               		.loc 1 844 2 is_stmt 1 view .LVU402
 844:pff.c         **** }
 1831               		.loc 1 844 9 is_stmt 0 view .LVU403
 1832 07c0 00C0      		rjmp .L46
 1833               	.LVL111:
 1834               	.L72:
 830:pff.c         **** 
 1835               		.loc 1 830 10 view .LVU404
 1836 07c2 86E0      		ldi r24,lo8(6)
 1837               	.LVL112:
 830:pff.c         **** 
 1838               		.loc 1 830 10 view .LVU405
 1839 07c4 00C0      		rjmp .L46
 1840               	.LVL113:
 1841               	.L58:
 1842               	.LBB52:
 1843               	.LBB50:
 682:pff.c         **** 					res = FR_NO_PATH;
 1844               		.loc 1 682 5 is_stmt 1 view .LVU406
 1845               	.LBB47:
 1846               	.LBB37:
 1847               	.LBB34:
 1848               	.LBB27:
 343:pff.c         **** 	return r;
 1849               		.loc 1 343 25 is_stmt 0 view .LVU407
 1850 07c6 81E0      		ldi r24,lo8(1)
 1851 07c8 00C0      		rjmp .L46
 1852               	.LVL114:
 1853               	.L53:
 343:pff.c         **** 	return r;
 1854               		.loc 1 343 25 view .LVU408
 1855               	.LBE27:
 1856               	.LBE34:
 1857               	.LBE37:
 1858               	.LBE47:
 1859               	.LBB48:
 1860               	.LBB43:
 585:pff.c         **** 			i = 8; ni = 11;
 1861               		.loc 1 585 4 is_stmt 1 view .LVU409
 585:pff.c         **** 			i = 8; ni = 11;
 1862               		.loc 1 585 7 is_stmt 0 view .LVU410
 1863 07ca 9830      		cpi r25,lo8(8)
 1864 07cc 01F0      		breq .+2
 1865 07ce 00C0      		rjmp .L52
 586:pff.c         **** 			continue;
 1866               		.loc 1 586 14 view .LVU411
 1867 07d0 3BE0      		ldi r19,lo8(11)
 1868 07d2 00C0      		rjmp .L55
 1869               	.LBE43:
 1870               	.LBE48:
 1871               	.LBE50:
 1872               	.LBE52:
 1873               		.cfi_endproc
 1874               	.LFE11:
 1876               	.global	pf_read
 1878               	pf_read:
 1879               	.LVL115:
 1880               	.LFB12:
 846:pff.c         **** 
 847:pff.c         **** 
 848:pff.c         **** 
 849:pff.c         **** 
 850:pff.c         **** /*-----------------------------------------------------------------------*/
 851:pff.c         **** /* Read File                                                             */
 852:pff.c         **** /*-----------------------------------------------------------------------*/
 853:pff.c         **** #if _USE_READ
 854:pff.c         **** 
 855:pff.c         **** FRESULT pf_read (
 856:pff.c         **** 	void* buff,		/* Pointer to the read buffer (NULL:Forward data to the stream)*/
 857:pff.c         **** 	WORD btr,		/* Number of bytes to read */
 858:pff.c         **** 	WORD* br		/* Pointer to number of bytes read */
 859:pff.c         **** )
 860:pff.c         **** {
 1881               		.loc 1 860 1 is_stmt 1 view -0
 1882               		.cfi_startproc
 1883               		.loc 1 860 1 is_stmt 0 view .LVU413
 1884 07d4 2F92      		push r2
 1885               	.LCFI56:
 1886               		.cfi_def_cfa_offset 4
 1887               		.cfi_offset 2, -3
 1888 07d6 3F92      		push r3
 1889               	.LCFI57:
 1890               		.cfi_def_cfa_offset 5
 1891               		.cfi_offset 3, -4
 1892 07d8 4F92      		push r4
 1893               	.LCFI58:
 1894               		.cfi_def_cfa_offset 6
 1895               		.cfi_offset 4, -5
 1896 07da 5F92      		push r5
 1897               	.LCFI59:
 1898               		.cfi_def_cfa_offset 7
 1899               		.cfi_offset 5, -6
 1900 07dc 7F92      		push r7
 1901               	.LCFI60:
 1902               		.cfi_def_cfa_offset 8
 1903               		.cfi_offset 7, -7
 1904 07de 8F92      		push r8
 1905               	.LCFI61:
 1906               		.cfi_def_cfa_offset 9
 1907               		.cfi_offset 8, -8
 1908 07e0 9F92      		push r9
 1909               	.LCFI62:
 1910               		.cfi_def_cfa_offset 10
 1911               		.cfi_offset 9, -9
 1912 07e2 AF92      		push r10
 1913               	.LCFI63:
 1914               		.cfi_def_cfa_offset 11
 1915               		.cfi_offset 10, -10
 1916 07e4 BF92      		push r11
 1917               	.LCFI64:
 1918               		.cfi_def_cfa_offset 12
 1919               		.cfi_offset 11, -11
 1920 07e6 CF92      		push r12
 1921               	.LCFI65:
 1922               		.cfi_def_cfa_offset 13
 1923               		.cfi_offset 12, -12
 1924 07e8 DF92      		push r13
 1925               	.LCFI66:
 1926               		.cfi_def_cfa_offset 14
 1927               		.cfi_offset 13, -13
 1928 07ea EF92      		push r14
 1929               	.LCFI67:
 1930               		.cfi_def_cfa_offset 15
 1931               		.cfi_offset 14, -14
 1932 07ec FF92      		push r15
 1933               	.LCFI68:
 1934               		.cfi_def_cfa_offset 16
 1935               		.cfi_offset 15, -15
 1936 07ee 0F93      		push r16
 1937               	.LCFI69:
 1938               		.cfi_def_cfa_offset 17
 1939               		.cfi_offset 16, -16
 1940 07f0 1F93      		push r17
 1941               	.LCFI70:
 1942               		.cfi_def_cfa_offset 18
 1943               		.cfi_offset 17, -17
 1944 07f2 CF93      		push r28
 1945               	.LCFI71:
 1946               		.cfi_def_cfa_offset 19
 1947               		.cfi_offset 28, -18
 1948 07f4 DF93      		push r29
 1949               	.LCFI72:
 1950               		.cfi_def_cfa_offset 20
 1951               		.cfi_offset 29, -19
 1952 07f6 00D0      		rcall .
 1953 07f8 00D0      		rcall .
 1954               	.LCFI73:
 1955               		.cfi_def_cfa_offset 26
 1956 07fa CDB7      		in r28,__SP_L__
 1957 07fc DEB7      		in r29,__SP_H__
 1958               	.LCFI74:
 1959               		.cfi_def_cfa_register 28
 1960               	/* prologue: function */
 1961               	/* frame size = 6 */
 1962               	/* stack size = 23 */
 1963               	.L__stack_usage = 23
 1964 07fe 2C01      		movw r4,r24
 1965 0800 7B01      		movw r14,r22
 1966 0802 5A01      		movw r10,r20
 861:pff.c         **** 	DRESULT dr;
 1967               		.loc 1 861 2 is_stmt 1 view .LVU414
 862:pff.c         **** 	CLUST clst;
 1968               		.loc 1 862 2 view .LVU415
 863:pff.c         **** 	DWORD sect, remain;
 1969               		.loc 1 863 2 view .LVU416
 864:pff.c         **** 	WORD rcnt;
 1970               		.loc 1 864 2 view .LVU417
 865:pff.c         **** 	BYTE cs, *rbuff = buff;
 1971               		.loc 1 865 2 view .LVU418
 1972               	.LVL116:
 866:pff.c         **** 	FATFS *fs = FatFs;
 1973               		.loc 1 866 2 view .LVU419
 1974               		.loc 1 866 9 is_stmt 0 view .LVU420
 1975 0804 8091 0000 		lds r24,FatFs
 1976 0808 9091 0000 		lds r25,FatFs+1
 1977               	.LVL117:
 1978               		.loc 1 866 9 view .LVU421
 1979 080c 9E83      		std Y+6,r25
 1980 080e 8D83      		std Y+5,r24
 1981               	.LVL118:
 867:pff.c         **** 
 868:pff.c         **** 
 869:pff.c         **** 	*br = 0;
 1982               		.loc 1 869 2 is_stmt 1 view .LVU422
 1983               		.loc 1 869 6 is_stmt 0 view .LVU423
 1984 0810 DA01      		movw r26,r20
 1985 0812 1D92      		st X+,__zero_reg__
 1986 0814 1C92      		st X,__zero_reg__
 870:pff.c         **** 	if (!fs) return FR_NOT_ENABLED;		/* Check file system */
 1987               		.loc 1 870 2 is_stmt 1 view .LVU424
 1988               		.loc 1 870 5 is_stmt 0 view .LVU425
 1989 0816 0097      		sbiw r24,0
 1990 0818 01F4      		brne .+2
 1991 081a 00C0      		rjmp .L111
 871:pff.c         **** 	if (!(fs->flag & FA_OPENED))		/* Check if opened */
 1992               		.loc 1 871 2 is_stmt 1 view .LVU426
 1993 081c FC01      		movw r30,r24
 1994 081e 8181      		ldd r24,Z+1
 1995               	.LVL119:
 1996               		.loc 1 871 5 is_stmt 0 view .LVU427
 1997 0820 F82F      		mov r31,r24
 1998 0822 F170      		andi r31,lo8(1)
 1999 0824 7F2E      		mov r7,r31
 2000 0826 80FF      		sbrs r24,0
 2001 0828 00C0      		rjmp .L112
 872:pff.c         **** 		return FR_NOT_OPENED;
 873:pff.c         **** 
 874:pff.c         **** 	remain = fs->fsize - fs->fptr;
 2002               		.loc 1 874 2 is_stmt 1 view .LVU428
 2003               		.loc 1 874 9 is_stmt 0 view .LVU429
 2004 082a ED81      		ldd r30,Y+5
 2005 082c FE81      		ldd r31,Y+6
 2006               		.loc 1 874 9 view .LVU430
 2007 082e 828D      		ldd r24,Z+26
 2008 0830 938D      		ldd r25,Z+27
 2009 0832 A48D      		ldd r26,Z+28
 2010 0834 B58D      		ldd r27,Z+29
 2011 0836 4689      		ldd r20,Z+22
 2012 0838 5789      		ldd r21,Z+23
 2013 083a 608D      		ldd r22,Z+24
 2014 083c 718D      		ldd r23,Z+25
 2015               	.LVL120:
 2016               		.loc 1 874 9 view .LVU431
 2017 083e 841B      		sub r24,r20
 2018 0840 950B      		sbc r25,r21
 2019 0842 A60B      		sbc r26,r22
 2020 0844 B70B      		sbc r27,r23
 2021               	.LVL121:
 875:pff.c         **** 	if (btr > remain) btr = (WORD)remain;			/* Truncate btr by remaining bytes */
 2022               		.loc 1 875 2 is_stmt 1 view .LVU432
 2023               		.loc 1 875 10 is_stmt 0 view .LVU433
 2024 0846 A701      		movw r20,r14
 2025 0848 70E0      		ldi r23,0
 2026 084a 60E0      		ldi r22,0
 2027               	.LVL122:
 2028               		.loc 1 875 5 view .LVU434
 2029 084c 8417      		cp r24,r20
 2030 084e 9507      		cpc r25,r21
 2031 0850 A607      		cpc r26,r22
 2032 0852 B707      		cpc r27,r23
 2033 0854 00F4      		brsh .L101
 2034               		.loc 1 875 20 is_stmt 1 discriminator 1 view .LVU435
 2035               		.loc 1 875 24 is_stmt 0 discriminator 1 view .LVU436
 2036 0856 7C01      		movw r14,r24
 2037               	.LVL123:
 2038               	.L101:
 876:pff.c         **** 
 877:pff.c         **** 	while (btr)	{									/* Repeat until all data transferred */
 878:pff.c         **** 		if ((fs->fptr % 512) == 0) {				/* On the sector boundary? */
 879:pff.c         **** 			cs = (BYTE)(fs->fptr / 512 & (fs->csize - 1));	/* Sector offset in the cluster */
 880:pff.c         **** 			if (!cs) {								/* On the cluster boundary? */
 881:pff.c         **** 				clst = (fs->fptr == 0) ?			/* On the top of the file? */
 882:pff.c         **** 					fs->org_clust : get_fat(fs->curr_clust);
 883:pff.c         **** 				if (clst <= 1) goto fr_abort;
 884:pff.c         **** 				fs->curr_clust = clst;				/* Update current cluster */
 885:pff.c         **** 			}
 886:pff.c         **** 			sect = clust2sect(fs->curr_clust);		/* Get current sector */
 887:pff.c         **** 			if (!sect) goto fr_abort;
 888:pff.c         **** 			fs->dsect = sect + cs;
 889:pff.c         **** 		}
 890:pff.c         **** 		rcnt = (WORD)(512 - (fs->fptr % 512));		/* Get partial sector data from sector buffer */
 891:pff.c         **** 		if (rcnt > btr) rcnt = btr;
 892:pff.c         **** 		dr = disk_readp(!buff ? 0 : rbuff, fs->dsect, (WORD)(fs->fptr % 512), rcnt);
 2039               		.loc 1 892 8 view .LVU437
 2040 0858 4201      		movw r8,r4
 890:pff.c         **** 		if (rcnt > btr) rcnt = btr;
 2041               		.loc 1 890 8 view .LVU438
 2042 085a 212C      		mov r2,__zero_reg__
 2043 085c 32E0      		ldi r19,lo8(2)
 2044 085e 332E      		mov r3,r19
 2045               	.LVL124:
 2046               	.L102:
 877:pff.c         **** 		if ((fs->fptr % 512) == 0) {				/* On the sector boundary? */
 2047               		.loc 1 877 8 is_stmt 1 view .LVU439
 2048 0860 E114      		cp r14,__zero_reg__
 2049 0862 F104      		cpc r15,__zero_reg__
 2050 0864 01F4      		brne .L110
 893:pff.c         **** 		if (dr) goto fr_abort;
 894:pff.c         **** 		fs->fptr += rcnt; rbuff += rcnt;			/* Update pointers and counters */
 895:pff.c         **** 		btr -= rcnt; *br += rcnt;
 896:pff.c         **** 	}
 897:pff.c         **** 
 898:pff.c         **** 	return FR_OK;
 2051               		.loc 1 898 9 is_stmt 0 view .LVU440
 2052 0866 712C      		mov r7,__zero_reg__
 2053               	.LVL125:
 2054               	.L99:
 899:pff.c         **** 
 900:pff.c         **** fr_abort:
 901:pff.c         **** 	fs->flag = 0;
 902:pff.c         **** 	return FR_DISK_ERR;
 903:pff.c         **** }
 2055               		.loc 1 903 1 view .LVU441
 2056 0868 872D      		mov r24,r7
 2057               	/* epilogue start */
 2058 086a 2696      		adiw r28,6
 2059 086c 0FB6      		in __tmp_reg__,__SREG__
 2060 086e F894      		cli
 2061 0870 DEBF      		out __SP_H__,r29
 2062 0872 0FBE      		out __SREG__,__tmp_reg__
 2063 0874 CDBF      		out __SP_L__,r28
 2064 0876 DF91      		pop r29
 2065 0878 CF91      		pop r28
 2066 087a 1F91      		pop r17
 2067 087c 0F91      		pop r16
 2068 087e FF90      		pop r15
 2069 0880 EF90      		pop r14
 2070               	.LVL126:
 2071               		.loc 1 903 1 view .LVU442
 2072 0882 DF90      		pop r13
 2073 0884 CF90      		pop r12
 2074 0886 BF90      		pop r11
 2075 0888 AF90      		pop r10
 2076               	.LVL127:
 2077               		.loc 1 903 1 view .LVU443
 2078 088a 9F90      		pop r9
 2079 088c 8F90      		pop r8
 2080 088e 7F90      		pop r7
 2081 0890 5F90      		pop r5
 2082 0892 4F90      		pop r4
 2083               	.LVL128:
 2084               		.loc 1 903 1 view .LVU444
 2085 0894 3F90      		pop r3
 2086 0896 2F90      		pop r2
 2087 0898 0895      		ret
 2088               	.LVL129:
 2089               	.L110:
 878:pff.c         **** 			cs = (BYTE)(fs->fptr / 512 & (fs->csize - 1));	/* Sector offset in the cluster */
 2090               		.loc 1 878 3 is_stmt 1 view .LVU445
 878:pff.c         **** 			cs = (BYTE)(fs->fptr / 512 & (fs->csize - 1));	/* Sector offset in the cluster */
 2091               		.loc 1 878 10 is_stmt 0 view .LVU446
 2092 089a ED81      		ldd r30,Y+5
 2093 089c FE81      		ldd r31,Y+6
 2094 089e 8689      		ldd r24,Z+22
 2095 08a0 9789      		ldd r25,Z+23
 2096 08a2 A08D      		ldd r26,Z+24
 2097 08a4 B18D      		ldd r27,Z+25
 878:pff.c         **** 			cs = (BYTE)(fs->fptr / 512 & (fs->csize - 1));	/* Sector offset in the cluster */
 2098               		.loc 1 878 17 view .LVU447
 2099 08a6 AC01      		movw r20,r24
 2100 08a8 BD01      		movw r22,r26
 2101 08aa 5170      		andi r21,1
 2102 08ac 6627      		clr r22
 2103 08ae 7727      		clr r23
 878:pff.c         **** 			cs = (BYTE)(fs->fptr / 512 & (fs->csize - 1));	/* Sector offset in the cluster */
 2104               		.loc 1 878 6 view .LVU448
 2105 08b0 452B      		or r20,r21
 2106 08b2 462B      		or r20,r22
 2107 08b4 472B      		or r20,r23
 2108 08b6 01F0      		breq .+2
 2109 08b8 00C0      		rjmp .L103
 879:pff.c         **** 			if (!cs) {								/* On the cluster boundary? */
 2110               		.loc 1 879 4 is_stmt 1 view .LVU449
 879:pff.c         **** 			if (!cs) {								/* On the cluster boundary? */
 2111               		.loc 1 879 44 is_stmt 0 view .LVU450
 2112 08ba D280      		ldd r13,Z+2
 2113 08bc DA94      		dec r13
 879:pff.c         **** 			if (!cs) {								/* On the cluster boundary? */
 2114               		.loc 1 879 25 view .LVU451
 2115 08be AC01      		movw r20,r24
 2116 08c0 BD01      		movw r22,r26
 2117 08c2 29E0      		ldi r18,9
 2118               		1:
 2119 08c4 7695      		lsr r23
 2120 08c6 6795      		ror r22
 2121 08c8 5795      		ror r21
 2122 08ca 4795      		ror r20
 2123 08cc 2A95      		dec r18
 2124 08ce 01F4      		brne 1b
 879:pff.c         **** 			if (!cs) {								/* On the cluster boundary? */
 2125               		.loc 1 879 7 view .LVU452
 2126 08d0 D422      		and r13,r20
 2127               	.LVL130:
 880:pff.c         **** 				clst = (fs->fptr == 0) ?			/* On the top of the file? */
 2128               		.loc 1 880 4 is_stmt 1 view .LVU453
 880:pff.c         **** 				clst = (fs->fptr == 0) ?			/* On the top of the file? */
 2129               		.loc 1 880 7 is_stmt 0 view .LVU454
 2130 08d2 01F4      		brne .L104
 881:pff.c         **** 					fs->org_clust : get_fat(fs->curr_clust);
 2131               		.loc 1 881 5 is_stmt 1 view .LVU455
 882:pff.c         **** 				if (clst <= 1) goto fr_abort;
 2132               		.loc 1 882 20 is_stmt 0 view .LVU456
 2133 08d4 892B      		or r24,r25
 2134 08d6 8A2B      		or r24,r26
 2135 08d8 8B2B      		or r24,r27
 2136 08da 01F0      		breq .+2
 2137 08dc 00C0      		rjmp .L105
 882:pff.c         **** 				if (clst <= 1) goto fr_abort;
 2138               		.loc 1 882 20 discriminator 1 view .LVU457
 2139 08de 468D      		ldd r20,Z+30
 2140 08e0 578D      		ldd r21,Z+31
 2141 08e2 60A1      		ldd r22,Z+32
 2142 08e4 71A1      		ldd r23,Z+33
 2143               	.L106:
 2144               	.LVL131:
 883:pff.c         **** 				fs->curr_clust = clst;				/* Update current cluster */
 2145               		.loc 1 883 5 is_stmt 1 view .LVU458
 883:pff.c         **** 				fs->curr_clust = clst;				/* Update current cluster */
 2146               		.loc 1 883 8 is_stmt 0 view .LVU459
 2147 08e6 4230      		cpi r20,2
 2148 08e8 5105      		cpc r21,__zero_reg__
 2149 08ea 6105      		cpc r22,__zero_reg__
 2150 08ec 7105      		cpc r23,__zero_reg__
 2151 08ee 00F4      		brsh .+2
 2152 08f0 00C0      		rjmp .L107
 884:pff.c         **** 			}
 2153               		.loc 1 884 5 is_stmt 1 view .LVU460
 884:pff.c         **** 			}
 2154               		.loc 1 884 20 is_stmt 0 view .LVU461
 2155 08f2 ED81      		ldd r30,Y+5
 2156 08f4 FE81      		ldd r31,Y+6
 2157 08f6 42A3      		std Z+34,r20
 2158 08f8 53A3      		std Z+35,r21
 2159 08fa 64A3      		std Z+36,r22
 2160 08fc 75A3      		std Z+37,r23
 2161               	.LVL132:
 2162               	.L104:
 886:pff.c         **** 			if (!sect) goto fr_abort;
 2163               		.loc 1 886 4 is_stmt 1 view .LVU462
 886:pff.c         **** 			if (!sect) goto fr_abort;
 2164               		.loc 1 886 11 is_stmt 0 view .LVU463
 2165 08fe AD81      		ldd r26,Y+5
 2166 0900 BE81      		ldd r27,Y+6
 2167 0902 9296      		adiw r26,34
 2168 0904 8D91      		ld r24,X+
 2169 0906 9D91      		ld r25,X+
 2170 0908 0D90      		ld __tmp_reg__,X+
 2171 090a BC91      		ld r27,X
 2172 090c A02D      		mov r26,__tmp_reg__
 2173 090e 8983      		std Y+1,r24
 2174 0910 9A83      		std Y+2,r25
 2175 0912 AB83      		std Y+3,r26
 2176 0914 BC83      		std Y+4,r27
 2177 0916 BC01      		movw r22,r24
 2178 0918 CD01      		movw r24,r26
 2179 091a 0E94 0000 		call clust2sect
 2180               	.LVL133:
 2181 091e 462F      		mov r20,r22
 2182 0920 572F      		mov r21,r23
 2183 0922 BC01      		movw r22,r24
 2184               	.LVL134:
 887:pff.c         **** 			fs->dsect = sect + cs;
 2185               		.loc 1 887 4 is_stmt 1 view .LVU464
 887:pff.c         **** 			fs->dsect = sect + cs;
 2186               		.loc 1 887 7 is_stmt 0 view .LVU465
 2187 0924 4115      		cp r20,__zero_reg__
 2188 0926 5105      		cpc r21,__zero_reg__
 2189 0928 6105      		cpc r22,__zero_reg__
 2190 092a 7105      		cpc r23,__zero_reg__
 2191 092c 01F4      		brne .+2
 2192 092e 00C0      		rjmp .L107
 888:pff.c         **** 		}
 2193               		.loc 1 888 4 is_stmt 1 view .LVU466
 888:pff.c         **** 		}
 2194               		.loc 1 888 21 is_stmt 0 view .LVU467
 2195 0930 4D0D      		add r20,r13
 2196 0932 511D      		adc r21,__zero_reg__
 2197 0934 611D      		adc r22,__zero_reg__
 2198 0936 711D      		adc r23,__zero_reg__
 2199               	.LVL135:
 888:pff.c         **** 		}
 2200               		.loc 1 888 14 view .LVU468
 2201 0938 ED81      		ldd r30,Y+5
 2202 093a FE81      		ldd r31,Y+6
 2203 093c 46A3      		std Z+38,r20
 2204 093e 57A3      		std Z+39,r21
 2205 0940 60A7      		std Z+40,r22
 2206 0942 71A7      		std Z+41,r23
 2207               	.LVL136:
 2208               	.L103:
 890:pff.c         **** 		if (rcnt > btr) rcnt = btr;
 2209               		.loc 1 890 3 is_stmt 1 view .LVU469
 890:pff.c         **** 		if (rcnt > btr) rcnt = btr;
 2210               		.loc 1 890 10 is_stmt 0 view .LVU470
 2211 0944 AD81      		ldd r26,Y+5
 2212 0946 BE81      		ldd r27,Y+6
 2213 0948 5696      		adiw r26,22
 2214 094a 2D91      		ld r18,X+
 2215 094c 3C91      		ld r19,X
 2216 094e 3170      		andi r19,1
 890:pff.c         **** 		if (rcnt > btr) rcnt = btr;
 2217               		.loc 1 890 8 view .LVU471
 2218 0950 C101      		movw r24,r2
 2219 0952 821B      		sub r24,r18
 2220 0954 930B      		sbc r25,r19
 2221               	.LVL137:
 891:pff.c         **** 		dr = disk_readp(!buff ? 0 : rbuff, fs->dsect, (WORD)(fs->fptr % 512), rcnt);
 2222               		.loc 1 891 3 is_stmt 1 view .LVU472
 2223 0956 6701      		movw r12,r14
 2224 0958 8E15      		cp r24,r14
 2225 095a 9F05      		cpc r25,r15
 2226 095c 00F4      		brsh .L108
 2227               	.LVL138:
 891:pff.c         **** 		dr = disk_readp(!buff ? 0 : rbuff, fs->dsect, (WORD)(fs->fptr % 512), rcnt);
 2228               		.loc 1 891 3 is_stmt 0 view .LVU473
 2229 095e 6C01      		movw r12,r24
 2230               	.LVL139:
 2231               	.L108:
 892:pff.c         **** 		if (dr) goto fr_abort;
 2232               		.loc 1 892 3 is_stmt 1 view .LVU474
 892:pff.c         **** 		if (dr) goto fr_abort;
 2233               		.loc 1 892 8 is_stmt 0 view .LVU475
 2234 0960 ED81      		ldd r30,Y+5
 2235 0962 FE81      		ldd r31,Y+6
 2236 0964 46A1      		ldd r20,Z+38
 2237 0966 57A1      		ldd r21,Z+39
 2238 0968 60A5      		ldd r22,Z+40
 2239 096a 71A5      		ldd r23,Z+41
 2240 096c C401      		movw r24,r8
 2241 096e 4114      		cp r4,__zero_reg__
 2242 0970 5104      		cpc r5,__zero_reg__
 2243 0972 01F4      		brne .L109
 892:pff.c         **** 		if (dr) goto fr_abort;
 2244               		.loc 1 892 8 view .LVU476
 2245 0974 80E0      		ldi r24,0
 2246 0976 90E0      		ldi r25,0
 2247               	.L109:
 892:pff.c         **** 		if (dr) goto fr_abort;
 2248               		.loc 1 892 8 discriminator 4 view .LVU477
 2249 0978 8601      		movw r16,r12
 2250 097a 0E94 0000 		call disk_readp
 2251               	.LVL140:
 893:pff.c         **** 		fs->fptr += rcnt; rbuff += rcnt;			/* Update pointers and counters */
 2252               		.loc 1 893 3 is_stmt 1 discriminator 4 view .LVU478
 893:pff.c         **** 		fs->fptr += rcnt; rbuff += rcnt;			/* Update pointers and counters */
 2253               		.loc 1 893 6 is_stmt 0 discriminator 4 view .LVU479
 2254 097e 8111      		cpse r24,__zero_reg__
 2255 0980 00C0      		rjmp .L107
 894:pff.c         **** 		btr -= rcnt; *br += rcnt;
 2256               		.loc 1 894 3 is_stmt 1 view .LVU480
 894:pff.c         **** 		btr -= rcnt; *br += rcnt;
 2257               		.loc 1 894 12 is_stmt 0 view .LVU481
 2258 0982 ED81      		ldd r30,Y+5
 2259 0984 FE81      		ldd r31,Y+6
 2260 0986 8689      		ldd r24,Z+22
 2261 0988 9789      		ldd r25,Z+23
 2262 098a A08D      		ldd r26,Z+24
 2263 098c B18D      		ldd r27,Z+25
 2264               	.LVL141:
 894:pff.c         **** 		btr -= rcnt; *br += rcnt;
 2265               		.loc 1 894 12 view .LVU482
 2266 098e 8C0D      		add r24,r12
 2267 0990 9D1D      		adc r25,r13
 2268 0992 A11D      		adc r26,__zero_reg__
 2269 0994 B11D      		adc r27,__zero_reg__
 2270 0996 868B      		std Z+22,r24
 2271 0998 978B      		std Z+23,r25
 2272 099a A08F      		std Z+24,r26
 2273 099c B18F      		std Z+25,r27
 894:pff.c         **** 		btr -= rcnt; *br += rcnt;
 2274               		.loc 1 894 21 is_stmt 1 view .LVU483
 894:pff.c         **** 		btr -= rcnt; *br += rcnt;
 2275               		.loc 1 894 27 is_stmt 0 view .LVU484
 2276 099e 8C0C      		add r8,r12
 2277 09a0 9D1C      		adc r9,r13
 2278               	.LVL142:
 895:pff.c         **** 	}
 2279               		.loc 1 895 3 is_stmt 1 view .LVU485
 895:pff.c         **** 	}
 2280               		.loc 1 895 7 is_stmt 0 view .LVU486
 2281 09a2 EC18      		sub r14,r12
 2282 09a4 FD08      		sbc r15,r13
 2283               	.LVL143:
 895:pff.c         **** 	}
 2284               		.loc 1 895 16 is_stmt 1 view .LVU487
 895:pff.c         **** 	}
 2285               		.loc 1 895 20 is_stmt 0 view .LVU488
 2286 09a6 D501      		movw r26,r10
 2287 09a8 8D91      		ld r24,X+
 2288 09aa 9C91      		ld r25,X
 2289 09ac 1197      		sbiw r26,1
 2290 09ae C80E      		add r12,r24
 2291 09b0 D91E      		adc r13,r25
 2292               	.LVL144:
 895:pff.c         **** 	}
 2293               		.loc 1 895 20 view .LVU489
 2294 09b2 CD92      		st X+,r12
 2295 09b4 DC92      		st X,r13
 2296 09b6 00C0      		rjmp .L102
 2297               	.LVL145:
 2298               	.L105:
 882:pff.c         **** 				if (clst <= 1) goto fr_abort;
 2299               		.loc 1 882 22 discriminator 2 view .LVU490
 2300 09b8 AD81      		ldd r26,Y+5
 2301 09ba BE81      		ldd r27,Y+6
 2302 09bc 9296      		adiw r26,34
 2303 09be 8D91      		ld r24,X+
 2304 09c0 9D91      		ld r25,X+
 2305 09c2 0D90      		ld __tmp_reg__,X+
 2306 09c4 BC91      		ld r27,X
 2307 09c6 A02D      		mov r26,__tmp_reg__
 2308 09c8 8983      		std Y+1,r24
 2309 09ca 9A83      		std Y+2,r25
 2310 09cc AB83      		std Y+3,r26
 2311 09ce BC83      		std Y+4,r27
 2312 09d0 BC01      		movw r22,r24
 2313 09d2 CD01      		movw r24,r26
 2314 09d4 0E94 0000 		call get_fat
 2315               	.LVL146:
 2316 09d8 462F      		mov r20,r22
 2317 09da 572F      		mov r21,r23
 2318 09dc BC01      		movw r22,r24
 2319 09de 00C0      		rjmp .L106
 2320               	.LVL147:
 2321               	.L107:
 2322               	.LDL1:
 901:pff.c         **** 	return FR_DISK_ERR;
 2323               		.loc 1 901 2 is_stmt 1 view .LVU491
 901:pff.c         **** 	return FR_DISK_ERR;
 2324               		.loc 1 901 11 is_stmt 0 view .LVU492
 2325 09e0 ED81      		ldd r30,Y+5
 2326 09e2 FE81      		ldd r31,Y+6
 2327 09e4 1182      		std Z+1,__zero_reg__
 902:pff.c         **** }
 2328               		.loc 1 902 2 is_stmt 1 view .LVU493
 902:pff.c         **** }
 2329               		.loc 1 902 9 is_stmt 0 view .LVU494
 2330 09e6 00C0      		rjmp .L99
 2331               	.LVL148:
 2332               	.L111:
 870:pff.c         **** 	if (!(fs->flag & FA_OPENED))		/* Check if opened */
 2333               		.loc 1 870 18 view .LVU495
 2334 09e8 96E0      		ldi r25,lo8(6)
 2335 09ea 792E      		mov r7,r25
 2336 09ec 00C0      		rjmp .L99
 2337               	.LVL149:
 2338               	.L112:
 872:pff.c         **** 
 2339               		.loc 1 872 10 view .LVU496
 2340 09ee 85E0      		ldi r24,lo8(5)
 2341 09f0 782E      		mov r7,r24
 2342 09f2 00C0      		rjmp .L99
 2343               		.cfi_endproc
 2344               	.LFE12:
 2346               		.local	FatFs
 2347               		.comm	FatFs,2,1
 2348               	.Letext0:
 2349               		.file 2 "integer.h"
 2350               		.file 3 "pff.h"
 2351               		.file 4 "diskio.h"
 2352               		.file 5 "<built-in>"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 pff.c
     /tmp/ccUFSYby.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccUFSYby.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccUFSYby.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccUFSYby.s:5      *ABS*:000000000000003b __RAMPZ__
     /tmp/ccUFSYby.s:6      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccUFSYby.s:7      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccUFSYby.s:12     .text:0000000000000000 clust2sect
                             .bss:0000000000000000 FatFs
     /tmp/ccUFSYby.s:127    .text:0000000000000090 dir_rewind
     /tmp/ccUFSYby.s:263    .text:000000000000011a get_fat
     /tmp/ccUFSYby.s:441    .text:00000000000001fa check_fs
     /tmp/ccUFSYby.s:593    .text:0000000000000288 pf_mount
     /tmp/ccUFSYby.s:1066   .text:00000000000004ba pf_open
     /tmp/ccUFSYby.s:1878   .text:00000000000007d4 pf_read

UNDEFINED SYMBOLS
__muluhisi3
disk_readp
disk_initialize
__udivmodsi4
memset
__do_clear_bss
