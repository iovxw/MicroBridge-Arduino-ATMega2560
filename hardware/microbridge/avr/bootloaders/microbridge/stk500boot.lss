
stk500boot.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800200  0003f7da  0000186e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000017da  0003e000  0003e000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000013b  00800212  00800212  00001880  2**0
                  ALLOC
  3 .stab         00000438  00000000  00000000  00001880  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000089  00000000  00000000  00001cb8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000012  00000000  00000000  00001d41  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001d54  2**2
                  CONTENTS, READONLY, OCTETS
  7 .debug_aranges 00000070  00000000  00000000  00001d94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_info   00002cd6  00000000  00000000  00001e04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_abbrev 0000126f  00000000  00000000  00004ada  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_line   00002f7b  00000000  00000000  00005d49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_frame  000003a0  00000000  00000000  00008cc4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_str    00000a81  00000000  00000000  00009064  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_loc    00002b45  00000000  00000000  00009ae5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 00000210  00000000  00000000  0000c62a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0003e000 <__vectors>:
   3e000:	77 c0       	rjmp	.+238    	; 0x3e0f0 <__ctors_end>
   3e002:	00 00       	nop
   3e004:	9c c0       	rjmp	.+312    	; 0x3e13e <__bad_interrupt>
   3e006:	00 00       	nop
   3e008:	9a c0       	rjmp	.+308    	; 0x3e13e <__bad_interrupt>
   3e00a:	00 00       	nop
   3e00c:	98 c0       	rjmp	.+304    	; 0x3e13e <__bad_interrupt>
   3e00e:	00 00       	nop
   3e010:	96 c0       	rjmp	.+300    	; 0x3e13e <__bad_interrupt>
   3e012:	00 00       	nop
   3e014:	94 c0       	rjmp	.+296    	; 0x3e13e <__bad_interrupt>
   3e016:	00 00       	nop
   3e018:	92 c0       	rjmp	.+292    	; 0x3e13e <__bad_interrupt>
   3e01a:	00 00       	nop
   3e01c:	90 c0       	rjmp	.+288    	; 0x3e13e <__bad_interrupt>
   3e01e:	00 00       	nop
   3e020:	8e c0       	rjmp	.+284    	; 0x3e13e <__bad_interrupt>
   3e022:	00 00       	nop
   3e024:	8c c0       	rjmp	.+280    	; 0x3e13e <__bad_interrupt>
   3e026:	00 00       	nop
   3e028:	8a c0       	rjmp	.+276    	; 0x3e13e <__bad_interrupt>
   3e02a:	00 00       	nop
   3e02c:	88 c0       	rjmp	.+272    	; 0x3e13e <__bad_interrupt>
   3e02e:	00 00       	nop
   3e030:	86 c0       	rjmp	.+268    	; 0x3e13e <__bad_interrupt>
   3e032:	00 00       	nop
   3e034:	84 c0       	rjmp	.+264    	; 0x3e13e <__bad_interrupt>
   3e036:	00 00       	nop
   3e038:	82 c0       	rjmp	.+260    	; 0x3e13e <__bad_interrupt>
   3e03a:	00 00       	nop
   3e03c:	80 c0       	rjmp	.+256    	; 0x3e13e <__bad_interrupt>
   3e03e:	00 00       	nop
   3e040:	7e c0       	rjmp	.+252    	; 0x3e13e <__bad_interrupt>
   3e042:	00 00       	nop
   3e044:	7c c0       	rjmp	.+248    	; 0x3e13e <__bad_interrupt>
   3e046:	00 00       	nop
   3e048:	7a c0       	rjmp	.+244    	; 0x3e13e <__bad_interrupt>
   3e04a:	00 00       	nop
   3e04c:	78 c0       	rjmp	.+240    	; 0x3e13e <__bad_interrupt>
   3e04e:	00 00       	nop
   3e050:	76 c0       	rjmp	.+236    	; 0x3e13e <__bad_interrupt>
   3e052:	00 00       	nop
   3e054:	74 c0       	rjmp	.+232    	; 0x3e13e <__bad_interrupt>
   3e056:	00 00       	nop
   3e058:	72 c0       	rjmp	.+228    	; 0x3e13e <__bad_interrupt>
   3e05a:	00 00       	nop
   3e05c:	70 c0       	rjmp	.+224    	; 0x3e13e <__bad_interrupt>
   3e05e:	00 00       	nop
   3e060:	6e c0       	rjmp	.+220    	; 0x3e13e <__bad_interrupt>
   3e062:	00 00       	nop
   3e064:	6c c0       	rjmp	.+216    	; 0x3e13e <__bad_interrupt>
   3e066:	00 00       	nop
   3e068:	6a c0       	rjmp	.+212    	; 0x3e13e <__bad_interrupt>
   3e06a:	00 00       	nop
   3e06c:	68 c0       	rjmp	.+208    	; 0x3e13e <__bad_interrupt>
   3e06e:	00 00       	nop
   3e070:	66 c0       	rjmp	.+204    	; 0x3e13e <__bad_interrupt>
   3e072:	00 00       	nop
   3e074:	64 c0       	rjmp	.+200    	; 0x3e13e <__bad_interrupt>
   3e076:	00 00       	nop
   3e078:	62 c0       	rjmp	.+196    	; 0x3e13e <__bad_interrupt>
   3e07a:	00 00       	nop
   3e07c:	60 c0       	rjmp	.+192    	; 0x3e13e <__bad_interrupt>
   3e07e:	00 00       	nop
   3e080:	5e c0       	rjmp	.+188    	; 0x3e13e <__bad_interrupt>
   3e082:	00 00       	nop
   3e084:	5c c0       	rjmp	.+184    	; 0x3e13e <__bad_interrupt>
   3e086:	00 00       	nop
   3e088:	5a c0       	rjmp	.+180    	; 0x3e13e <__bad_interrupt>
   3e08a:	00 00       	nop
   3e08c:	58 c0       	rjmp	.+176    	; 0x3e13e <__bad_interrupt>
   3e08e:	00 00       	nop
   3e090:	56 c0       	rjmp	.+172    	; 0x3e13e <__bad_interrupt>
   3e092:	00 00       	nop
   3e094:	54 c0       	rjmp	.+168    	; 0x3e13e <__bad_interrupt>
   3e096:	00 00       	nop
   3e098:	52 c0       	rjmp	.+164    	; 0x3e13e <__bad_interrupt>
   3e09a:	00 00       	nop
   3e09c:	50 c0       	rjmp	.+160    	; 0x3e13e <__bad_interrupt>
   3e09e:	00 00       	nop
   3e0a0:	4e c0       	rjmp	.+156    	; 0x3e13e <__bad_interrupt>
   3e0a2:	00 00       	nop
   3e0a4:	4c c0       	rjmp	.+152    	; 0x3e13e <__bad_interrupt>
   3e0a6:	00 00       	nop
   3e0a8:	4a c0       	rjmp	.+148    	; 0x3e13e <__bad_interrupt>
   3e0aa:	00 00       	nop
   3e0ac:	48 c0       	rjmp	.+144    	; 0x3e13e <__bad_interrupt>
   3e0ae:	00 00       	nop
   3e0b0:	46 c0       	rjmp	.+140    	; 0x3e13e <__bad_interrupt>
   3e0b2:	00 00       	nop
   3e0b4:	44 c0       	rjmp	.+136    	; 0x3e13e <__bad_interrupt>
   3e0b6:	00 00       	nop
   3e0b8:	42 c0       	rjmp	.+132    	; 0x3e13e <__bad_interrupt>
   3e0ba:	00 00       	nop
   3e0bc:	40 c0       	rjmp	.+128    	; 0x3e13e <__bad_interrupt>
   3e0be:	00 00       	nop
   3e0c0:	3e c0       	rjmp	.+124    	; 0x3e13e <__bad_interrupt>
   3e0c2:	00 00       	nop
   3e0c4:	3c c0       	rjmp	.+120    	; 0x3e13e <__bad_interrupt>
   3e0c6:	00 00       	nop
   3e0c8:	3a c0       	rjmp	.+116    	; 0x3e13e <__bad_interrupt>
   3e0ca:	00 00       	nop
   3e0cc:	38 c0       	rjmp	.+112    	; 0x3e13e <__bad_interrupt>
   3e0ce:	00 00       	nop
   3e0d0:	36 c0       	rjmp	.+108    	; 0x3e13e <__bad_interrupt>
   3e0d2:	00 00       	nop
   3e0d4:	34 c0       	rjmp	.+104    	; 0x3e13e <__bad_interrupt>
   3e0d6:	00 00       	nop
   3e0d8:	32 c0       	rjmp	.+100    	; 0x3e13e <__bad_interrupt>
   3e0da:	00 00       	nop
   3e0dc:	30 c0       	rjmp	.+96     	; 0x3e13e <__bad_interrupt>
   3e0de:	00 00       	nop
   3e0e0:	2e c0       	rjmp	.+92     	; 0x3e13e <__bad_interrupt>
	...

0003e0e4 <gTextMsg_CPU_Name>:
   3e0e4:	41 54 6d 65 67 61 32 35 36 30 00 00                 ATmega2560..

0003e0f0 <__ctors_end>:
   3e0f0:	11 24       	eor	r1, r1
   3e0f2:	1f be       	out	0x3f, r1	; 63
   3e0f4:	cf ef       	ldi	r28, 0xFF	; 255
   3e0f6:	d1 e2       	ldi	r29, 0x21	; 33
   3e0f8:	de bf       	out	0x3e, r29	; 62
   3e0fa:	cd bf       	out	0x3d, r28	; 61
   3e0fc:	01 e0       	ldi	r16, 0x01	; 1
   3e0fe:	0c bf       	out	0x3c, r16	; 60

0003e100 <__do_copy_data>:
   3e100:	12 e0       	ldi	r17, 0x02	; 2
   3e102:	a0 e0       	ldi	r26, 0x00	; 0
   3e104:	b2 e0       	ldi	r27, 0x02	; 2
   3e106:	ea ed       	ldi	r30, 0xDA	; 218
   3e108:	f7 ef       	ldi	r31, 0xF7	; 247
   3e10a:	03 e0       	ldi	r16, 0x03	; 3
   3e10c:	0b bf       	out	0x3b, r16	; 59
   3e10e:	02 c0       	rjmp	.+4      	; 0x3e114 <__do_copy_data+0x14>
   3e110:	07 90       	elpm	r0, Z+
   3e112:	0d 92       	st	X+, r0
   3e114:	a2 31       	cpi	r26, 0x12	; 18
   3e116:	b1 07       	cpc	r27, r17
   3e118:	d9 f7       	brne	.-10     	; 0x3e110 <__do_copy_data+0x10>

0003e11a <__do_clear_bss>:
   3e11a:	23 e0       	ldi	r18, 0x03	; 3
   3e11c:	a2 e1       	ldi	r26, 0x12	; 18
   3e11e:	b2 e0       	ldi	r27, 0x02	; 2
   3e120:	01 c0       	rjmp	.+2      	; 0x3e124 <.do_clear_bss_start>

0003e122 <.do_clear_bss_loop>:
   3e122:	1d 92       	st	X+, r1

0003e124 <.do_clear_bss_start>:
   3e124:	ad 34       	cpi	r26, 0x4D	; 77
   3e126:	b2 07       	cpc	r27, r18
   3e128:	e1 f7       	brne	.-8      	; 0x3e122 <.do_clear_bss_loop>
   3e12a:	df d6       	rcall	.+3518   	; 0x3eeea <main>
   3e12c:	0d 94 eb fb 	jmp	0x3f7d6	; 0x3f7d6 <_exit>

0003e130 <__jumpMain>:

	asm volatile ( ".set __stack, %0" :: "i" (RAMEND) );

//*	set stack pointer to top of RAM

	asm volatile ( "ldi	16, %0" :: "i" (RAMEND >> 8) );
   3e130:	01 e2       	ldi	r16, 0x21	; 33
	asm volatile ( "out %0,16" :: "i" (AVR_STACK_POINTER_HI_ADDR) );
   3e132:	0e bf       	out	0x3e, r16	; 62

	asm volatile ( "ldi	16, %0" :: "i" (RAMEND & 0x0ff) );
   3e134:	0f ef       	ldi	r16, 0xFF	; 255
	asm volatile ( "out %0,16" :: "i" (AVR_STACK_POINTER_LO_ADDR) );
   3e136:	0d bf       	out	0x3d, r16	; 61

	asm volatile ( "clr __zero_reg__" );									// GCC depends on register r1 set to 0
   3e138:	11 24       	eor	r1, r1
	asm volatile ( "out %0, __zero_reg__" :: "I" (_SFR_IO_ADDR(SREG)) );	// set SREG to 0
   3e13a:	1f be       	out	0x3f, r1	; 63
	asm volatile ( "jmp main");												// jump to main()
   3e13c:	d6 c6       	rjmp	.+3500   	; 0x3eeea <main>

0003e13e <__bad_interrupt>:
   3e13e:	60 cf       	rjmp	.-320    	; 0x3e000 <__vectors>

0003e140 <sendchar>:
/*
 * send single byte to USART, wait until transmission is completed
 */
static void sendchar(char c)
{
	UART_DATA_REG	=	c;										// prepare transmission
   3e140:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
	while (!(UART_STATUS_REG & (1 << UART_TRANSMIT_COMPLETE)));	// wait until byte sent
   3e144:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
   3e148:	86 ff       	sbrs	r24, 6
   3e14a:	fc cf       	rjmp	.-8      	; 0x3e144 <sendchar+0x4>
	UART_STATUS_REG |= (1 << UART_TRANSMIT_COMPLETE);			// delete TXCflag
   3e14c:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
   3e150:	80 64       	ori	r24, 0x40	; 64
   3e152:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
}
   3e156:	08 95       	ret

0003e158 <delay_ms>:
{
   3e158:	9c 01       	movw	r18, r24
	for (i=0;i<timedelay;i++)
   3e15a:	90 e0       	ldi	r25, 0x00	; 0
   3e15c:	80 e0       	ldi	r24, 0x00	; 0
   3e15e:	82 17       	cp	r24, r18
   3e160:	93 07       	cpc	r25, r19
   3e162:	09 f4       	brne	.+2      	; 0x3e166 <delay_ms+0xe>
}
   3e164:	08 95       	ret
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
   3e166:	ef ec       	ldi	r30, 0xCF	; 207
   3e168:	f7 e0       	ldi	r31, 0x07	; 7
   3e16a:	31 97       	sbiw	r30, 0x01	; 1
   3e16c:	f1 f7       	brne	.-4      	; 0x3e16a <delay_ms+0x12>
   3e16e:	00 c0       	rjmp	.+0      	; 0x3e170 <delay_ms+0x18>
   3e170:	00 00       	nop
	for (i=0;i<timedelay;i++)
   3e172:	01 96       	adiw	r24, 0x01	; 1
   3e174:	f4 cf       	rjmp	.-24     	; 0x3e15e <delay_ms+0x6>

0003e176 <PrintFromPROGMEM>:



//************************************************************************
void	PrintFromPROGMEM(const void *dataPtr, unsigned char offset)
{
   3e176:	cf 93       	push	r28
   3e178:	df 93       	push	r29
char	theChar;

	dataPtr		+=	offset;
   3e17a:	ec 01       	movw	r28, r24
   3e17c:	c6 0f       	add	r28, r22
   3e17e:	d1 1d       	adc	r29, r1

	do {
	#if (FLASHEND > 0x10000)
		theChar	=	pgm_read_byte_far((uint16_t)dataPtr++);
   3e180:	ce 01       	movw	r24, r28
   3e182:	b0 e0       	ldi	r27, 0x00	; 0
   3e184:	a0 e0       	ldi	r26, 0x00	; 0
   3e186:	ab bf       	out	0x3b, r26	; 59
   3e188:	fc 01       	movw	r30, r24
   3e18a:	87 91       	elpm	r24, Z+
	#else
		theChar	=	pgm_read_byte_near((uint16_t)dataPtr++);
	#endif
		if (theChar != 0)
   3e18c:	88 23       	and	r24, r24
   3e18e:	19 f0       	breq	.+6      	; 0x3e196 <PrintFromPROGMEM+0x20>
		theChar	=	pgm_read_byte_far((uint16_t)dataPtr++);
   3e190:	21 96       	adiw	r28, 0x01	; 1
		{
			sendchar(theChar);
   3e192:	d6 df       	rcall	.-84     	; 0x3e140 <sendchar>
		}
	} while (theChar != 0);
   3e194:	f5 cf       	rjmp	.-22     	; 0x3e180 <PrintFromPROGMEM+0xa>
}
   3e196:	df 91       	pop	r29
   3e198:	cf 91       	pop	r28
   3e19a:	08 95       	ret

0003e19c <PrintNewLine>:

//************************************************************************
void	PrintNewLine(void)
{
	sendchar(0x0d);
   3e19c:	8d e0       	ldi	r24, 0x0D	; 13
   3e19e:	d0 df       	rcall	.-96     	; 0x3e140 <sendchar>
	sendchar(0x0a);
   3e1a0:	8a e0       	ldi	r24, 0x0A	; 10
   3e1a2:	ce cf       	rjmp	.-100    	; 0x3e140 <sendchar>

0003e1a4 <PrintFromPROGMEMln>:


//************************************************************************
void	PrintFromPROGMEMln(const void *dataPtr, unsigned char offset)
{
	PrintFromPROGMEM(dataPtr, offset);
   3e1a4:	e8 df       	rcall	.-48     	; 0x3e176 <PrintFromPROGMEM>
   3e1a6:	fa cf       	rjmp	.-12     	; 0x3e19c <PrintNewLine>

0003e1a8 <PrintString>:
}


//************************************************************************
void	PrintString(char *textString)
{
   3e1a8:	cf 93       	push	r28
   3e1aa:	df 93       	push	r29

	theChar		=	1;
	ii			=	0;
	while (theChar != 0)
	{
		theChar	=	textString[ii];
   3e1ac:	ec 01       	movw	r28, r24
		if (theChar != 0)
   3e1ae:	89 91       	ld	r24, Y+
   3e1b0:	88 23       	and	r24, r24
		{
			sendchar(theChar);
   3e1b2:	11 f0       	breq	.+4      	; 0x3e1b8 <PrintString+0x10>
   3e1b4:	c5 df       	rcall	.-118    	; 0x3e140 <sendchar>
	while (theChar != 0)
   3e1b6:	fb cf       	rjmp	.-10     	; 0x3e1ae <PrintString+0x6>
		}
		ii++;
	}
}
   3e1b8:	df 91       	pop	r29
   3e1ba:	cf 91       	pop	r28
   3e1bc:	08 95       	ret

0003e1be <PrintHexByte>:

//************************************************************************
void	PrintHexByte(unsigned char theByte)
{
   3e1be:	cf 93       	push	r28
   3e1c0:	c8 2f       	mov	r28, r24
char	theChar;

	theChar	=	0x30 + ((theByte >> 4) & 0x0f);
   3e1c2:	98 2f       	mov	r25, r24
   3e1c4:	92 95       	swap	r25
   3e1c6:	9f 70       	andi	r25, 0x0F	; 15
   3e1c8:	80 e3       	ldi	r24, 0x30	; 48
	if (theChar > 0x39)
   3e1ca:	89 0f       	add	r24, r25
   3e1cc:	8a 33       	cpi	r24, 0x3A	; 58
	{
		theChar	+=	7;
   3e1ce:	10 f0       	brcs	.+4      	; 0x3e1d4 <PrintHexByte+0x16>
   3e1d0:	87 e3       	ldi	r24, 0x37	; 55
	}
	sendchar(theChar );
   3e1d2:	89 0f       	add	r24, r25
   3e1d4:	b5 df       	rcall	.-150    	; 0x3e140 <sendchar>

	theChar	=	0x30 + (theByte & 0x0f);
   3e1d6:	cf 70       	andi	r28, 0x0F	; 15
   3e1d8:	80 e3       	ldi	r24, 0x30	; 48
	if (theChar > 0x39)
   3e1da:	8c 0f       	add	r24, r28
   3e1dc:	8a 33       	cpi	r24, 0x3A	; 58
	{
		theChar	+=	7;
   3e1de:	10 f0       	brcs	.+4      	; 0x3e1e4 <PrintHexByte+0x26>
   3e1e0:	87 e3       	ldi	r24, 0x37	; 55
	}
	sendchar(theChar );
}
   3e1e2:	8c 0f       	add	r24, r28
	sendchar(theChar );
   3e1e4:	cf 91       	pop	r28
   3e1e6:	ac cf       	rjmp	.-168    	; 0x3e140 <sendchar>

0003e1e8 <PrintDecInt>:

//************************************************************************
void	PrintDecInt(int theNumber, int digitCnt)
{
   3e1e8:	0f 93       	push	r16
   3e1ea:	1f 93       	push	r17
   3e1ec:	cf 93       	push	r28
   3e1ee:	df 93       	push	r29
   3e1f0:	ec 01       	movw	r28, r24
   3e1f2:	8b 01       	movw	r16, r22
int	theChar;
int	myNumber;

	myNumber	=	theNumber;

	if ((myNumber > 100) || (digitCnt >= 3))
   3e1f4:	85 36       	cpi	r24, 0x65	; 101
   3e1f6:	91 05       	cpc	r25, r1
   3e1f8:	1c f4       	brge	.+6      	; 0x3e200 <PrintDecInt+0x18>
   3e1fa:	63 30       	cpi	r22, 0x03	; 3
   3e1fc:	71 05       	cpc	r23, r1
	{
		theChar		=	0x30 + myNumber / 100;
   3e1fe:	44 f0       	brlt	.+16     	; 0x3e210 <PrintDecInt+0x28>
   3e200:	ce 01       	movw	r24, r28
   3e202:	64 e6       	ldi	r22, 0x64	; 100
   3e204:	70 e0       	ldi	r23, 0x00	; 0
   3e206:	0f 94 65 fb 	call	0x3f6ca	; 0x3f6ca <__divmodhi4>
		sendchar(theChar );
   3e20a:	80 e3       	ldi	r24, 0x30	; 48
   3e20c:	86 0f       	add	r24, r22
   3e20e:	98 df       	rcall	.-208    	; 0x3e140 <sendchar>
	}

	if ((myNumber > 10) || (digitCnt >= 2))
   3e210:	cb 30       	cpi	r28, 0x0B	; 11
   3e212:	d1 05       	cpc	r29, r1
   3e214:	1c f4       	brge	.+6      	; 0x3e21c <PrintDecInt+0x34>
   3e216:	02 30       	cpi	r16, 0x02	; 2
   3e218:	11 05       	cpc	r17, r1
   3e21a:	64 f0       	brlt	.+24     	; 0x3e234 <PrintDecInt+0x4c>
	{
		theChar	=	0x30  + ((myNumber % 100) / 10 );
   3e21c:	ce 01       	movw	r24, r28
   3e21e:	64 e6       	ldi	r22, 0x64	; 100
   3e220:	70 e0       	ldi	r23, 0x00	; 0
   3e222:	0f 94 65 fb 	call	0x3f6ca	; 0x3f6ca <__divmodhi4>
   3e226:	6a e0       	ldi	r22, 0x0A	; 10
   3e228:	70 e0       	ldi	r23, 0x00	; 0
   3e22a:	0f 94 65 fb 	call	0x3f6ca	; 0x3f6ca <__divmodhi4>
		sendchar(theChar );
   3e22e:	80 e3       	ldi	r24, 0x30	; 48
   3e230:	86 0f       	add	r24, r22
   3e232:	86 df       	rcall	.-244    	; 0x3e140 <sendchar>
	}
	theChar	=	0x30 + (myNumber % 10);
   3e234:	ce 01       	movw	r24, r28
   3e236:	6a e0       	ldi	r22, 0x0A	; 10
   3e238:	70 e0       	ldi	r23, 0x00	; 0
   3e23a:	0f 94 65 fb 	call	0x3f6ca	; 0x3f6ca <__divmodhi4>
	sendchar(theChar );
}
   3e23e:	80 5d       	subi	r24, 0xD0	; 208
   3e240:	df 91       	pop	r29
   3e242:	cf 91       	pop	r28
   3e244:	1f 91       	pop	r17
	sendchar(theChar );
   3e246:	0f 91       	pop	r16
   3e248:	7b cf       	rjmp	.-266    	; 0x3e140 <sendchar>

0003e24a <clust2sect>:

static
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	CLUST clst		/* Cluster# to be converted */
)
{
   3e24a:	cf 93       	push	r28
   3e24c:	df 93       	push	r29
   3e24e:	00 d0       	rcall	.+0      	; 0x3e250 <clust2sect+0x6>
   3e250:	0f 92       	push	r0
   3e252:	cd b7       	in	r28, 0x3d	; 61
   3e254:	de b7       	in	r29, 0x3e	; 62
   3e256:	69 83       	std	Y+1, r22	; 0x01
   3e258:	7a 83       	std	Y+2, r23	; 0x02
   3e25a:	8b 83       	std	Y+3, r24	; 0x03
   3e25c:	9c 83       	std	Y+4, r25	; 0x04
	FATFS *fs = FatFs;
   3e25e:	e0 91 4a 03 	lds	r30, 0x034A	; 0x80034a <FatFs>
   3e262:	f0 91 4b 03 	lds	r31, 0x034B	; 0x80034b <FatFs+0x1>


	clst -= 2;
   3e266:	9b 01       	movw	r18, r22
   3e268:	ac 01       	movw	r20, r24
   3e26a:	22 50       	subi	r18, 0x02	; 2
   3e26c:	31 09       	sbc	r19, r1
   3e26e:	41 09       	sbc	r20, r1
   3e270:	51 09       	sbc	r21, r1
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
   3e272:	86 81       	ldd	r24, Z+6	; 0x06
   3e274:	97 81       	ldd	r25, Z+7	; 0x07
   3e276:	a0 85       	ldd	r26, Z+8	; 0x08
   3e278:	b1 85       	ldd	r27, Z+9	; 0x09
   3e27a:	02 97       	sbiw	r24, 0x02	; 2
   3e27c:	a1 09       	sbc	r26, r1
   3e27e:	b1 09       	sbc	r27, r1
   3e280:	28 17       	cp	r18, r24
   3e282:	39 07       	cpc	r19, r25
   3e284:	4a 07       	cpc	r20, r26
   3e286:	5b 07       	cpc	r21, r27
   3e288:	18 f5       	brcc	.+70     	; 0x3e2d0 <clust2sect+0x86>
	return (DWORD)clst * fs->csize + fs->database;
   3e28a:	a2 81       	ldd	r26, Z+2	; 0x02
   3e28c:	b0 e0       	ldi	r27, 0x00	; 0
   3e28e:	0f 94 a1 fb 	call	0x3f742	; 0x3f742 <__muluhisi3>
   3e292:	69 83       	std	Y+1, r22	; 0x01
   3e294:	7a 83       	std	Y+2, r23	; 0x02
   3e296:	8b 83       	std	Y+3, r24	; 0x03
   3e298:	9c 83       	std	Y+4, r25	; 0x04
   3e29a:	82 89       	ldd	r24, Z+18	; 0x12
   3e29c:	93 89       	ldd	r25, Z+19	; 0x13
   3e29e:	a4 89       	ldd	r26, Z+20	; 0x14
   3e2a0:	b5 89       	ldd	r27, Z+21	; 0x15
   3e2a2:	29 81       	ldd	r18, Y+1	; 0x01
   3e2a4:	3a 81       	ldd	r19, Y+2	; 0x02
   3e2a6:	4b 81       	ldd	r20, Y+3	; 0x03
   3e2a8:	5c 81       	ldd	r21, Y+4	; 0x04
   3e2aa:	28 0f       	add	r18, r24
   3e2ac:	39 1f       	adc	r19, r25
   3e2ae:	4a 1f       	adc	r20, r26
   3e2b0:	5b 1f       	adc	r21, r27
   3e2b2:	29 83       	std	Y+1, r18	; 0x01
   3e2b4:	3a 83       	std	Y+2, r19	; 0x02
   3e2b6:	4b 83       	std	Y+3, r20	; 0x03
   3e2b8:	5c 83       	std	Y+4, r21	; 0x04
}
   3e2ba:	69 81       	ldd	r22, Y+1	; 0x01
   3e2bc:	7a 81       	ldd	r23, Y+2	; 0x02
   3e2be:	8b 81       	ldd	r24, Y+3	; 0x03
   3e2c0:	9c 81       	ldd	r25, Y+4	; 0x04
   3e2c2:	0f 90       	pop	r0
   3e2c4:	0f 90       	pop	r0
   3e2c6:	0f 90       	pop	r0
   3e2c8:	0f 90       	pop	r0
   3e2ca:	df 91       	pop	r29
   3e2cc:	cf 91       	pop	r28
   3e2ce:	08 95       	ret
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
   3e2d0:	19 82       	std	Y+1, r1	; 0x01
   3e2d2:	1a 82       	std	Y+2, r1	; 0x02
   3e2d4:	1b 82       	std	Y+3, r1	; 0x03
   3e2d6:	1c 82       	std	Y+4, r1	; 0x04
   3e2d8:	f0 cf       	rjmp	.-32     	; 0x3e2ba <clust2sect+0x70>

0003e2da <dir_rewind>:

static
FRESULT dir_rewind (
	DIR *dj			/* Pointer to directory object */
)
{
   3e2da:	0f 93       	push	r16
   3e2dc:	1f 93       	push	r17
   3e2de:	cf 93       	push	r28
   3e2e0:	df 93       	push	r29
   3e2e2:	ec 01       	movw	r28, r24
	CLUST clst;
	FATFS *fs = FatFs;
   3e2e4:	e0 91 4a 03 	lds	r30, 0x034A	; 0x80034a <FatFs>
   3e2e8:	f0 91 4b 03 	lds	r31, 0x034B	; 0x80034b <FatFs+0x1>


	dj->index = 0;
   3e2ec:	19 82       	std	Y+1, r1	; 0x01
   3e2ee:	18 82       	st	Y, r1
	clst = dj->sclust;
   3e2f0:	6c 81       	ldd	r22, Y+4	; 0x04
   3e2f2:	7d 81       	ldd	r23, Y+5	; 0x05
   3e2f4:	8e 81       	ldd	r24, Y+6	; 0x06
   3e2f6:	9f 81       	ldd	r25, Y+7	; 0x07
	if (clst == 1 || clst >= fs->n_fatent)	/* Check start cluster range */
   3e2f8:	61 30       	cpi	r22, 0x01	; 1
   3e2fa:	71 05       	cpc	r23, r1
   3e2fc:	81 05       	cpc	r24, r1
   3e2fe:	91 05       	cpc	r25, r1
   3e300:	71 f1       	breq	.+92     	; 0x3e35e <dir_rewind+0x84>
   3e302:	06 81       	ldd	r16, Z+6	; 0x06
   3e304:	17 81       	ldd	r17, Z+7	; 0x07
   3e306:	20 85       	ldd	r18, Z+8	; 0x08
   3e308:	31 85       	ldd	r19, Z+9	; 0x09
   3e30a:	60 17       	cp	r22, r16
   3e30c:	71 07       	cpc	r23, r17
   3e30e:	82 07       	cpc	r24, r18
   3e310:	93 07       	cpc	r25, r19
   3e312:	28 f5       	brcc	.+74     	; 0x3e35e <dir_rewind+0x84>
		return FR_DISK_ERR;
	if (_FS_FAT32 && !clst && fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
   3e314:	61 15       	cp	r22, r1
   3e316:	71 05       	cpc	r23, r1
   3e318:	81 05       	cpc	r24, r1
   3e31a:	91 05       	cpc	r25, r1
   3e31c:	39 f4       	brne	.+14     	; 0x3e32c <dir_rewind+0x52>
   3e31e:	20 81       	ld	r18, Z
   3e320:	23 30       	cpi	r18, 0x03	; 3
   3e322:	21 f4       	brne	.+8      	; 0x3e32c <dir_rewind+0x52>
		clst = (CLUST)fs->dirbase;
   3e324:	66 85       	ldd	r22, Z+14	; 0x0e
   3e326:	77 85       	ldd	r23, Z+15	; 0x0f
   3e328:	80 89       	ldd	r24, Z+16	; 0x10
   3e32a:	91 89       	ldd	r25, Z+17	; 0x11
	dj->clust = clst;						/* Current cluster */
   3e32c:	68 87       	std	Y+8, r22	; 0x08
   3e32e:	79 87       	std	Y+9, r23	; 0x09
   3e330:	8a 87       	std	Y+10, r24	; 0x0a
   3e332:	9b 87       	std	Y+11, r25	; 0x0b
	dj->sect = clst ? clust2sect(clst) : fs->dirbase;	/* Current sector */
   3e334:	61 15       	cp	r22, r1
   3e336:	71 05       	cpc	r23, r1
   3e338:	81 05       	cpc	r24, r1
   3e33a:	91 05       	cpc	r25, r1
   3e33c:	59 f0       	breq	.+22     	; 0x3e354 <dir_rewind+0x7a>
   3e33e:	85 df       	rcall	.-246    	; 0x3e24a <clust2sect>
   3e340:	6c 87       	std	Y+12, r22	; 0x0c
   3e342:	7d 87       	std	Y+13, r23	; 0x0d
   3e344:	8e 87       	std	Y+14, r24	; 0x0e
   3e346:	9f 87       	std	Y+15, r25	; 0x0f

	return FR_OK;	/* Seek succeeded */
   3e348:	80 e0       	ldi	r24, 0x00	; 0
}
   3e34a:	df 91       	pop	r29
   3e34c:	cf 91       	pop	r28
   3e34e:	1f 91       	pop	r17
   3e350:	0f 91       	pop	r16
   3e352:	08 95       	ret
	dj->sect = clst ? clust2sect(clst) : fs->dirbase;	/* Current sector */
   3e354:	66 85       	ldd	r22, Z+14	; 0x0e
   3e356:	77 85       	ldd	r23, Z+15	; 0x0f
   3e358:	80 89       	ldd	r24, Z+16	; 0x10
   3e35a:	91 89       	ldd	r25, Z+17	; 0x11
   3e35c:	f1 cf       	rjmp	.-30     	; 0x3e340 <dir_rewind+0x66>
		return FR_DISK_ERR;
   3e35e:	81 e0       	ldi	r24, 0x01	; 1
   3e360:	f4 cf       	rjmp	.-24     	; 0x3e34a <dir_rewind+0x70>

0003e362 <get_fat>:
{
   3e362:	0f 93       	push	r16
   3e364:	1f 93       	push	r17
   3e366:	cf 93       	push	r28
   3e368:	df 93       	push	r29
   3e36a:	00 d0       	rcall	.+0      	; 0x3e36c <get_fat+0xa>
   3e36c:	0f 92       	push	r0
   3e36e:	cd b7       	in	r28, 0x3d	; 61
   3e370:	de b7       	in	r29, 0x3e	; 62
   3e372:	46 2f       	mov	r20, r22
   3e374:	57 2f       	mov	r21, r23
   3e376:	bc 01       	movw	r22, r24
	if (clst < 2 || clst >= fs->n_fatent)	/* Range check */
   3e378:	42 30       	cpi	r20, 0x02	; 2
   3e37a:	51 05       	cpc	r21, r1
   3e37c:	61 05       	cpc	r22, r1
   3e37e:	71 05       	cpc	r23, r1
   3e380:	68 f4       	brcc	.+26     	; 0x3e39c <get_fat+0x3a>
	switch (fs->fs_type) {
   3e382:	61 e0       	ldi	r22, 0x01	; 1
   3e384:	70 e0       	ldi	r23, 0x00	; 0
   3e386:	80 e0       	ldi	r24, 0x00	; 0
   3e388:	90 e0       	ldi	r25, 0x00	; 0
}
   3e38a:	0f 90       	pop	r0
   3e38c:	0f 90       	pop	r0
   3e38e:	0f 90       	pop	r0
   3e390:	0f 90       	pop	r0
   3e392:	df 91       	pop	r29
   3e394:	cf 91       	pop	r28
   3e396:	1f 91       	pop	r17
   3e398:	0f 91       	pop	r16
   3e39a:	08 95       	ret
	FATFS *fs = FatFs;
   3e39c:	e0 91 4a 03 	lds	r30, 0x034A	; 0x80034a <FatFs>
   3e3a0:	f0 91 4b 03 	lds	r31, 0x034B	; 0x80034b <FatFs+0x1>
	if (clst < 2 || clst >= fs->n_fatent)	/* Range check */
   3e3a4:	86 81       	ldd	r24, Z+6	; 0x06
   3e3a6:	97 81       	ldd	r25, Z+7	; 0x07
   3e3a8:	a0 85       	ldd	r26, Z+8	; 0x08
   3e3aa:	b1 85       	ldd	r27, Z+9	; 0x09
   3e3ac:	48 17       	cp	r20, r24
   3e3ae:	59 07       	cpc	r21, r25
   3e3b0:	6a 07       	cpc	r22, r26
   3e3b2:	7b 07       	cpc	r23, r27
   3e3b4:	30 f7       	brcc	.-52     	; 0x3e382 <get_fat+0x20>
	switch (fs->fs_type) {
   3e3b6:	80 81       	ld	r24, Z
   3e3b8:	82 30       	cpi	r24, 0x02	; 2
   3e3ba:	29 f1       	breq	.+74     	; 0x3e406 <get_fat+0xa4>
   3e3bc:	83 30       	cpi	r24, 0x03	; 3
   3e3be:	09 f7       	brne	.-62     	; 0x3e382 <get_fat+0x20>
		if (disk_readp(buf, fs->fatbase + clst / 128, (WORD)(((WORD)clst % 128) * 4), 4)) break;
   3e3c0:	9a 01       	movw	r18, r20
   3e3c2:	2f 77       	andi	r18, 0x7F	; 127
   3e3c4:	33 27       	eor	r19, r19
   3e3c6:	22 0f       	add	r18, r18
   3e3c8:	33 1f       	adc	r19, r19
   3e3ca:	22 0f       	add	r18, r18
   3e3cc:	33 1f       	adc	r19, r19
   3e3ce:	97 e0       	ldi	r25, 0x07	; 7
   3e3d0:	76 95       	lsr	r23
   3e3d2:	67 95       	ror	r22
   3e3d4:	57 95       	ror	r21
   3e3d6:	47 95       	ror	r20
   3e3d8:	9a 95       	dec	r25
   3e3da:	d1 f7       	brne	.-12     	; 0x3e3d0 <get_fat+0x6e>
   3e3dc:	82 85       	ldd	r24, Z+10	; 0x0a
   3e3de:	93 85       	ldd	r25, Z+11	; 0x0b
   3e3e0:	a4 85       	ldd	r26, Z+12	; 0x0c
   3e3e2:	b5 85       	ldd	r27, Z+13	; 0x0d
   3e3e4:	48 0f       	add	r20, r24
   3e3e6:	59 1f       	adc	r21, r25
   3e3e8:	6a 1f       	adc	r22, r26
   3e3ea:	7b 1f       	adc	r23, r27
   3e3ec:	04 e0       	ldi	r16, 0x04	; 4
   3e3ee:	10 e0       	ldi	r17, 0x00	; 0
   3e3f0:	ce 01       	movw	r24, r28
   3e3f2:	01 96       	adiw	r24, 0x01	; 1
   3e3f4:	dc d4       	rcall	.+2488   	; 0x3edae <disk_readp>
   3e3f6:	81 11       	cpse	r24, r1
   3e3f8:	c4 cf       	rjmp	.-120    	; 0x3e382 <get_fat+0x20>
		return LD_DWORD(buf) & 0x0FFFFFFF;
   3e3fa:	69 81       	ldd	r22, Y+1	; 0x01
   3e3fc:	7a 81       	ldd	r23, Y+2	; 0x02
   3e3fe:	8b 81       	ldd	r24, Y+3	; 0x03
   3e400:	9c 81       	ldd	r25, Y+4	; 0x04
   3e402:	9f 70       	andi	r25, 0x0F	; 15
   3e404:	c2 cf       	rjmp	.-124    	; 0x3e38a <get_fat+0x28>
		if (disk_readp(buf, fs->fatbase + clst / 256, (WORD)(((WORD)clst % 256) * 2), 2)) break;
   3e406:	9a 01       	movw	r18, r20
   3e408:	33 27       	eor	r19, r19
   3e40a:	22 0f       	add	r18, r18
   3e40c:	33 1f       	adc	r19, r19
   3e40e:	45 2f       	mov	r20, r21
   3e410:	56 2f       	mov	r21, r22
   3e412:	67 2f       	mov	r22, r23
   3e414:	77 27       	eor	r23, r23
   3e416:	82 85       	ldd	r24, Z+10	; 0x0a
   3e418:	93 85       	ldd	r25, Z+11	; 0x0b
   3e41a:	a4 85       	ldd	r26, Z+12	; 0x0c
   3e41c:	b5 85       	ldd	r27, Z+13	; 0x0d
   3e41e:	48 0f       	add	r20, r24
   3e420:	59 1f       	adc	r21, r25
   3e422:	6a 1f       	adc	r22, r26
   3e424:	7b 1f       	adc	r23, r27
   3e426:	02 e0       	ldi	r16, 0x02	; 2
   3e428:	10 e0       	ldi	r17, 0x00	; 0
   3e42a:	ce 01       	movw	r24, r28
   3e42c:	01 96       	adiw	r24, 0x01	; 1
   3e42e:	bf d4       	rcall	.+2430   	; 0x3edae <disk_readp>
   3e430:	81 11       	cpse	r24, r1
   3e432:	a7 cf       	rjmp	.-178    	; 0x3e382 <get_fat+0x20>
		return LD_WORD(buf);
   3e434:	69 81       	ldd	r22, Y+1	; 0x01
   3e436:	7a 81       	ldd	r23, Y+2	; 0x02
   3e438:	90 e0       	ldi	r25, 0x00	; 0
   3e43a:	80 e0       	ldi	r24, 0x00	; 0
   3e43c:	a6 cf       	rjmp	.-180    	; 0x3e38a <get_fat+0x28>

0003e43e <check_fs>:
static
BYTE check_fs (	/* 0:The FAT boot record, 1:Valid boot record but not an FAT, 2:Not a boot record, 3:Error */
	BYTE *buf,	/* Working buffer */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
   3e43e:	cf 92       	push	r12
   3e440:	df 92       	push	r13
   3e442:	ef 92       	push	r14
   3e444:	ff 92       	push	r15
   3e446:	0f 93       	push	r16
   3e448:	1f 93       	push	r17
   3e44a:	cf 93       	push	r28
   3e44c:	df 93       	push	r29
   3e44e:	ec 01       	movw	r28, r24
   3e450:	6a 01       	movw	r12, r20
   3e452:	7b 01       	movw	r14, r22
	if (disk_readp(buf, sect, 510, 2))		/* Read the boot sector */
   3e454:	02 e0       	ldi	r16, 0x02	; 2
   3e456:	10 e0       	ldi	r17, 0x00	; 0
   3e458:	2e ef       	ldi	r18, 0xFE	; 254
   3e45a:	31 e0       	ldi	r19, 0x01	; 1
   3e45c:	a8 d4       	rcall	.+2384   	; 0x3edae <disk_readp>
   3e45e:	81 11       	cpse	r24, r1
   3e460:	2c c0       	rjmp	.+88     	; 0x3e4ba <check_fs+0x7c>
		return 3;
	if (LD_WORD(buf) != 0xAA55)				/* Check record signature */
   3e462:	88 81       	ld	r24, Y
   3e464:	99 81       	ldd	r25, Y+1	; 0x01
   3e466:	85 35       	cpi	r24, 0x55	; 85
   3e468:	9a 4a       	sbci	r25, 0xAA	; 170
   3e46a:	49 f5       	brne	.+82     	; 0x3e4be <check_fs+0x80>
		return 2;

	if (!disk_readp(buf, sect, BS_FilSysType, 2) && LD_WORD(buf) == 0x4146)	/* Check FAT12/16 */
   3e46c:	26 e3       	ldi	r18, 0x36	; 54
   3e46e:	30 e0       	ldi	r19, 0x00	; 0
   3e470:	a6 01       	movw	r20, r12
   3e472:	b7 01       	movw	r22, r14
   3e474:	ce 01       	movw	r24, r28
   3e476:	9b d4       	rcall	.+2358   	; 0x3edae <disk_readp>
   3e478:	81 11       	cpse	r24, r1
   3e47a:	05 c0       	rjmp	.+10     	; 0x3e486 <check_fs+0x48>
   3e47c:	28 81       	ld	r18, Y
   3e47e:	39 81       	ldd	r19, Y+1	; 0x01
   3e480:	26 34       	cpi	r18, 0x46	; 70
   3e482:	31 44       	sbci	r19, 0x41	; 65
   3e484:	89 f0       	breq	.+34     	; 0x3e4a8 <check_fs+0x6a>
		return 0;
	if (_FS_FAT32 && !disk_readp(buf, sect, BS_FilSysType32, 2) && LD_WORD(buf) == 0x4146)	/* Check FAT32 */
   3e486:	02 e0       	ldi	r16, 0x02	; 2
   3e488:	10 e0       	ldi	r17, 0x00	; 0
   3e48a:	22 e5       	ldi	r18, 0x52	; 82
   3e48c:	30 e0       	ldi	r19, 0x00	; 0
   3e48e:	a6 01       	movw	r20, r12
   3e490:	b7 01       	movw	r22, r14
   3e492:	ce 01       	movw	r24, r28
   3e494:	8c d4       	rcall	.+2328   	; 0x3edae <disk_readp>
   3e496:	81 11       	cpse	r24, r1
   3e498:	14 c0       	rjmp	.+40     	; 0x3e4c2 <check_fs+0x84>
   3e49a:	81 e0       	ldi	r24, 0x01	; 1
   3e49c:	28 81       	ld	r18, Y
   3e49e:	39 81       	ldd	r19, Y+1	; 0x01
   3e4a0:	26 34       	cpi	r18, 0x46	; 70
   3e4a2:	31 44       	sbci	r19, 0x41	; 65
   3e4a4:	09 f4       	brne	.+2      	; 0x3e4a8 <check_fs+0x6a>
   3e4a6:	80 e0       	ldi	r24, 0x00	; 0
		return 0;
	return 1;
}
   3e4a8:	df 91       	pop	r29
   3e4aa:	cf 91       	pop	r28
   3e4ac:	1f 91       	pop	r17
   3e4ae:	0f 91       	pop	r16
   3e4b0:	ff 90       	pop	r15
   3e4b2:	ef 90       	pop	r14
   3e4b4:	df 90       	pop	r13
   3e4b6:	cf 90       	pop	r12
   3e4b8:	08 95       	ret
		return 3;
   3e4ba:	83 e0       	ldi	r24, 0x03	; 3
   3e4bc:	f5 cf       	rjmp	.-22     	; 0x3e4a8 <check_fs+0x6a>
		return 2;
   3e4be:	82 e0       	ldi	r24, 0x02	; 2
   3e4c0:	f3 cf       	rjmp	.-26     	; 0x3e4a8 <check_fs+0x6a>
	return 1;
   3e4c2:	81 e0       	ldi	r24, 0x01	; 1
   3e4c4:	f1 cf       	rjmp	.-30     	; 0x3e4a8 <check_fs+0x6a>

0003e4c6 <pf_mount>:
/*-----------------------------------------------------------------------*/

FRESULT pf_mount (
	FATFS *fs		/* Pointer to new file system object (NULL: Unmount) */
)
{
   3e4c6:	4f 92       	push	r4
   3e4c8:	5f 92       	push	r5
   3e4ca:	6f 92       	push	r6
   3e4cc:	7f 92       	push	r7
   3e4ce:	8f 92       	push	r8
   3e4d0:	9f 92       	push	r9
   3e4d2:	af 92       	push	r10
   3e4d4:	bf 92       	push	r11
   3e4d6:	ef 92       	push	r14
   3e4d8:	ff 92       	push	r15
   3e4da:	0f 93       	push	r16
   3e4dc:	1f 93       	push	r17
   3e4de:	cf 93       	push	r28
   3e4e0:	df 93       	push	r29
   3e4e2:	cd b7       	in	r28, 0x3d	; 61
   3e4e4:	de b7       	in	r29, 0x3e	; 62
   3e4e6:	ac 97       	sbiw	r28, 0x2c	; 44
   3e4e8:	0f b6       	in	r0, 0x3f	; 63
   3e4ea:	f8 94       	cli
   3e4ec:	de bf       	out	0x3e, r29	; 62
   3e4ee:	0f be       	out	0x3f, r0	; 63
   3e4f0:	cd bf       	out	0x3d, r28	; 61
   3e4f2:	7c 01       	movw	r14, r24
	BYTE fmt, buf[36];
	DWORD bsect, fsize, tsect, mclst;


	FatFs = 0;
   3e4f4:	10 92 4b 03 	sts	0x034B, r1	; 0x80034b <FatFs+0x1>
   3e4f8:	10 92 4a 03 	sts	0x034A, r1	; 0x80034a <FatFs>
	if (!fs) return FR_OK;				/* Unregister fs object */
   3e4fc:	10 e0       	ldi	r17, 0x00	; 0
   3e4fe:	89 2b       	or	r24, r25

	if (disk_initialize() & STA_NOINIT)	/* Check if the drive is ready or not */
   3e500:	e9 f0       	breq	.+58     	; 0x3e53c <pf_mount+0x76>
   3e502:	bc d3       	rcall	.+1912   	; 0x3ec7c <disk_initialize>
		return FR_NOT_READY;
   3e504:	12 e0       	ldi	r17, 0x02	; 2
	if (disk_initialize() & STA_NOINIT)	/* Check if the drive is ready or not */
   3e506:	80 fd       	sbrc	r24, 0

	/* Search FAT partition on the drive */
	bsect = 0;
	fmt = check_fs(buf, bsect);			/* Check sector 0 as an SFD format */
   3e508:	19 c0       	rjmp	.+50     	; 0x3e53c <pf_mount+0x76>
   3e50a:	40 e0       	ldi	r20, 0x00	; 0
   3e50c:	50 e0       	ldi	r21, 0x00	; 0
   3e50e:	ba 01       	movw	r22, r20
   3e510:	ce 01       	movw	r24, r28
   3e512:	01 96       	adiw	r24, 0x01	; 1
   3e514:	3c 01       	movw	r6, r24
   3e516:	93 df       	rcall	.-218    	; 0x3e43e <check_fs>
	if (fmt == 1) {						/* Not an FAT boot record, it may be FDISK format */
   3e518:	23 01       	movw	r4, r6
	bsect = 0;
   3e51a:	81 2c       	mov	r8, r1
   3e51c:	91 2c       	mov	r9, r1
   3e51e:	54 01       	movw	r10, r8
	if (fmt == 1) {						/* Not an FAT boot record, it may be FDISK format */
   3e520:	81 30       	cpi	r24, 0x01	; 1
   3e522:	79 f5       	brne	.+94     	; 0x3e582 <pf_mount+0xbc>
		/* Check a partition listed in top of the partition table */
		if (disk_readp(buf, bsect, MBR_Table, 16)) {	/* 1st partition entry */
   3e524:	00 e1       	ldi	r16, 0x10	; 16
   3e526:	10 e0       	ldi	r17, 0x00	; 0
   3e528:	2e eb       	ldi	r18, 0xBE	; 190
   3e52a:	31 e0       	ldi	r19, 0x01	; 1
   3e52c:	40 e0       	ldi	r20, 0x00	; 0
   3e52e:	50 e0       	ldi	r21, 0x00	; 0
   3e530:	ba 01       	movw	r22, r20
   3e532:	c3 01       	movw	r24, r6
   3e534:	3c d4       	rcall	.+2168   	; 0x3edae <disk_readp>
   3e536:	88 23       	and	r24, r24
   3e538:	b9 f0       	breq	.+46     	; 0x3e568 <pf_mount+0xa2>
				bsect = LD_DWORD(&buf[8]);	/* Partition offset in LBA */
				fmt = check_fs(buf, bsect);	/* Check the partition */
			}
		}
	}
	if (fmt == 3) return FR_DISK_ERR;
   3e53a:	11 e0       	ldi	r17, 0x01	; 1

	fs->flag = 0;
	FatFs = fs;

	return FR_OK;
}
   3e53c:	81 2f       	mov	r24, r17
   3e53e:	ac 96       	adiw	r28, 0x2c	; 44
   3e540:	0f b6       	in	r0, 0x3f	; 63
   3e542:	f8 94       	cli
   3e544:	de bf       	out	0x3e, r29	; 62
   3e546:	0f be       	out	0x3f, r0	; 63
   3e548:	cd bf       	out	0x3d, r28	; 61
   3e54a:	df 91       	pop	r29
   3e54c:	cf 91       	pop	r28
   3e54e:	1f 91       	pop	r17
   3e550:	0f 91       	pop	r16
   3e552:	ff 90       	pop	r15
   3e554:	ef 90       	pop	r14
   3e556:	bf 90       	pop	r11
   3e558:	af 90       	pop	r10
   3e55a:	9f 90       	pop	r9
   3e55c:	8f 90       	pop	r8
   3e55e:	7f 90       	pop	r7
   3e560:	6f 90       	pop	r6
   3e562:	5f 90       	pop	r5
   3e564:	4f 90       	pop	r4
   3e566:	08 95       	ret
			if (buf[4]) {					/* Is the partition existing? */
   3e568:	8d 81       	ldd	r24, Y+5	; 0x05
   3e56a:	81 11       	cpse	r24, r1
   3e56c:	02 c0       	rjmp	.+4      	; 0x3e572 <pf_mount+0xac>
	if (fmt) return FR_NO_FILESYSTEM;	/* No valid FAT patition is found */
   3e56e:	17 e0       	ldi	r17, 0x07	; 7
				bsect = LD_DWORD(&buf[8]);	/* Partition offset in LBA */
   3e570:	e5 cf       	rjmp	.-54     	; 0x3e53c <pf_mount+0x76>
   3e572:	89 84       	ldd	r8, Y+9	; 0x09
   3e574:	9a 84       	ldd	r9, Y+10	; 0x0a
   3e576:	ab 84       	ldd	r10, Y+11	; 0x0b
				fmt = check_fs(buf, bsect);	/* Check the partition */
   3e578:	bc 84       	ldd	r11, Y+12	; 0x0c
   3e57a:	b5 01       	movw	r22, r10
   3e57c:	a4 01       	movw	r20, r8
   3e57e:	c3 01       	movw	r24, r6
   3e580:	5e df       	rcall	.-324    	; 0x3e43e <check_fs>
	if (fmt == 3) return FR_DISK_ERR;
   3e582:	83 30       	cpi	r24, 0x03	; 3
	if (fmt) return FR_NO_FILESYSTEM;	/* No valid FAT patition is found */
   3e584:	d1 f2       	breq	.-76     	; 0x3e53a <pf_mount+0x74>
   3e586:	81 11       	cpse	r24, r1
	if (disk_readp(buf, bsect, 13, sizeof(buf))) return FR_DISK_ERR;
   3e588:	f2 cf       	rjmp	.-28     	; 0x3e56e <pf_mount+0xa8>
   3e58a:	04 e2       	ldi	r16, 0x24	; 36
   3e58c:	10 e0       	ldi	r17, 0x00	; 0
   3e58e:	2d e0       	ldi	r18, 0x0D	; 13
   3e590:	30 e0       	ldi	r19, 0x00	; 0
   3e592:	b5 01       	movw	r22, r10
   3e594:	a4 01       	movw	r20, r8
   3e596:	c2 01       	movw	r24, r4
   3e598:	0a d4       	rcall	.+2068   	; 0x3edae <disk_readp>
   3e59a:	18 2f       	mov	r17, r24
   3e59c:	81 11       	cpse	r24, r1
   3e59e:	cd cf       	rjmp	.-102    	; 0x3e53a <pf_mount+0x74>
	fsize = LD_WORD(buf+BPB_FATSz16-13);				/* Number of sectors per FAT */
   3e5a0:	8a 85       	ldd	r24, Y+10	; 0x0a
   3e5a2:	9b 85       	ldd	r25, Y+11	; 0x0b
   3e5a4:	9c 01       	movw	r18, r24
   3e5a6:	50 e0       	ldi	r21, 0x00	; 0
   3e5a8:	40 e0       	ldi	r20, 0x00	; 0
	if (!fsize) fsize = LD_DWORD(buf+BPB_FATSz32-13);
   3e5aa:	89 2b       	or	r24, r25
   3e5ac:	21 f4       	brne	.+8      	; 0x3e5b6 <pf_mount+0xf0>
   3e5ae:	28 8d       	ldd	r18, Y+24	; 0x18
   3e5b0:	39 8d       	ldd	r19, Y+25	; 0x19
   3e5b2:	4a 8d       	ldd	r20, Y+26	; 0x1a
   3e5b4:	5b 8d       	ldd	r21, Y+27	; 0x1b
	fsize *= buf[BPB_NumFATs-13];						/* Number of sectors in FAT area */
   3e5b6:	ac 81       	ldd	r26, Y+4	; 0x04
   3e5b8:	b0 e0       	ldi	r27, 0x00	; 0
   3e5ba:	0f 94 a1 fb 	call	0x3f742	; 0x3f742 <__muluhisi3>
   3e5be:	69 a7       	std	Y+41, r22	; 0x29
   3e5c0:	7a a7       	std	Y+42, r23	; 0x2a
   3e5c2:	8b a7       	std	Y+43, r24	; 0x2b
   3e5c4:	9c a7       	std	Y+44, r25	; 0x2c
	fs->fatbase = bsect + LD_WORD(buf+BPB_RsvdSecCnt-13); /* FAT start sector (lba) */
   3e5c6:	4a 81       	ldd	r20, Y+2	; 0x02
   3e5c8:	5b 81       	ldd	r21, Y+3	; 0x03
   3e5ca:	70 e0       	ldi	r23, 0x00	; 0
   3e5cc:	60 e0       	ldi	r22, 0x00	; 0
   3e5ce:	84 0e       	add	r8, r20
   3e5d0:	95 1e       	adc	r9, r21
   3e5d2:	a6 1e       	adc	r10, r22
   3e5d4:	b7 1e       	adc	r11, r23
   3e5d6:	d7 01       	movw	r26, r14
   3e5d8:	1a 96       	adiw	r26, 0x0a	; 10
   3e5da:	8d 92       	st	X+, r8
   3e5dc:	9d 92       	st	X+, r9
   3e5de:	ad 92       	st	X+, r10
   3e5e0:	bc 92       	st	X, r11
   3e5e2:	1d 97       	sbiw	r26, 0x0d	; 13
	fs->csize = buf[BPB_SecPerClus-13];					/* Number of sectors per cluster */
   3e5e4:	e9 81       	ldd	r30, Y+1	; 0x01
   3e5e6:	12 96       	adiw	r26, 0x02	; 2
   3e5e8:	ec 93       	st	X, r30
   3e5ea:	12 97       	sbiw	r26, 0x02	; 2
	fs->n_rootdir = LD_WORD(buf+BPB_RootEntCnt-13);		/* Nmuber of root directory entries */
   3e5ec:	8d 81       	ldd	r24, Y+5	; 0x05
   3e5ee:	9e 81       	ldd	r25, Y+6	; 0x06
   3e5f0:	15 96       	adiw	r26, 0x05	; 5
   3e5f2:	9c 93       	st	X, r25
   3e5f4:	8e 93       	st	-X, r24
   3e5f6:	14 97       	sbiw	r26, 0x04	; 4
	tsect = LD_WORD(buf+BPB_TotSec16-13);				/* Number of sectors on the file system */
   3e5f8:	2f 81       	ldd	r18, Y+7	; 0x07
   3e5fa:	38 85       	ldd	r19, Y+8	; 0x08
   3e5fc:	29 01       	movw	r4, r18
   3e5fe:	71 2c       	mov	r7, r1
   3e600:	61 2c       	mov	r6, r1
   3e602:	4d a2       	std	Y+37, r4	; 0x25
   3e604:	5e a2       	std	Y+38, r5	; 0x26
   3e606:	6f a2       	std	Y+39, r6	; 0x27
   3e608:	78 a6       	std	Y+40, r7	; 0x28
	if (!tsect) tsect = LD_DWORD(buf+BPB_TotSec32-13);
   3e60a:	23 2b       	or	r18, r19
   3e60c:	41 f4       	brne	.+16     	; 0x3e61e <pf_mount+0x158>
   3e60e:	4c 88       	ldd	r4, Y+20	; 0x14
   3e610:	5d 88       	ldd	r5, Y+21	; 0x15
   3e612:	6e 88       	ldd	r6, Y+22	; 0x16
   3e614:	7f 88       	ldd	r7, Y+23	; 0x17
   3e616:	4d a2       	std	Y+37, r4	; 0x25
   3e618:	5e a2       	std	Y+38, r5	; 0x26
   3e61a:	6f a2       	std	Y+39, r6	; 0x27
   3e61c:	78 a6       	std	Y+40, r7	; 0x28
		- LD_WORD(buf+BPB_RsvdSecCnt-13) - fsize - fs->n_rootdir / 16
   3e61e:	24 e0       	ldi	r18, 0x04	; 4
   3e620:	96 95       	lsr	r25
   3e622:	87 95       	ror	r24
   3e624:	2a 95       	dec	r18
   3e626:	e1 f7       	brne	.-8      	; 0x3e620 <pf_mount+0x15a>
   3e628:	2c 01       	movw	r4, r24
   3e62a:	71 2c       	mov	r7, r1
   3e62c:	61 2c       	mov	r6, r1
   3e62e:	44 0d       	add	r20, r4
   3e630:	55 1d       	adc	r21, r5
   3e632:	66 1d       	adc	r22, r6
   3e634:	77 1d       	adc	r23, r7
   3e636:	89 a5       	ldd	r24, Y+41	; 0x29
   3e638:	9a a5       	ldd	r25, Y+42	; 0x2a
   3e63a:	ab a5       	ldd	r26, Y+43	; 0x2b
   3e63c:	bc a5       	ldd	r27, Y+44	; 0x2c
   3e63e:	48 0f       	add	r20, r24
   3e640:	59 1f       	adc	r21, r25
   3e642:	6a 1f       	adc	r22, r26
   3e644:	7b 1f       	adc	r23, r27
   3e646:	8d a1       	ldd	r24, Y+37	; 0x25
   3e648:	9e a1       	ldd	r25, Y+38	; 0x26
   3e64a:	af a1       	ldd	r26, Y+39	; 0x27
   3e64c:	b8 a5       	ldd	r27, Y+40	; 0x28
   3e64e:	84 1b       	sub	r24, r20
   3e650:	95 0b       	sbc	r25, r21
   3e652:	a6 0b       	sbc	r26, r22
   3e654:	b7 0b       	sbc	r27, r23
		) / fs->csize + 2;
   3e656:	2e 2f       	mov	r18, r30
   3e658:	30 e0       	ldi	r19, 0x00	; 0
   3e65a:	50 e0       	ldi	r21, 0x00	; 0
   3e65c:	40 e0       	ldi	r20, 0x00	; 0
   3e65e:	bc 01       	movw	r22, r24
   3e660:	cd 01       	movw	r24, r26
   3e662:	0f 94 78 fb 	call	0x3f6f0	; 0x3f6f0 <__udivmodsi4>
	mclst = (tsect						/* Last cluster# + 1 */
   3e666:	da 01       	movw	r26, r20
   3e668:	c9 01       	movw	r24, r18
   3e66a:	02 96       	adiw	r24, 0x02	; 2
   3e66c:	a1 1d       	adc	r26, r1
   3e66e:	b1 1d       	adc	r27, r1
	fs->n_fatent = (CLUST)mclst;
   3e670:	f7 01       	movw	r30, r14
   3e672:	86 83       	std	Z+6, r24	; 0x06
   3e674:	97 83       	std	Z+7, r25	; 0x07
   3e676:	a0 87       	std	Z+8, r26	; 0x08
   3e678:	b1 87       	std	Z+9, r27	; 0x09
	if (mclst < 0xFF7) 						/* Number of clusters < 0xFF5 */
   3e67a:	87 3f       	cpi	r24, 0xF7	; 247
   3e67c:	ff e0       	ldi	r31, 0x0F	; 15
   3e67e:	9f 07       	cpc	r25, r31
   3e680:	a1 05       	cpc	r26, r1
   3e682:	b1 05       	cpc	r27, r1
   3e684:	08 f4       	brcc	.+2      	; 0x3e688 <pf_mount+0x1c2>
   3e686:	73 cf       	rjmp	.-282    	; 0x3e56e <pf_mount+0xa8>
	if (mclst >= 0xFFF7)					/* Number of clusters >= 0xFFF5 */
   3e688:	87 3f       	cpi	r24, 0xF7	; 247
   3e68a:	9f 4f       	sbci	r25, 0xFF	; 255
   3e68c:	a1 05       	cpc	r26, r1
   3e68e:	b1 05       	cpc	r27, r1
   3e690:	10 f1       	brcs	.+68     	; 0x3e6d6 <pf_mount+0x210>
	fs->fs_type = fmt;		/* FAT sub-type */
   3e692:	83 e0       	ldi	r24, 0x03	; 3
   3e694:	d7 01       	movw	r26, r14
   3e696:	8c 93       	st	X, r24
		fs->dirbase = LD_DWORD(buf+(BPB_RootClus-13));	/* Root directory start cluster */
   3e698:	88 a1       	ldd	r24, Y+32	; 0x20
   3e69a:	99 a1       	ldd	r25, Y+33	; 0x21
   3e69c:	aa a1       	ldd	r26, Y+34	; 0x22
   3e69e:	bb a1       	ldd	r27, Y+35	; 0x23
		fs->dirbase = fs->fatbase + fsize;				/* Root directory start sector (lba) */
   3e6a0:	f7 01       	movw	r30, r14
   3e6a2:	86 87       	std	Z+14, r24	; 0x0e
   3e6a4:	97 87       	std	Z+15, r25	; 0x0f
   3e6a6:	a0 8b       	std	Z+16, r26	; 0x10
   3e6a8:	b1 8b       	std	Z+17, r27	; 0x11
	fs->database = fs->fatbase + fsize + fs->n_rootdir / 16;	/* Data start sector (lba) */
   3e6aa:	84 0c       	add	r8, r4
   3e6ac:	95 1c       	adc	r9, r5
   3e6ae:	a6 1c       	adc	r10, r6
   3e6b0:	b7 1c       	adc	r11, r7
   3e6b2:	49 a4       	ldd	r4, Y+41	; 0x29
   3e6b4:	5a a4       	ldd	r5, Y+42	; 0x2a
   3e6b6:	6b a4       	ldd	r6, Y+43	; 0x2b
   3e6b8:	7c a4       	ldd	r7, Y+44	; 0x2c
   3e6ba:	84 0c       	add	r8, r4
   3e6bc:	95 1c       	adc	r9, r5
   3e6be:	a6 1c       	adc	r10, r6
   3e6c0:	b7 1c       	adc	r11, r7
   3e6c2:	82 8a       	std	Z+18, r8	; 0x12
   3e6c4:	93 8a       	std	Z+19, r9	; 0x13
   3e6c6:	a4 8a       	std	Z+20, r10	; 0x14
   3e6c8:	b5 8a       	std	Z+21, r11	; 0x15
	fs->flag = 0;
   3e6ca:	11 82       	std	Z+1, r1	; 0x01
	FatFs = fs;
   3e6cc:	f0 92 4b 03 	sts	0x034B, r15	; 0x80034b <FatFs+0x1>
   3e6d0:	e0 92 4a 03 	sts	0x034A, r14	; 0x80034a <FatFs>
	return FR_OK;
   3e6d4:	33 cf       	rjmp	.-410    	; 0x3e53c <pf_mount+0x76>
	fs->fs_type = fmt;		/* FAT sub-type */
   3e6d6:	82 e0       	ldi	r24, 0x02	; 2
   3e6d8:	d7 01       	movw	r26, r14
   3e6da:	8c 93       	st	X, r24
		fs->dirbase = fs->fatbase + fsize;				/* Root directory start sector (lba) */
   3e6dc:	89 a5       	ldd	r24, Y+41	; 0x29
   3e6de:	9a a5       	ldd	r25, Y+42	; 0x2a
   3e6e0:	ab a5       	ldd	r26, Y+43	; 0x2b
   3e6e2:	bc a5       	ldd	r27, Y+44	; 0x2c
   3e6e4:	88 0d       	add	r24, r8
   3e6e6:	99 1d       	adc	r25, r9
   3e6e8:	aa 1d       	adc	r26, r10
   3e6ea:	bb 1d       	adc	r27, r11
   3e6ec:	d9 cf       	rjmp	.-78     	; 0x3e6a0 <pf_mount+0x1da>

0003e6ee <pf_open>:
/*-----------------------------------------------------------------------*/

FRESULT pf_open (
	const char *path	/* Pointer to the file name */
)
{
   3e6ee:	4f 92       	push	r4
   3e6f0:	5f 92       	push	r5
   3e6f2:	6f 92       	push	r6
   3e6f4:	7f 92       	push	r7
   3e6f6:	8f 92       	push	r8
   3e6f8:	9f 92       	push	r9
   3e6fa:	af 92       	push	r10
   3e6fc:	bf 92       	push	r11
   3e6fe:	cf 92       	push	r12
   3e700:	df 92       	push	r13
   3e702:	ef 92       	push	r14
   3e704:	ff 92       	push	r15
   3e706:	0f 93       	push	r16
   3e708:	1f 93       	push	r17
   3e70a:	cf 93       	push	r28
   3e70c:	df 93       	push	r29
   3e70e:	cd b7       	in	r28, 0x3d	; 61
   3e710:	de b7       	in	r29, 0x3e	; 62
   3e712:	c0 54       	subi	r28, 0x40	; 64
   3e714:	d1 09       	sbc	r29, r1
   3e716:	0f b6       	in	r0, 0x3f	; 63
   3e718:	f8 94       	cli
   3e71a:	de bf       	out	0x3e, r29	; 62
   3e71c:	0f be       	out	0x3f, r0	; 63
   3e71e:	cd bf       	out	0x3d, r28	; 61
	FRESULT res;
	DIR dj;
	BYTE sp[12], dir[32];
	FATFS *fs = FatFs;
   3e720:	c0 90 4a 03 	lds	r12, 0x034A	; 0x80034a <FatFs>
   3e724:	d0 90 4b 03 	lds	r13, 0x034B	; 0x80034b <FatFs+0x1>


	if (!fs)						/* Check file system */
   3e728:	c1 14       	cp	r12, r1
   3e72a:	d1 04       	cpc	r13, r1
   3e72c:	09 f4       	brne	.+2      	; 0x3e730 <pf_open+0x42>
   3e72e:	5d c1       	rjmp	.+698    	; 0x3e9ea <pf_open+0x2fc>
		return FR_NOT_ENABLED;

	fs->flag = 0;
   3e730:	d6 01       	movw	r26, r12
   3e732:	11 96       	adiw	r26, 0x01	; 1
   3e734:	1c 92       	st	X, r1
	dj.fn = sp;
   3e736:	9e 01       	movw	r18, r28
   3e738:	2f 5c       	subi	r18, 0xCF	; 207
   3e73a:	3f 4f       	sbci	r19, 0xFF	; 255
   3e73c:	3c a3       	std	Y+36, r19	; 0x24
   3e73e:	2b a3       	std	Y+35, r18	; 0x23
	while (*path == ' ') path++;		/* Skip leading spaces */
   3e740:	9c 01       	movw	r18, r24
   3e742:	79 01       	movw	r14, r18
   3e744:	f9 01       	movw	r30, r18
   3e746:	80 81       	ld	r24, Z
   3e748:	2f 5f       	subi	r18, 0xFF	; 255
   3e74a:	3f 4f       	sbci	r19, 0xFF	; 255
   3e74c:	80 32       	cpi	r24, 0x20	; 32
   3e74e:	c9 f3       	breq	.-14     	; 0x3e742 <pf_open+0x54>
	if (*path == '/') path++;			/* Strip heading separator */
   3e750:	8f 32       	cpi	r24, 0x2F	; 47
   3e752:	09 f4       	brne	.+2      	; 0x3e756 <pf_open+0x68>
   3e754:	79 01       	movw	r14, r18
	dj->sclust = 0;						/* Set start directory (always root dir) */
   3e756:	1d a2       	std	Y+37, r1	; 0x25
   3e758:	1e a2       	std	Y+38, r1	; 0x26
   3e75a:	1f a2       	std	Y+39, r1	; 0x27
	if ((BYTE)*path <= ' ') {			/* Null path means the root directory */
   3e75c:	18 a6       	std	Y+40, r1	; 0x28
   3e75e:	d7 01       	movw	r26, r14
		res = disk_readp(dir, dj->sect, (WORD)((dj->index % 16) * 32), 32)	/* Read an entry */
   3e760:	8c 91       	ld	r24, X
   3e762:	fe 01       	movw	r30, r28
   3e764:	31 96       	adiw	r30, 0x01	; 1
	if ((BYTE)*path <= ' ') {			/* Null path means the root directory */
   3e766:	5f 01       	movw	r10, r30
   3e768:	81 32       	cpi	r24, 0x21	; 33
   3e76a:	08 f0       	brcs	.+2      	; 0x3e76e <pf_open+0x80>
		res = dir_rewind(dj);
   3e76c:	e6 c0       	rjmp	.+460    	; 0x3e93a <pf_open+0x24c>
   3e76e:	ce 01       	movw	r24, r28
   3e770:	81 96       	adiw	r24, 0x21	; 33
   3e772:	b3 dd       	rcall	.-1178   	; 0x3e2da <dir_rewind>
	res = follow_path(&dj, dir, path);	/* Follow the file path */
	if (res != FR_OK) return res;		/* Follow failed */
   3e774:	81 11       	cpse	r24, r1
   3e776:	01 c0       	rjmp	.+2      	; 0x3e77a <pf_open+0x8c>
	if (!dir[0] || (dir[DIR_Attr] & AM_DIR))	/* It is a directory */
		return FR_NO_FILE;
   3e778:	83 e0       	ldi	r24, 0x03	; 3
	fs->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
	fs->fptr = 0;						/* File pointer */
	fs->flag = FA_OPENED;

	return FR_OK;
}
   3e77a:	c0 5c       	subi	r28, 0xC0	; 192
   3e77c:	df 4f       	sbci	r29, 0xFF	; 255
   3e77e:	0f b6       	in	r0, 0x3f	; 63
   3e780:	f8 94       	cli
   3e782:	de bf       	out	0x3e, r29	; 62
   3e784:	0f be       	out	0x3f, r0	; 63
   3e786:	cd bf       	out	0x3d, r28	; 61
   3e788:	df 91       	pop	r29
   3e78a:	cf 91       	pop	r28
   3e78c:	1f 91       	pop	r17
   3e78e:	0f 91       	pop	r16
   3e790:	ff 90       	pop	r15
   3e792:	ef 90       	pop	r14
   3e794:	df 90       	pop	r13
   3e796:	cf 90       	pop	r12
   3e798:	bf 90       	pop	r11
   3e79a:	af 90       	pop	r10
   3e79c:	9f 90       	pop	r9
   3e79e:	8f 90       	pop	r8
   3e7a0:	7f 90       	pop	r7
   3e7a2:	6f 90       	pop	r6
   3e7a4:	5f 90       	pop	r5
   3e7a6:	4f 90       	pop	r4
	*path = &p[si];						/* Rerurn pointer to the next segment */
   3e7a8:	08 95       	ret
   3e7aa:	e4 0e       	add	r14, r20
	sfn[11] = (c <= ' ') ? 1 : 0;		/* Set last segment flag if end of path */
   3e7ac:	f1 1c       	adc	r15, r1
   3e7ae:	91 e0       	ldi	r25, 0x01	; 1
   3e7b0:	81 32       	cpi	r24, 0x21	; 33
   3e7b2:	08 f0       	brcs	.+2      	; 0x3e7b6 <pf_open+0xc8>
   3e7b4:	90 e0       	ldi	r25, 0x00	; 0
   3e7b6:	d8 01       	movw	r26, r16
   3e7b8:	1b 96       	adiw	r26, 0x0b	; 11
	res = dir_rewind(dj);			/* Rewind directory object */
   3e7ba:	9c 93       	st	X, r25
   3e7bc:	ce 01       	movw	r24, r28
   3e7be:	81 96       	adiw	r24, 0x21	; 33
   3e7c0:	8c dd       	rcall	.-1256   	; 0x3e2da <dir_rewind>
	if (res != FR_OK) return res;
   3e7c2:	81 11       	cpse	r24, r1
   3e7c4:	9c c0       	rjmp	.+312    	; 0x3e8fe <pf_open+0x210>
		res = disk_readp(dir, dj->sect, (WORD)((dj->index % 16) * 32), 32)	/* Read an entry */
   3e7c6:	29 a1       	ldd	r18, Y+33	; 0x21
   3e7c8:	3a a1       	ldd	r19, Y+34	; 0x22
   3e7ca:	2f 70       	andi	r18, 0x0F	; 15
   3e7cc:	33 27       	eor	r19, r19
   3e7ce:	55 e0       	ldi	r21, 0x05	; 5
   3e7d0:	22 0f       	add	r18, r18
   3e7d2:	33 1f       	adc	r19, r19
   3e7d4:	5a 95       	dec	r21
   3e7d6:	e1 f7       	brne	.-8      	; 0x3e7d0 <pf_open+0xe2>
   3e7d8:	4d a5       	ldd	r20, Y+45	; 0x2d
   3e7da:	5e a5       	ldd	r21, Y+46	; 0x2e
   3e7dc:	6f a5       	ldd	r22, Y+47	; 0x2f
   3e7de:	78 a9       	ldd	r23, Y+48	; 0x30
   3e7e0:	00 e2       	ldi	r16, 0x20	; 32
   3e7e2:	10 e0       	ldi	r17, 0x00	; 0
   3e7e4:	c5 01       	movw	r24, r10
   3e7e6:	e3 d2       	rcall	.+1478   	; 0x3edae <disk_readp>
		if (res != FR_OK) break;
   3e7e8:	81 11       	cpse	r24, r1
   3e7ea:	01 c1       	rjmp	.+514    	; 0x3e9ee <pf_open+0x300>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
   3e7ec:	89 81       	ldd	r24, Y+1	; 0x01
   3e7ee:	88 23       	and	r24, r24
   3e7f0:	09 f4       	brne	.+2      	; 0x3e7f4 <pf_open+0x106>
   3e7f2:	48 c0       	rjmp	.+144    	; 0x3e884 <pf_open+0x196>
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
   3e7f4:	8c 85       	ldd	r24, Y+12	; 0x0c
   3e7f6:	83 fd       	sbrc	r24, 3
   3e7f8:	12 c0       	rjmp	.+36     	; 0x3e81e <pf_open+0x130>
   3e7fa:	2b a1       	ldd	r18, Y+35	; 0x23
   3e7fc:	3c a1       	ldd	r19, Y+36	; 0x24
int mem_cmp (const void* dst, const void* src, int cnt) {
   3e7fe:	a9 01       	movw	r20, r18
   3e800:	45 5f       	subi	r20, 0xF5	; 245
   3e802:	5f 4f       	sbci	r21, 0xFF	; 255
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
   3e804:	f9 01       	movw	r30, r18
	const char *d = (const char *)dst, *s = (const char *)src;
   3e806:	6a 2d       	mov	r22, r10
   3e808:	9b 2d       	mov	r25, r11
	while (cnt-- && (r = *d++ - *s++) == 0) ;
   3e80a:	e4 17       	cp	r30, r20
   3e80c:	f5 07       	cpc	r31, r21
   3e80e:	09 f4       	brne	.+2      	; 0x3e812 <pf_open+0x124>
   3e810:	7a c0       	rjmp	.+244    	; 0x3e906 <pf_open+0x218>
   3e812:	a6 2f       	mov	r26, r22
   3e814:	b9 2f       	mov	r27, r25
   3e816:	6d 91       	ld	r22, X+
   3e818:	91 91       	ld	r25, Z+
   3e81a:	69 17       	cp	r22, r25
   3e81c:	d1 f1       	breq	.+116    	; 0x3e892 <pf_open+0x1a4>
	i = dj->index + 1;
   3e81e:	09 a1       	ldd	r16, Y+33	; 0x21
   3e820:	1a a1       	ldd	r17, Y+34	; 0x22
   3e822:	0f 5f       	subi	r16, 0xFF	; 255
   3e824:	1f 4f       	sbci	r17, 0xFF	; 255
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
   3e826:	71 f1       	breq	.+92     	; 0x3e884 <pf_open+0x196>
   3e828:	8d a5       	ldd	r24, Y+45	; 0x2d
   3e82a:	9e a5       	ldd	r25, Y+46	; 0x2e
   3e82c:	af a5       	ldd	r26, Y+47	; 0x2f
   3e82e:	b8 a9       	ldd	r27, Y+48	; 0x30
   3e830:	00 97       	sbiw	r24, 0x00	; 0
   3e832:	a1 05       	cpc	r26, r1
   3e834:	b1 05       	cpc	r27, r1
   3e836:	31 f1       	breq	.+76     	; 0x3e884 <pf_open+0x196>
	if (!(i % 16)) {		/* Sector changed? */
   3e838:	98 01       	movw	r18, r16
   3e83a:	2f 70       	andi	r18, 0x0F	; 15
   3e83c:	33 27       	eor	r19, r19
   3e83e:	23 2b       	or	r18, r19
   3e840:	09 f0       	breq	.+2      	; 0x3e844 <pf_open+0x156>
   3e842:	5a c0       	rjmp	.+180    	; 0x3e8f8 <pf_open+0x20a>
	FATFS *fs = FatFs;
   3e844:	80 90 4a 03 	lds	r8, 0x034A	; 0x80034a <FatFs>
   3e848:	90 90 4b 03 	lds	r9, 0x034B	; 0x80034b <FatFs+0x1>
		dj->sect++;			/* Next sector */
   3e84c:	01 96       	adiw	r24, 0x01	; 1
   3e84e:	a1 1d       	adc	r26, r1
   3e850:	b1 1d       	adc	r27, r1
   3e852:	8d a7       	std	Y+45, r24	; 0x2d
   3e854:	9e a7       	std	Y+46, r25	; 0x2e
   3e856:	af a7       	std	Y+47, r26	; 0x2f
   3e858:	b8 ab       	std	Y+48, r27	; 0x30
		if (dj->clust == 0) {	/* Static table */
   3e85a:	89 a5       	ldd	r24, Y+41	; 0x29
   3e85c:	9a a5       	ldd	r25, Y+42	; 0x2a
   3e85e:	ab a5       	ldd	r26, Y+43	; 0x2b
   3e860:	bc a5       	ldd	r27, Y+44	; 0x2c
   3e862:	21 96       	adiw	r28, 0x01	; 1
   3e864:	8c af       	std	Y+60, r24	; 0x3c
   3e866:	9d af       	std	Y+61, r25	; 0x3d
   3e868:	ae af       	std	Y+62, r26	; 0x3e
   3e86a:	bf af       	std	Y+63, r27	; 0x3f
   3e86c:	21 97       	sbiw	r28, 0x01	; 1
   3e86e:	89 2b       	or	r24, r25
   3e870:	8a 2b       	or	r24, r26
   3e872:	8b 2b       	or	r24, r27
   3e874:	89 f4       	brne	.+34     	; 0x3e898 <pf_open+0x1aa>
			if (i >= fs->n_rootdir)	/* Report EOT when end of table */
   3e876:	d4 01       	movw	r26, r8
   3e878:	14 96       	adiw	r26, 0x04	; 4
   3e87a:	8d 91       	ld	r24, X+
   3e87c:	9c 91       	ld	r25, X
   3e87e:	08 17       	cp	r16, r24
   3e880:	19 07       	cpc	r17, r25
   3e882:	d0 f1       	brcs	.+116    	; 0x3e8f8 <pf_open+0x20a>
				if (res == FR_NO_FILE && !*(dj->fn+11))
   3e884:	eb a1       	ldd	r30, Y+35	; 0x23
   3e886:	fc a1       	ldd	r31, Y+36	; 0x24
   3e888:	83 85       	ldd	r24, Z+11	; 0x0b
   3e88a:	81 11       	cpse	r24, r1
   3e88c:	75 cf       	rjmp	.-278    	; 0x3e778 <pf_open+0x8a>
					res = FR_NO_PATH;
   3e88e:	84 e0       	ldi	r24, 0x04	; 4
   3e890:	74 cf       	rjmp	.-280    	; 0x3e77a <pf_open+0x8c>
	while (cnt-- && (r = *d++ - *s++) == 0) ;
   3e892:	6a 2f       	mov	r22, r26
   3e894:	9b 2f       	mov	r25, r27
   3e896:	b9 cf       	rjmp	.-142    	; 0x3e80a <pf_open+0x11c>
			if (((i / 16) & (fs->csize-1)) == 0) {	/* Cluster changed? */
   3e898:	f4 01       	movw	r30, r8
   3e89a:	82 81       	ldd	r24, Z+2	; 0x02
   3e89c:	81 50       	subi	r24, 0x01	; 1
   3e89e:	99 0b       	sbc	r25, r25
   3e8a0:	98 01       	movw	r18, r16
   3e8a2:	44 e0       	ldi	r20, 0x04	; 4
   3e8a4:	36 95       	lsr	r19
   3e8a6:	27 95       	ror	r18
   3e8a8:	4a 95       	dec	r20
   3e8aa:	e1 f7       	brne	.-8      	; 0x3e8a4 <pf_open+0x1b6>
   3e8ac:	82 23       	and	r24, r18
   3e8ae:	93 23       	and	r25, r19
   3e8b0:	89 2b       	or	r24, r25
				clst = get_fat(dj->clust);		/* Get next cluster */
   3e8b2:	11 f5       	brne	.+68     	; 0x3e8f8 <pf_open+0x20a>
   3e8b4:	21 96       	adiw	r28, 0x01	; 1
   3e8b6:	6c ad       	ldd	r22, Y+60	; 0x3c
   3e8b8:	7d ad       	ldd	r23, Y+61	; 0x3d
   3e8ba:	8e ad       	ldd	r24, Y+62	; 0x3e
   3e8bc:	9f ad       	ldd	r25, Y+63	; 0x3f
   3e8be:	21 97       	sbiw	r28, 0x01	; 1
   3e8c0:	50 dd       	rcall	.-1376   	; 0x3e362 <get_fat>
				if (clst <= 1) return FR_DISK_ERR;
   3e8c2:	62 30       	cpi	r22, 0x02	; 2
   3e8c4:	71 05       	cpc	r23, r1
   3e8c6:	81 05       	cpc	r24, r1
   3e8c8:	91 05       	cpc	r25, r1
   3e8ca:	08 f4       	brcc	.+2      	; 0x3e8ce <pf_open+0x1e0>
   3e8cc:	90 c0       	rjmp	.+288    	; 0x3e9ee <pf_open+0x300>
				if (clst >= fs->n_fatent)		/* When it reached end of dynamic table */
   3e8ce:	d4 01       	movw	r26, r8
   3e8d0:	16 96       	adiw	r26, 0x06	; 6
   3e8d2:	4d 90       	ld	r4, X+
   3e8d4:	5d 90       	ld	r5, X+
   3e8d6:	6d 90       	ld	r6, X+
   3e8d8:	7c 90       	ld	r7, X
   3e8da:	19 97       	sbiw	r26, 0x09	; 9
   3e8dc:	64 15       	cp	r22, r4
   3e8de:	75 05       	cpc	r23, r5
   3e8e0:	86 05       	cpc	r24, r6
   3e8e2:	97 05       	cpc	r25, r7
				dj->clust = clst;				/* Initialize data for new cluster */
   3e8e4:	78 f6       	brcc	.-98     	; 0x3e884 <pf_open+0x196>
   3e8e6:	69 a7       	std	Y+41, r22	; 0x29
   3e8e8:	7a a7       	std	Y+42, r23	; 0x2a
   3e8ea:	8b a7       	std	Y+43, r24	; 0x2b
				dj->sect = clust2sect(clst);
   3e8ec:	9c a7       	std	Y+44, r25	; 0x2c
   3e8ee:	ad dc       	rcall	.-1702   	; 0x3e24a <clust2sect>
   3e8f0:	6d a7       	std	Y+45, r22	; 0x2d
   3e8f2:	7e a7       	std	Y+46, r23	; 0x2e
   3e8f4:	8f a7       	std	Y+47, r24	; 0x2f
   3e8f6:	98 ab       	std	Y+48, r25	; 0x30
	dj->index = i;
   3e8f8:	1a a3       	std	Y+34, r17	; 0x22
   3e8fa:	09 a3       	std	Y+33, r16	; 0x21
	} while (res == FR_OK);
   3e8fc:	64 cf       	rjmp	.-312    	; 0x3e7c6 <pf_open+0xd8>
				if (res == FR_NO_FILE && !*(dj->fn+11))
   3e8fe:	83 30       	cpi	r24, 0x03	; 3
   3e900:	09 f4       	brne	.+2      	; 0x3e904 <pf_open+0x216>
   3e902:	c0 cf       	rjmp	.-128    	; 0x3e884 <pf_open+0x196>
   3e904:	3a cf       	rjmp	.-396    	; 0x3e77a <pf_open+0x8c>
			if (*(dj->fn+11)) break;		/* Last segment match. Function completed. */
   3e906:	f9 01       	movw	r30, r18
   3e908:	93 85       	ldd	r25, Z+11	; 0x0b
   3e90a:	80 71       	andi	r24, 0x10	; 16
   3e90c:	91 11       	cpse	r25, r1
   3e90e:	42 c0       	rjmp	.+132    	; 0x3e994 <pf_open+0x2a6>
			if (!(dir[DIR_Attr] & AM_DIR)) { /* Cannot follow because it is a file */
   3e910:	09 f4       	brne	.+2      	; 0x3e914 <pf_open+0x226>
   3e912:	bd cf       	rjmp	.-134    	; 0x3e88e <pf_open+0x1a0>
			dj->sclust = LD_CLUST(dir);
   3e914:	8d 89       	ldd	r24, Y+21	; 0x15
   3e916:	9e 89       	ldd	r25, Y+22	; 0x16
   3e918:	b0 e0       	ldi	r27, 0x00	; 0
   3e91a:	a0 e0       	ldi	r26, 0x00	; 0
   3e91c:	dc 01       	movw	r26, r24
   3e91e:	99 27       	eor	r25, r25
   3e920:	88 27       	eor	r24, r24
   3e922:	4b 8d       	ldd	r20, Y+27	; 0x1b
   3e924:	5c 8d       	ldd	r21, Y+28	; 0x1c
   3e926:	70 e0       	ldi	r23, 0x00	; 0
   3e928:	60 e0       	ldi	r22, 0x00	; 0
   3e92a:	84 2b       	or	r24, r20
   3e92c:	95 2b       	or	r25, r21
   3e92e:	a6 2b       	or	r26, r22
   3e930:	b7 2b       	or	r27, r23
   3e932:	8d a3       	std	Y+37, r24	; 0x25
   3e934:	9e a3       	std	Y+38, r25	; 0x26
   3e936:	af a3       	std	Y+39, r26	; 0x27
			res = create_name(dj, &path);	/* Get a segment */
   3e938:	b8 a7       	std	Y+40, r27	; 0x28
   3e93a:	0b a1       	ldd	r16, Y+35	; 0x23
	while (cnt--) *d++ = (char)val;
   3e93c:	1c a1       	ldd	r17, Y+36	; 0x24
   3e93e:	4b e0       	ldi	r20, 0x0B	; 11
   3e940:	50 e0       	ldi	r21, 0x00	; 0
   3e942:	60 e2       	ldi	r22, 0x20	; 32
   3e944:	70 e0       	ldi	r23, 0x00	; 0
   3e946:	c8 01       	movw	r24, r16
   3e948:	29 d7       	rcall	.+3666   	; 0x3f79c <memset>
	si = i = 0; ni = 8;
   3e94a:	20 e0       	ldi	r18, 0x00	; 0
   3e94c:	80 e0       	ldi	r24, 0x00	; 0
   3e94e:	98 e0       	ldi	r25, 0x08	; 8
		c = p[si++];
   3e950:	41 e0       	ldi	r20, 0x01	; 1
   3e952:	48 0f       	add	r20, r24
   3e954:	f7 01       	movw	r30, r14
   3e956:	e8 0f       	add	r30, r24
   3e958:	f1 1d       	adc	r31, r1
   3e95a:	80 81       	ld	r24, Z
		if (c <= ' ' || c == '/') break;	/* Break on end of segment */
   3e95c:	81 32       	cpi	r24, 0x21	; 33
   3e95e:	08 f4       	brcc	.+2      	; 0x3e962 <pf_open+0x274>
   3e960:	24 cf       	rjmp	.-440    	; 0x3e7aa <pf_open+0xbc>
   3e962:	8f 32       	cpi	r24, 0x2F	; 47
   3e964:	09 f4       	brne	.+2      	; 0x3e968 <pf_open+0x27a>
   3e966:	21 cf       	rjmp	.-446    	; 0x3e7aa <pf_open+0xbc>
		if (c == '.' || i >= ni) {
   3e968:	8e 32       	cpi	r24, 0x2E	; 46
   3e96a:	09 f4       	brne	.+2      	; 0x3e96e <pf_open+0x280>
   3e96c:	42 c0       	rjmp	.+132    	; 0x3e9f2 <pf_open+0x304>
   3e96e:	29 17       	cp	r18, r25
   3e970:	08 f0       	brcs	.+2      	; 0x3e974 <pf_open+0x286>
   3e972:	1b cf       	rjmp	.-458    	; 0x3e7aa <pf_open+0xbc>
			if (IsLower(c)) c -= 0x20;	/* toupper */
   3e974:	3f e9       	ldi	r19, 0x9F	; 159
   3e976:	38 0f       	add	r19, r24
   3e978:	3a 31       	cpi	r19, 0x1A	; 26
   3e97a:	08 f4       	brcc	.+2      	; 0x3e97e <pf_open+0x290>
   3e97c:	80 52       	subi	r24, 0x20	; 32
			sfn[i++] = c;
   3e97e:	f8 01       	movw	r30, r16
   3e980:	e2 0f       	add	r30, r18
   3e982:	f1 1d       	adc	r31, r1
   3e984:	80 83       	st	Z, r24
   3e986:	39 2f       	mov	r19, r25
   3e988:	91 e0       	ldi	r25, 0x01	; 1
   3e98a:	92 0f       	add	r25, r18
			i = 8; ni = 11;
   3e98c:	29 2f       	mov	r18, r25
		c = p[si++];
   3e98e:	84 2f       	mov	r24, r20
   3e990:	93 2f       	mov	r25, r19
   3e992:	de cf       	rjmp	.-68     	; 0x3e950 <pf_open+0x262>
	if (!dir[0] || (dir[DIR_Attr] & AM_DIR))	/* It is a directory */
   3e994:	81 11       	cpse	r24, r1
   3e996:	f0 ce       	rjmp	.-544    	; 0x3e778 <pf_open+0x8a>
	fs->org_clust = LD_CLUST(dir);			/* File start cluster */
   3e998:	4d 89       	ldd	r20, Y+21	; 0x15
   3e99a:	5e 89       	ldd	r21, Y+22	; 0x16
   3e99c:	70 e0       	ldi	r23, 0x00	; 0
   3e99e:	60 e0       	ldi	r22, 0x00	; 0
   3e9a0:	ba 01       	movw	r22, r20
   3e9a2:	55 27       	eor	r21, r21
   3e9a4:	44 27       	eor	r20, r20
   3e9a6:	0b 8d       	ldd	r16, Y+27	; 0x1b
   3e9a8:	1c 8d       	ldd	r17, Y+28	; 0x1c
   3e9aa:	30 e0       	ldi	r19, 0x00	; 0
   3e9ac:	20 e0       	ldi	r18, 0x00	; 0
   3e9ae:	40 2b       	or	r20, r16
   3e9b0:	51 2b       	or	r21, r17
   3e9b2:	62 2b       	or	r22, r18
   3e9b4:	73 2b       	or	r23, r19
   3e9b6:	d6 01       	movw	r26, r12
   3e9b8:	5e 96       	adiw	r26, 0x1e	; 30
   3e9ba:	4d 93       	st	X+, r20
   3e9bc:	5d 93       	st	X+, r21
   3e9be:	6d 93       	st	X+, r22
   3e9c0:	7c 93       	st	X, r23
   3e9c2:	91 97       	sbiw	r26, 0x21	; 33
	fs->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
   3e9c4:	4d 8d       	ldd	r20, Y+29	; 0x1d
   3e9c6:	5e 8d       	ldd	r21, Y+30	; 0x1e
   3e9c8:	6f 8d       	ldd	r22, Y+31	; 0x1f
   3e9ca:	78 a1       	ldd	r23, Y+32	; 0x20
   3e9cc:	f6 01       	movw	r30, r12
   3e9ce:	42 8f       	std	Z+26, r20	; 0x1a
   3e9d0:	53 8f       	std	Z+27, r21	; 0x1b
   3e9d2:	64 8f       	std	Z+28, r22	; 0x1c
   3e9d4:	75 8f       	std	Z+29, r23	; 0x1d
	fs->fptr = 0;						/* File pointer */
   3e9d6:	56 96       	adiw	r26, 0x16	; 22
   3e9d8:	1d 92       	st	X+, r1
   3e9da:	1d 92       	st	X+, r1
   3e9dc:	1d 92       	st	X+, r1
   3e9de:	1c 92       	st	X, r1
   3e9e0:	59 97       	sbiw	r26, 0x19	; 25
	fs->flag = FA_OPENED;
   3e9e2:	91 e0       	ldi	r25, 0x01	; 1
   3e9e4:	11 96       	adiw	r26, 0x01	; 1
   3e9e6:	9c 93       	st	X, r25
	return FR_OK;
   3e9e8:	c8 ce       	rjmp	.-624    	; 0x3e77a <pf_open+0x8c>
		return FR_NOT_ENABLED;
   3e9ea:	86 e0       	ldi	r24, 0x06	; 6
   3e9ec:	c6 ce       	rjmp	.-628    	; 0x3e77a <pf_open+0x8c>
	while (cnt-- && (r = *d++ - *s++) == 0) ;
   3e9ee:	81 e0       	ldi	r24, 0x01	; 1
   3e9f0:	c4 ce       	rjmp	.-632    	; 0x3e77a <pf_open+0x8c>
			if (ni != 8 || c != '.') break;
   3e9f2:	98 30       	cpi	r25, 0x08	; 8
   3e9f4:	09 f0       	breq	.+2      	; 0x3e9f8 <pf_open+0x30a>
   3e9f6:	d9 ce       	rjmp	.-590    	; 0x3e7aa <pf_open+0xbc>
			i = 8; ni = 11;
   3e9f8:	3b e0       	ldi	r19, 0x0B	; 11
   3e9fa:	c8 cf       	rjmp	.-112    	; 0x3e98c <pf_open+0x29e>

0003e9fc <pf_read>:
FRESULT pf_read (
	void* buff,		/* Pointer to the read buffer (NULL:Forward data to the stream)*/
	WORD btr,		/* Number of bytes to read */
	WORD* br		/* Pointer to number of bytes read */
)
{
   3e9fc:	2f 92       	push	r2
   3e9fe:	3f 92       	push	r3
   3ea00:	4f 92       	push	r4
   3ea02:	5f 92       	push	r5
   3ea04:	7f 92       	push	r7
   3ea06:	8f 92       	push	r8
   3ea08:	9f 92       	push	r9
   3ea0a:	af 92       	push	r10
   3ea0c:	bf 92       	push	r11
   3ea0e:	cf 92       	push	r12
   3ea10:	df 92       	push	r13
   3ea12:	ef 92       	push	r14
   3ea14:	ff 92       	push	r15
   3ea16:	0f 93       	push	r16
   3ea18:	1f 93       	push	r17
   3ea1a:	cf 93       	push	r28
   3ea1c:	df 93       	push	r29
   3ea1e:	00 d0       	rcall	.+0      	; 0x3ea20 <pf_read+0x24>
   3ea20:	00 d0       	rcall	.+0      	; 0x3ea22 <pf_read+0x26>
   3ea22:	cd b7       	in	r28, 0x3d	; 61
   3ea24:	de b7       	in	r29, 0x3e	; 62
   3ea26:	2c 01       	movw	r4, r24
   3ea28:	7b 01       	movw	r14, r22
   3ea2a:	5a 01       	movw	r10, r20
	DRESULT dr;
	CLUST clst;
	DWORD sect, remain;
	WORD rcnt;
	BYTE cs, *rbuff = buff;
	FATFS *fs = FatFs;
   3ea2c:	80 91 4a 03 	lds	r24, 0x034A	; 0x80034a <FatFs>
   3ea30:	90 91 4b 03 	lds	r25, 0x034B	; 0x80034b <FatFs+0x1>
   3ea34:	9e 83       	std	Y+6, r25	; 0x06
   3ea36:	8d 83       	std	Y+5, r24	; 0x05


	*br = 0;
   3ea38:	da 01       	movw	r26, r20
   3ea3a:	1d 92       	st	X+, r1
   3ea3c:	1c 92       	st	X, r1
	if (!fs) return FR_NOT_ENABLED;		/* Check file system */
   3ea3e:	00 97       	sbiw	r24, 0x00	; 0
   3ea40:	09 f4       	brne	.+2      	; 0x3ea44 <pf_read+0x48>
   3ea42:	e3 c0       	rjmp	.+454    	; 0x3ec0a <pf_read+0x20e>
	if (!(fs->flag & FA_OPENED))		/* Check if opened */
   3ea44:	fc 01       	movw	r30, r24
   3ea46:	81 81       	ldd	r24, Z+1	; 0x01
   3ea48:	f8 2f       	mov	r31, r24
   3ea4a:	f1 70       	andi	r31, 0x01	; 1
   3ea4c:	7f 2e       	mov	r7, r31
   3ea4e:	80 ff       	sbrs	r24, 0
   3ea50:	df c0       	rjmp	.+446    	; 0x3ec10 <pf_read+0x214>
		return FR_NOT_OPENED;

	remain = fs->fsize - fs->fptr;
   3ea52:	ed 81       	ldd	r30, Y+5	; 0x05
   3ea54:	fe 81       	ldd	r31, Y+6	; 0x06
   3ea56:	82 8d       	ldd	r24, Z+26	; 0x1a
   3ea58:	93 8d       	ldd	r25, Z+27	; 0x1b
   3ea5a:	a4 8d       	ldd	r26, Z+28	; 0x1c
   3ea5c:	b5 8d       	ldd	r27, Z+29	; 0x1d
   3ea5e:	46 89       	ldd	r20, Z+22	; 0x16
   3ea60:	57 89       	ldd	r21, Z+23	; 0x17
   3ea62:	60 8d       	ldd	r22, Z+24	; 0x18
   3ea64:	71 8d       	ldd	r23, Z+25	; 0x19
   3ea66:	84 1b       	sub	r24, r20
   3ea68:	95 0b       	sbc	r25, r21
   3ea6a:	a6 0b       	sbc	r26, r22
   3ea6c:	b7 0b       	sbc	r27, r23
	if (btr > remain) btr = (WORD)remain;			/* Truncate btr by remaining bytes */
   3ea6e:	a7 01       	movw	r20, r14
   3ea70:	70 e0       	ldi	r23, 0x00	; 0
   3ea72:	60 e0       	ldi	r22, 0x00	; 0
   3ea74:	84 17       	cp	r24, r20
   3ea76:	95 07       	cpc	r25, r21
   3ea78:	a6 07       	cpc	r26, r22
   3ea7a:	b7 07       	cpc	r27, r23
   3ea7c:	08 f4       	brcc	.+2      	; 0x3ea80 <pf_read+0x84>
   3ea7e:	7c 01       	movw	r14, r24
			if (!sect) goto fr_abort;
			fs->dsect = sect + cs;
		}
		rcnt = (WORD)(512 - (fs->fptr % 512));		/* Get partial sector data from sector buffer */
		if (rcnt > btr) rcnt = btr;
		dr = disk_readp(!buff ? 0 : rbuff, fs->dsect, (WORD)(fs->fptr % 512), rcnt);
   3ea80:	42 01       	movw	r8, r4
		rcnt = (WORD)(512 - (fs->fptr % 512));		/* Get partial sector data from sector buffer */
   3ea82:	21 2c       	mov	r2, r1
   3ea84:	32 e0       	ldi	r19, 0x02	; 2
   3ea86:	33 2e       	mov	r3, r19
	while (btr)	{									/* Repeat until all data transferred */
   3ea88:	e1 14       	cp	r14, r1
   3ea8a:	f1 04       	cpc	r15, r1
   3ea8c:	d1 f4       	brne	.+52     	; 0x3eac2 <pf_read+0xc6>
		if (dr) goto fr_abort;
		fs->fptr += rcnt; rbuff += rcnt;			/* Update pointers and counters */
		btr -= rcnt; *br += rcnt;
	}

	return FR_OK;
   3ea8e:	71 2c       	mov	r7, r1

fr_abort:
	fs->flag = 0;
	return FR_DISK_ERR;
}
   3ea90:	87 2d       	mov	r24, r7
   3ea92:	26 96       	adiw	r28, 0x06	; 6
   3ea94:	0f b6       	in	r0, 0x3f	; 63
   3ea96:	f8 94       	cli
   3ea98:	de bf       	out	0x3e, r29	; 62
   3ea9a:	0f be       	out	0x3f, r0	; 63
   3ea9c:	cd bf       	out	0x3d, r28	; 61
   3ea9e:	df 91       	pop	r29
   3eaa0:	cf 91       	pop	r28
   3eaa2:	1f 91       	pop	r17
   3eaa4:	0f 91       	pop	r16
   3eaa6:	ff 90       	pop	r15
   3eaa8:	ef 90       	pop	r14
   3eaaa:	df 90       	pop	r13
   3eaac:	cf 90       	pop	r12
   3eaae:	bf 90       	pop	r11
   3eab0:	af 90       	pop	r10
   3eab2:	9f 90       	pop	r9
   3eab4:	8f 90       	pop	r8
   3eab6:	7f 90       	pop	r7
   3eab8:	5f 90       	pop	r5
   3eaba:	4f 90       	pop	r4
   3eabc:	3f 90       	pop	r3
   3eabe:	2f 90       	pop	r2
   3eac0:	08 95       	ret
		if ((fs->fptr % 512) == 0) {				/* On the sector boundary? */
   3eac2:	ed 81       	ldd	r30, Y+5	; 0x05
   3eac4:	fe 81       	ldd	r31, Y+6	; 0x06
   3eac6:	86 89       	ldd	r24, Z+22	; 0x16
   3eac8:	97 89       	ldd	r25, Z+23	; 0x17
   3eaca:	a0 8d       	ldd	r26, Z+24	; 0x18
   3eacc:	b1 8d       	ldd	r27, Z+25	; 0x19
   3eace:	ac 01       	movw	r20, r24
   3ead0:	bd 01       	movw	r22, r26
   3ead2:	51 70       	andi	r21, 0x01	; 1
   3ead4:	66 27       	eor	r22, r22
   3ead6:	77 27       	eor	r23, r23
   3ead8:	45 2b       	or	r20, r21
   3eada:	46 2b       	or	r20, r22
   3eadc:	47 2b       	or	r20, r23
   3eade:	09 f0       	breq	.+2      	; 0x3eae2 <pf_read+0xe6>
   3eae0:	44 c0       	rjmp	.+136    	; 0x3eb6a <pf_read+0x16e>
			cs = (BYTE)(fs->fptr / 512 & (fs->csize - 1));	/* Sector offset in the cluster */
   3eae2:	d2 80       	ldd	r13, Z+2	; 0x02
   3eae4:	da 94       	dec	r13
   3eae6:	ac 01       	movw	r20, r24
   3eae8:	bd 01       	movw	r22, r26
   3eaea:	29 e0       	ldi	r18, 0x09	; 9
   3eaec:	76 95       	lsr	r23
   3eaee:	67 95       	ror	r22
   3eaf0:	57 95       	ror	r21
   3eaf2:	47 95       	ror	r20
   3eaf4:	2a 95       	dec	r18
   3eaf6:	d1 f7       	brne	.-12     	; 0x3eaec <pf_read+0xf0>
   3eaf8:	d4 22       	and	r13, r20
			if (!cs) {								/* On the cluster boundary? */
   3eafa:	a9 f4       	brne	.+42     	; 0x3eb26 <pf_read+0x12a>
					fs->org_clust : get_fat(fs->curr_clust);
   3eafc:	89 2b       	or	r24, r25
   3eafe:	8a 2b       	or	r24, r26
   3eb00:	8b 2b       	or	r24, r27
   3eb02:	09 f0       	breq	.+2      	; 0x3eb06 <pf_read+0x10a>
   3eb04:	6b c0       	rjmp	.+214    	; 0x3ebdc <pf_read+0x1e0>
   3eb06:	46 8d       	ldd	r20, Z+30	; 0x1e
   3eb08:	57 8d       	ldd	r21, Z+31	; 0x1f
   3eb0a:	60 a1       	ldd	r22, Z+32	; 0x20
   3eb0c:	71 a1       	ldd	r23, Z+33	; 0x21
				if (clst <= 1) goto fr_abort;
   3eb0e:	42 30       	cpi	r20, 0x02	; 2
   3eb10:	51 05       	cpc	r21, r1
   3eb12:	61 05       	cpc	r22, r1
   3eb14:	71 05       	cpc	r23, r1
   3eb16:	08 f4       	brcc	.+2      	; 0x3eb1a <pf_read+0x11e>
   3eb18:	74 c0       	rjmp	.+232    	; 0x3ec02 <pf_read+0x206>
				fs->curr_clust = clst;				/* Update current cluster */
   3eb1a:	ed 81       	ldd	r30, Y+5	; 0x05
   3eb1c:	fe 81       	ldd	r31, Y+6	; 0x06
   3eb1e:	42 a3       	std	Z+34, r20	; 0x22
   3eb20:	53 a3       	std	Z+35, r21	; 0x23
   3eb22:	64 a3       	std	Z+36, r22	; 0x24
			sect = clust2sect(fs->curr_clust);		/* Get current sector */
   3eb24:	75 a3       	std	Z+37, r23	; 0x25
   3eb26:	ad 81       	ldd	r26, Y+5	; 0x05
   3eb28:	be 81       	ldd	r27, Y+6	; 0x06
   3eb2a:	92 96       	adiw	r26, 0x22	; 34
   3eb2c:	8d 91       	ld	r24, X+
   3eb2e:	9d 91       	ld	r25, X+
   3eb30:	0d 90       	ld	r0, X+
   3eb32:	bc 91       	ld	r27, X
   3eb34:	a0 2d       	mov	r26, r0
   3eb36:	89 83       	std	Y+1, r24	; 0x01
   3eb38:	9a 83       	std	Y+2, r25	; 0x02
   3eb3a:	ab 83       	std	Y+3, r26	; 0x03
   3eb3c:	bc 83       	std	Y+4, r27	; 0x04
   3eb3e:	bc 01       	movw	r22, r24
   3eb40:	cd 01       	movw	r24, r26
   3eb42:	83 db       	rcall	.-2298   	; 0x3e24a <clust2sect>
   3eb44:	46 2f       	mov	r20, r22
   3eb46:	57 2f       	mov	r21, r23
   3eb48:	bc 01       	movw	r22, r24
			if (!sect) goto fr_abort;
   3eb4a:	41 15       	cp	r20, r1
   3eb4c:	51 05       	cpc	r21, r1
   3eb4e:	61 05       	cpc	r22, r1
   3eb50:	71 05       	cpc	r23, r1
   3eb52:	09 f4       	brne	.+2      	; 0x3eb56 <pf_read+0x15a>
   3eb54:	56 c0       	rjmp	.+172    	; 0x3ec02 <pf_read+0x206>
			fs->dsect = sect + cs;
   3eb56:	4d 0d       	add	r20, r13
   3eb58:	51 1d       	adc	r21, r1
   3eb5a:	61 1d       	adc	r22, r1
   3eb5c:	71 1d       	adc	r23, r1
   3eb5e:	ed 81       	ldd	r30, Y+5	; 0x05
   3eb60:	fe 81       	ldd	r31, Y+6	; 0x06
   3eb62:	46 a3       	std	Z+38, r20	; 0x26
   3eb64:	57 a3       	std	Z+39, r21	; 0x27
   3eb66:	60 a7       	std	Z+40, r22	; 0x28
   3eb68:	71 a7       	std	Z+41, r23	; 0x29
		rcnt = (WORD)(512 - (fs->fptr % 512));		/* Get partial sector data from sector buffer */
   3eb6a:	ad 81       	ldd	r26, Y+5	; 0x05
   3eb6c:	be 81       	ldd	r27, Y+6	; 0x06
   3eb6e:	56 96       	adiw	r26, 0x16	; 22
   3eb70:	2d 91       	ld	r18, X+
   3eb72:	3c 91       	ld	r19, X
   3eb74:	31 70       	andi	r19, 0x01	; 1
   3eb76:	c1 01       	movw	r24, r2
   3eb78:	82 1b       	sub	r24, r18
   3eb7a:	93 0b       	sbc	r25, r19
		if (rcnt > btr) rcnt = btr;
   3eb7c:	67 01       	movw	r12, r14
   3eb7e:	8e 15       	cp	r24, r14
   3eb80:	9f 05       	cpc	r25, r15
   3eb82:	08 f4       	brcc	.+2      	; 0x3eb86 <pf_read+0x18a>
		dr = disk_readp(!buff ? 0 : rbuff, fs->dsect, (WORD)(fs->fptr % 512), rcnt);
   3eb84:	6c 01       	movw	r12, r24
   3eb86:	ed 81       	ldd	r30, Y+5	; 0x05
   3eb88:	fe 81       	ldd	r31, Y+6	; 0x06
   3eb8a:	46 a1       	ldd	r20, Z+38	; 0x26
   3eb8c:	57 a1       	ldd	r21, Z+39	; 0x27
   3eb8e:	60 a5       	ldd	r22, Z+40	; 0x28
   3eb90:	71 a5       	ldd	r23, Z+41	; 0x29
   3eb92:	c4 01       	movw	r24, r8
   3eb94:	41 14       	cp	r4, r1
   3eb96:	51 04       	cpc	r5, r1
   3eb98:	11 f4       	brne	.+4      	; 0x3eb9e <pf_read+0x1a2>
   3eb9a:	80 e0       	ldi	r24, 0x00	; 0
   3eb9c:	90 e0       	ldi	r25, 0x00	; 0
   3eb9e:	86 01       	movw	r16, r12
   3eba0:	06 d1       	rcall	.+524    	; 0x3edae <disk_readp>
		if (dr) goto fr_abort;
   3eba2:	81 11       	cpse	r24, r1
   3eba4:	2e c0       	rjmp	.+92     	; 0x3ec02 <pf_read+0x206>
		fs->fptr += rcnt; rbuff += rcnt;			/* Update pointers and counters */
   3eba6:	ed 81       	ldd	r30, Y+5	; 0x05
   3eba8:	fe 81       	ldd	r31, Y+6	; 0x06
   3ebaa:	86 89       	ldd	r24, Z+22	; 0x16
   3ebac:	97 89       	ldd	r25, Z+23	; 0x17
   3ebae:	a0 8d       	ldd	r26, Z+24	; 0x18
   3ebb0:	b1 8d       	ldd	r27, Z+25	; 0x19
   3ebb2:	8c 0d       	add	r24, r12
   3ebb4:	9d 1d       	adc	r25, r13
   3ebb6:	a1 1d       	adc	r26, r1
   3ebb8:	b1 1d       	adc	r27, r1
   3ebba:	86 8b       	std	Z+22, r24	; 0x16
   3ebbc:	97 8b       	std	Z+23, r25	; 0x17
   3ebbe:	a0 8f       	std	Z+24, r26	; 0x18
   3ebc0:	b1 8f       	std	Z+25, r27	; 0x19
   3ebc2:	8c 0c       	add	r8, r12
   3ebc4:	9d 1c       	adc	r9, r13
		btr -= rcnt; *br += rcnt;
   3ebc6:	ec 18       	sub	r14, r12
   3ebc8:	fd 08       	sbc	r15, r13
   3ebca:	d5 01       	movw	r26, r10
   3ebcc:	8d 91       	ld	r24, X+
   3ebce:	9c 91       	ld	r25, X
   3ebd0:	11 97       	sbiw	r26, 0x01	; 1
   3ebd2:	c8 0e       	add	r12, r24
   3ebd4:	d9 1e       	adc	r13, r25
   3ebd6:	cd 92       	st	X+, r12
   3ebd8:	dc 92       	st	X, r13
					fs->org_clust : get_fat(fs->curr_clust);
   3ebda:	56 cf       	rjmp	.-340    	; 0x3ea88 <pf_read+0x8c>
   3ebdc:	ad 81       	ldd	r26, Y+5	; 0x05
   3ebde:	be 81       	ldd	r27, Y+6	; 0x06
   3ebe0:	92 96       	adiw	r26, 0x22	; 34
   3ebe2:	8d 91       	ld	r24, X+
   3ebe4:	9d 91       	ld	r25, X+
   3ebe6:	0d 90       	ld	r0, X+
   3ebe8:	bc 91       	ld	r27, X
   3ebea:	a0 2d       	mov	r26, r0
   3ebec:	89 83       	std	Y+1, r24	; 0x01
   3ebee:	9a 83       	std	Y+2, r25	; 0x02
   3ebf0:	ab 83       	std	Y+3, r26	; 0x03
   3ebf2:	bc 83       	std	Y+4, r27	; 0x04
   3ebf4:	bc 01       	movw	r22, r24
   3ebf6:	cd 01       	movw	r24, r26
   3ebf8:	b4 db       	rcall	.-2200   	; 0x3e362 <get_fat>
   3ebfa:	46 2f       	mov	r20, r22
   3ebfc:	57 2f       	mov	r21, r23
   3ebfe:	bc 01       	movw	r22, r24
   3ec00:	86 cf       	rjmp	.-244    	; 0x3eb0e <pf_read+0x112>
	fs->flag = 0;
   3ec02:	ed 81       	ldd	r30, Y+5	; 0x05
   3ec04:	fe 81       	ldd	r31, Y+6	; 0x06
   3ec06:	11 82       	std	Z+1, r1	; 0x01
	return FR_DISK_ERR;
   3ec08:	43 cf       	rjmp	.-378    	; 0x3ea90 <pf_read+0x94>
	if (!fs) return FR_NOT_ENABLED;		/* Check file system */
   3ec0a:	96 e0       	ldi	r25, 0x06	; 6
   3ec0c:	79 2e       	mov	r7, r25
   3ec0e:	40 cf       	rjmp	.-384    	; 0x3ea90 <pf_read+0x94>
		return FR_NOT_OPENED;
   3ec10:	85 e0       	ldi	r24, 0x05	; 5
   3ec12:	78 2e       	mov	r7, r24
   3ec14:	3d cf       	rjmp	.-390    	; 0x3ea90 <pf_read+0x94>

0003ec16 <send_cmd>:
static
BYTE send_cmd (
	BYTE cmd,		/* 1st byte (Start + Index) */
	DWORD arg		/* Argument (32 bits) */
)
{
   3ec16:	ff 92       	push	r15
   3ec18:	0f 93       	push	r16
   3ec1a:	1f 93       	push	r17
   3ec1c:	cf 93       	push	r28
   3ec1e:	df 93       	push	r29
   3ec20:	c8 2f       	mov	r28, r24
   3ec22:	d4 2f       	mov	r29, r20
   3ec24:	15 2f       	mov	r17, r21
   3ec26:	06 2f       	mov	r16, r22
   3ec28:	f7 2e       	mov	r15, r23
	BYTE n, res;


	if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
   3ec2a:	87 ff       	sbrs	r24, 7
   3ec2c:	08 c0       	rjmp	.+16     	; 0x3ec3e <send_cmd+0x28>
		cmd &= 0x7F;
		res = send_cmd(CMD55, 0);
   3ec2e:	40 e0       	ldi	r20, 0x00	; 0
   3ec30:	50 e0       	ldi	r21, 0x00	; 0
   3ec32:	ba 01       	movw	r22, r20
   3ec34:	87 e7       	ldi	r24, 0x77	; 119
   3ec36:	ef df       	rcall	.-34     	; 0x3ec16 <send_cmd>
		if (res > 1) return res;
   3ec38:	82 30       	cpi	r24, 0x02	; 2
   3ec3a:	d0 f4       	brcc	.+52     	; 0x3ec70 <send_cmd+0x5a>
	}

	/* Select the card */
	select();
   3ec3c:	cf 77       	andi	r28, 0x7F	; 127

	/* Send a command packet */
	xmit_spi(cmd);						/* Start + Command index */
   3ec3e:	15 d1       	rcall	.+554    	; 0x3ee6a <select>
   3ec40:	8c 2f       	mov	r24, r28
	xmit_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
   3ec42:	18 d1       	rcall	.+560    	; 0x3ee74 <xmit_spi>
   3ec44:	8f 2d       	mov	r24, r15
	xmit_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
   3ec46:	16 d1       	rcall	.+556    	; 0x3ee74 <xmit_spi>
   3ec48:	80 2f       	mov	r24, r16
	xmit_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
   3ec4a:	14 d1       	rcall	.+552    	; 0x3ee74 <xmit_spi>
   3ec4c:	81 2f       	mov	r24, r17
   3ec4e:	12 d1       	rcall	.+548    	; 0x3ee74 <xmit_spi>
	xmit_spi((BYTE)arg);				/* Argument[7..0] */
   3ec50:	8d 2f       	mov	r24, r29
   3ec52:	10 d1       	rcall	.+544    	; 0x3ee74 <xmit_spi>
   3ec54:	85 e9       	ldi	r24, 0x95	; 149
	n = 0x01;							/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
   3ec56:	c0 34       	cpi	r28, 0x40	; 64
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
   3ec58:	21 f0       	breq	.+8      	; 0x3ec62 <send_cmd+0x4c>
   3ec5a:	87 e8       	ldi	r24, 0x87	; 135
   3ec5c:	c8 34       	cpi	r28, 0x48	; 72
	n = 0x01;							/* Dummy CRC + Stop */
   3ec5e:	09 f0       	breq	.+2      	; 0x3ec62 <send_cmd+0x4c>
	xmit_spi(n);
   3ec60:	81 e0       	ldi	r24, 0x01	; 1
   3ec62:	08 d1       	rcall	.+528    	; 0x3ee74 <xmit_spi>
   3ec64:	ca e0       	ldi	r28, 0x0A	; 10

	/* Receive a command response */
	n = 10;								/* Wait for a valid response in timeout of 10 attempts */
	do {
		res = rcv_spi();
   3ec66:	05 d1       	rcall	.+522    	; 0x3ee72 <rcv_spi>
   3ec68:	87 ff       	sbrs	r24, 7
	} while ((res & 0x80) && --n);
   3ec6a:	02 c0       	rjmp	.+4      	; 0x3ec70 <send_cmd+0x5a>
   3ec6c:	c1 50       	subi	r28, 0x01	; 1
   3ec6e:	d9 f7       	brne	.-10     	; 0x3ec66 <send_cmd+0x50>
   3ec70:	df 91       	pop	r29

	return res;			/* Return with the response value */
}
   3ec72:	cf 91       	pop	r28
   3ec74:	1f 91       	pop	r17
   3ec76:	0f 91       	pop	r16
   3ec78:	ff 90       	pop	r15
   3ec7a:	08 95       	ret

0003ec7c <disk_initialize>:
/*-----------------------------------------------------------------------*/
/* Initialize Disk Drive                                                 */
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize (void)
{
   3ec7c:	cf 92       	push	r12
   3ec7e:	df 92       	push	r13
   3ec80:	ef 92       	push	r14
   3ec82:	ff 92       	push	r15
   3ec84:	0f 93       	push	r16
   3ec86:	1f 93       	push	r17
   3ec88:	cf 93       	push	r28
   3ec8a:	df 93       	push	r29
   3ec8c:	00 d0       	rcall	.+0      	; 0x3ec8e <disk_initialize+0x12>
	BYTE n, cmd, ty, ocr[4];
	UINT tmr;

	init_spi();							/* Initialize ports to control MMC */
   3ec8e:	0f 92       	push	r0
   3ec90:	cd b7       	in	r28, 0x3d	; 61
   3ec92:	de b7       	in	r29, 0x3e	; 62
	for (n = 100; n; n--) dly_100us();	/* 10ms delay */
   3ec94:	dd d0       	rcall	.+442    	; 0x3ee50 <init_spi>
   3ec96:	14 e6       	ldi	r17, 0x64	; 100
   3ec98:	e0 d0       	rcall	.+448    	; 0x3ee5a <dly_100us>
   3ec9a:	11 50       	subi	r17, 0x01	; 1
	for (n = 10; n; n--) deselect();	/* 80 Dummy clocks with CS=H */
   3ec9c:	e9 f7       	brne	.-6      	; 0x3ec98 <disk_initialize+0x1c>
   3ec9e:	1a e0       	ldi	r17, 0x0A	; 10
   3eca0:	e7 d0       	rcall	.+462    	; 0x3ee70 <deselect>
   3eca2:	11 50       	subi	r17, 0x01	; 1

	ty = 0;
	if (send_cmd(CMD0, 0) == 1) {			/* Enter Idle state */
   3eca4:	e9 f7       	brne	.-6      	; 0x3eca0 <disk_initialize+0x24>
   3eca6:	40 e0       	ldi	r20, 0x00	; 0
   3eca8:	50 e0       	ldi	r21, 0x00	; 0
   3ecaa:	ba 01       	movw	r22, r20
   3ecac:	80 e4       	ldi	r24, 0x40	; 64
   3ecae:	b3 df       	rcall	.-154    	; 0x3ec16 <send_cmd>
   3ecb0:	18 2f       	mov	r17, r24
   3ecb2:	81 30       	cpi	r24, 0x01	; 1
   3ecb4:	09 f0       	breq	.+2      	; 0x3ecb8 <disk_initialize+0x3c>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2 */
   3ecb6:	43 c0       	rjmp	.+134    	; 0x3ed3e <disk_initialize+0xc2>
   3ecb8:	4a ea       	ldi	r20, 0xAA	; 170
   3ecba:	51 e0       	ldi	r21, 0x01	; 1
   3ecbc:	60 e0       	ldi	r22, 0x00	; 0
   3ecbe:	70 e0       	ldi	r23, 0x00	; 0
   3ecc0:	88 e4       	ldi	r24, 0x48	; 72
   3ecc2:	a9 df       	rcall	.-174    	; 0x3ec16 <send_cmd>
   3ecc4:	81 30       	cpi	r24, 0x01	; 1
   3ecc6:	09 f0       	breq	.+2      	; 0x3ecca <disk_initialize+0x4e>
   3ecc8:	4e c0       	rjmp	.+156    	; 0x3ed66 <disk_initialize+0xea>
   3ecca:	8e 01       	movw	r16, r28
   3eccc:	0f 5f       	subi	r16, 0xFF	; 255
   3ecce:	1f 4f       	sbci	r17, 0xFF	; 255
   3ecd0:	6e 01       	movw	r12, r28
   3ecd2:	85 e0       	ldi	r24, 0x05	; 5
   3ecd4:	c8 0e       	add	r12, r24
   3ecd6:	d1 1c       	adc	r13, r1
			for (n = 0; n < 4; n++) ocr[n] = rcv_spi();		/* Get trailing return value of R7 resp */
   3ecd8:	78 01       	movw	r14, r16
   3ecda:	cb d0       	rcall	.+406    	; 0x3ee72 <rcv_spi>
   3ecdc:	f7 01       	movw	r30, r14
   3ecde:	81 93       	st	Z+, r24
   3ece0:	7f 01       	movw	r14, r30
   3ece2:	ec 15       	cp	r30, r12
   3ece4:	fd 05       	cpc	r31, r13
   3ece6:	c9 f7       	brne	.-14     	; 0x3ecda <disk_initialize+0x5e>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {			/* The card can work at vdd range of 2.7-3.6V */
   3ece8:	8b 81       	ldd	r24, Y+3	; 0x03
   3ecea:	81 30       	cpi	r24, 0x01	; 1
   3ecec:	41 f5       	brne	.+80     	; 0x3ed3e <disk_initialize+0xc2>
   3ecee:	8c 81       	ldd	r24, Y+4	; 0x04
   3ecf0:	8a 3a       	cpi	r24, 0xAA	; 170
   3ecf2:	29 f5       	brne	.+74     	; 0x3ed3e <disk_initialize+0xc2>
   3ecf4:	90 e1       	ldi	r25, 0x10	; 16
   3ecf6:	e9 2e       	mov	r14, r25
				for (tmr = 10000; tmr && send_cmd(ACMD41, 1UL << 30); tmr--) dly_100us();	/* Wait for leaving idle state (ACMD41 with HCS bit) */
   3ecf8:	97 e2       	ldi	r25, 0x27	; 39
   3ecfa:	f9 2e       	mov	r15, r25
   3ecfc:	40 e0       	ldi	r20, 0x00	; 0
   3ecfe:	50 e0       	ldi	r21, 0x00	; 0
   3ed00:	60 e0       	ldi	r22, 0x00	; 0
   3ed02:	70 e4       	ldi	r23, 0x40	; 64
   3ed04:	89 ee       	ldi	r24, 0xE9	; 233
   3ed06:	87 df       	rcall	.-242    	; 0x3ec16 <send_cmd>
				if (tmr && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
   3ed08:	81 11       	cpse	r24, r1
   3ed0a:	14 c0       	rjmp	.+40     	; 0x3ed34 <disk_initialize+0xb8>
   3ed0c:	40 e0       	ldi	r20, 0x00	; 0
   3ed0e:	50 e0       	ldi	r21, 0x00	; 0
   3ed10:	ba 01       	movw	r22, r20
   3ed12:	8a e7       	ldi	r24, 0x7A	; 122
   3ed14:	80 df       	rcall	.-256    	; 0x3ec16 <send_cmd>
					for (n = 0; n < 4; n++) ocr[n] = rcv_spi();
   3ed16:	81 11       	cpse	r24, r1
   3ed18:	12 c0       	rjmp	.+36     	; 0x3ed3e <disk_initialize+0xc2>
   3ed1a:	ab d0       	rcall	.+342    	; 0x3ee72 <rcv_spi>
   3ed1c:	f8 01       	movw	r30, r16
   3ed1e:	81 93       	st	Z+, r24
   3ed20:	8f 01       	movw	r16, r30
   3ed22:	ce 16       	cp	r12, r30
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* SDv2 (HC or SC) */
   3ed24:	df 06       	cpc	r13, r31
   3ed26:	c9 f7       	brne	.-14     	; 0x3ed1a <disk_initialize+0x9e>
   3ed28:	89 81       	ldd	r24, Y+1	; 0x01
   3ed2a:	14 e0       	ldi	r17, 0x04	; 4
   3ed2c:	86 ff       	sbrs	r24, 6
   3ed2e:	08 c0       	rjmp	.+16     	; 0x3ed40 <disk_initialize+0xc4>
				for (tmr = 10000; tmr && send_cmd(ACMD41, 1UL << 30); tmr--) dly_100us();	/* Wait for leaving idle state (ACMD41 with HCS bit) */
   3ed30:	1c e0       	ldi	r17, 0x0C	; 12
   3ed32:	06 c0       	rjmp	.+12     	; 0x3ed40 <disk_initialize+0xc4>
   3ed34:	92 d0       	rcall	.+292    	; 0x3ee5a <dly_100us>
   3ed36:	f1 e0       	ldi	r31, 0x01	; 1
   3ed38:	ef 1a       	sub	r14, r31
   3ed3a:	f1 08       	sbc	r15, r1
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 */
			}
			for (tmr = 10000; tmr && send_cmd(cmd, 0); tmr--) dly_100us();	/* Wait for leaving idle state */
			if (!tmr || send_cmd(CMD16, 512) != 0)			/* Set R/W block length to 512 */
				ty = 0;
   3ed3c:	f9 f6       	brne	.-66     	; 0x3ecfc <disk_initialize+0x80>
		}
	}
	CardType = ty;
   3ed3e:	10 e0       	ldi	r17, 0x00	; 0
   3ed40:	10 93 4c 03 	sts	0x034C, r17	; 0x80034c <CardType>
	deselect();
   3ed44:	95 d0       	rcall	.+298    	; 0x3ee70 <deselect>

	return ty ? 0 : STA_NOINIT;
   3ed46:	81 e0       	ldi	r24, 0x01	; 1
   3ed48:	11 11       	cpse	r17, r1
}
   3ed4a:	80 e0       	ldi	r24, 0x00	; 0
   3ed4c:	0f 90       	pop	r0
   3ed4e:	0f 90       	pop	r0
   3ed50:	0f 90       	pop	r0
   3ed52:	0f 90       	pop	r0
   3ed54:	df 91       	pop	r29
   3ed56:	cf 91       	pop	r28
   3ed58:	1f 91       	pop	r17
   3ed5a:	0f 91       	pop	r16
   3ed5c:	ff 90       	pop	r15
   3ed5e:	ef 90       	pop	r14
   3ed60:	df 90       	pop	r13
			if (send_cmd(ACMD41, 0) <= 1) 	{
   3ed62:	cf 90       	pop	r12
   3ed64:	08 95       	ret
   3ed66:	40 e0       	ldi	r20, 0x00	; 0
   3ed68:	50 e0       	ldi	r21, 0x00	; 0
   3ed6a:	ba 01       	movw	r22, r20
   3ed6c:	89 ee       	ldi	r24, 0xE9	; 233
   3ed6e:	53 df       	rcall	.-346    	; 0x3ec16 <send_cmd>
   3ed70:	01 e4       	ldi	r16, 0x41	; 65
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 */
   3ed72:	82 30       	cpi	r24, 0x02	; 2
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 */
   3ed74:	10 f4       	brcc	.+4      	; 0x3ed7a <disk_initialize+0xfe>
   3ed76:	12 e0       	ldi	r17, 0x02	; 2
   3ed78:	09 ee       	ldi	r16, 0xE9	; 233
   3ed7a:	80 e1       	ldi	r24, 0x10	; 16
			for (tmr = 10000; tmr && send_cmd(cmd, 0); tmr--) dly_100us();	/* Wait for leaving idle state */
   3ed7c:	e8 2e       	mov	r14, r24
   3ed7e:	87 e2       	ldi	r24, 0x27	; 39
   3ed80:	f8 2e       	mov	r15, r24
   3ed82:	40 e0       	ldi	r20, 0x00	; 0
   3ed84:	50 e0       	ldi	r21, 0x00	; 0
   3ed86:	ba 01       	movw	r22, r20
   3ed88:	80 2f       	mov	r24, r16
   3ed8a:	45 df       	rcall	.-374    	; 0x3ec16 <send_cmd>
			if (!tmr || send_cmd(CMD16, 512) != 0)			/* Set R/W block length to 512 */
   3ed8c:	81 11       	cpse	r24, r1
   3ed8e:	09 c0       	rjmp	.+18     	; 0x3eda2 <disk_initialize+0x126>
   3ed90:	40 e0       	ldi	r20, 0x00	; 0
   3ed92:	52 e0       	ldi	r21, 0x02	; 2
   3ed94:	60 e0       	ldi	r22, 0x00	; 0
   3ed96:	70 e0       	ldi	r23, 0x00	; 0
   3ed98:	80 e5       	ldi	r24, 0x50	; 80
   3ed9a:	3d df       	rcall	.-390    	; 0x3ec16 <send_cmd>
   3ed9c:	81 11       	cpse	r24, r1
   3ed9e:	cf cf       	rjmp	.-98     	; 0x3ed3e <disk_initialize+0xc2>
			for (tmr = 10000; tmr && send_cmd(cmd, 0); tmr--) dly_100us();	/* Wait for leaving idle state */
   3eda0:	cf cf       	rjmp	.-98     	; 0x3ed40 <disk_initialize+0xc4>
   3eda2:	5b d0       	rcall	.+182    	; 0x3ee5a <dly_100us>
   3eda4:	f1 e0       	ldi	r31, 0x01	; 1
   3eda6:	ef 1a       	sub	r14, r31
   3eda8:	f1 08       	sbc	r15, r1
   3edaa:	59 f7       	brne	.-42     	; 0x3ed82 <disk_initialize+0x106>
   3edac:	c8 cf       	rjmp	.-112    	; 0x3ed3e <disk_initialize+0xc2>

0003edae <disk_readp>:
	BYTE *buff,		/* Pointer to the read buffer (NULL:Read bytes are forwarded to the stream) */
	DWORD lba,		/* Sector number (LBA) */
	WORD ofs,		/* Byte offset to read from (0..511) */
	WORD cnt		/* Number of bytes to read (ofs + cnt mus be <= 512) */
)
{
   3edae:	af 92       	push	r10
   3edb0:	bf 92       	push	r11
   3edb2:	cf 92       	push	r12
   3edb4:	df 92       	push	r13
   3edb6:	ef 92       	push	r14
   3edb8:	ff 92       	push	r15
   3edba:	0f 93       	push	r16
   3edbc:	1f 93       	push	r17
   3edbe:	cf 93       	push	r28
   3edc0:	df 93       	push	r29
   3edc2:	5c 01       	movw	r10, r24
	DRESULT res;
	BYTE rc;
	WORD bc;


	if (!(CardType & CT_BLOCK)) lba *= 512;		/* Convert to byte address if needed */
   3edc4:	79 01       	movw	r14, r18
   3edc6:	68 01       	movw	r12, r16
   3edc8:	80 91 4c 03 	lds	r24, 0x034C	; 0x80034c <CardType>
   3edcc:	83 fd       	sbrc	r24, 3
   3edce:	07 c0       	rjmp	.+14     	; 0x3edde <disk_readp+0x30>
   3edd0:	89 e0       	ldi	r24, 0x09	; 9
   3edd2:	44 0f       	add	r20, r20
   3edd4:	55 1f       	adc	r21, r21
   3edd6:	66 1f       	adc	r22, r22
   3edd8:	77 1f       	adc	r23, r23

	res = RES_ERROR;
	if (send_cmd(CMD17, lba) == 0) {		/* READ_SINGLE_BLOCK */
   3edda:	8a 95       	dec	r24
   3eddc:	d1 f7       	brne	.-12     	; 0x3edd2 <disk_readp+0x24>
   3edde:	81 e5       	ldi	r24, 0x51	; 81
   3ede0:	1a df       	rcall	.-460    	; 0x3ec16 <send_cmd>
   3ede2:	18 2f       	mov	r17, r24
   3ede4:	81 11       	cpse	r24, r1
   3ede6:	07 c0       	rjmp	.+14     	; 0x3edf6 <disk_readp+0x48>

		bc = 40000;
		do {							/* Wait for data packet */
			rc = rcv_spi();
   3ede8:	c0 e4       	ldi	r28, 0x40	; 64
   3edea:	dc e9       	ldi	r29, 0x9C	; 156
		} while (rc == 0xFF && --bc);
   3edec:	42 d0       	rcall	.+132    	; 0x3ee72 <rcv_spi>
   3edee:	8f 3f       	cpi	r24, 0xFF	; 255
   3edf0:	21 f4       	brne	.+8      	; 0x3edfa <disk_readp+0x4c>
	res = RES_ERROR;
   3edf2:	21 97       	sbiw	r28, 0x01	; 1
   3edf4:	d9 f7       	brne	.-10     	; 0x3edec <disk_readp+0x3e>

		if (rc == 0xFE) {				/* A data packet arrived */
   3edf6:	11 e0       	ldi	r17, 0x01	; 1
			bc = 514 - ofs - cnt;
   3edf8:	1e c0       	rjmp	.+60     	; 0x3ee36 <disk_readp+0x88>
   3edfa:	8e 3f       	cpi	r24, 0xFE	; 254
   3edfc:	e1 f7       	brne	.-8      	; 0x3edf6 <disk_readp+0x48>
   3edfe:	c2 e0       	ldi	r28, 0x02	; 2
   3ee00:	d2 e0       	ldi	r29, 0x02	; 2

			/* Skip leading bytes */
			if (ofs) {
   3ee02:	cc 19       	sub	r28, r12
   3ee04:	dd 09       	sbc	r29, r13
   3ee06:	ce 19       	sub	r28, r14
				do rcv_spi(); while (--ofs);
   3ee08:	df 09       	sbc	r29, r15
   3ee0a:	e1 14       	cp	r14, r1
   3ee0c:	f1 04       	cpc	r15, r1
   3ee0e:	29 f0       	breq	.+10     	; 0x3ee1a <disk_readp+0x6c>
   3ee10:	30 d0       	rcall	.+96     	; 0x3ee72 <rcv_spi>
   3ee12:	81 e0       	ldi	r24, 0x01	; 1
			}

			/* Receive a part of the sector */
			do {
				*buff++ = rcv_spi();
   3ee14:	e8 1a       	sub	r14, r24
   3ee16:	f1 08       	sbc	r15, r1
   3ee18:	f8 cf       	rjmp	.-16     	; 0x3ee0a <disk_readp+0x5c>
   3ee1a:	75 01       	movw	r14, r10
   3ee1c:	ef ef       	ldi	r30, 0xFF	; 255
   3ee1e:	ae 1a       	sub	r10, r30
   3ee20:	be 0a       	sbc	r11, r30
   3ee22:	27 d0       	rcall	.+78     	; 0x3ee72 <rcv_spi>
			} while (--cnt);
   3ee24:	f7 01       	movw	r30, r14
   3ee26:	80 83       	st	Z, r24
   3ee28:	f1 e0       	ldi	r31, 0x01	; 1
   3ee2a:	cf 1a       	sub	r12, r31

			/* Skip trailing bytes and CRC */
			do rcv_spi(); while (--bc);
   3ee2c:	d1 08       	sbc	r13, r1
   3ee2e:	a9 f7       	brne	.-22     	; 0x3ee1a <disk_readp+0x6c>
   3ee30:	20 d0       	rcall	.+64     	; 0x3ee72 <rcv_spi>
   3ee32:	21 97       	sbiw	r28, 0x01	; 1

			res = RES_OK;
		}
	}

	deselect();
   3ee34:	e9 f7       	brne	.-6      	; 0x3ee30 <disk_readp+0x82>
   3ee36:	1c d0       	rcall	.+56     	; 0x3ee70 <deselect>

	return res;
}
   3ee38:	81 2f       	mov	r24, r17
   3ee3a:	df 91       	pop	r29
   3ee3c:	cf 91       	pop	r28
   3ee3e:	1f 91       	pop	r17
   3ee40:	0f 91       	pop	r16
   3ee42:	ff 90       	pop	r15
   3ee44:	ef 90       	pop	r14
   3ee46:	df 90       	pop	r13
   3ee48:	cf 90       	pop	r12
   3ee4a:	bf 90       	pop	r11
   3ee4c:	af 90       	pop	r10
   3ee4e:	08 95       	ret

0003ee50 <init_spi>:
   3ee50:	20 9a       	sbi	0x04, 0	; 4
   3ee52:	22 9a       	sbi	0x04, 2	; 4
   3ee54:	21 9a       	sbi	0x04, 1	; 4
   3ee56:	2b 9a       	sbi	0x05, 3	; 5
   3ee58:	08 95       	ret

0003ee5a <dly_100us>:
   3ee5a:	80 ea       	ldi	r24, 0xA0	; 160
   3ee5c:	31 97       	sbiw	r30, 0x01	; 1
   3ee5e:	31 97       	sbiw	r30, 0x01	; 1
   3ee60:	31 97       	sbiw	r30, 0x01	; 1
   3ee62:	00 00       	nop
   3ee64:	8a 95       	dec	r24
   3ee66:	d1 f7       	brne	.-12     	; 0x3ee5c <dly_100us+0x2>
   3ee68:	08 95       	ret

0003ee6a <select>:
   3ee6a:	02 d0       	rcall	.+4      	; 0x3ee70 <deselect>
   3ee6c:	28 98       	cbi	0x05, 0	; 5
   3ee6e:	01 c0       	rjmp	.+2      	; 0x3ee72 <rcv_spi>

0003ee70 <deselect>:
   3ee70:	28 9a       	sbi	0x05, 0	; 5

0003ee72 <rcv_spi>:
   3ee72:	8f ef       	ldi	r24, 0xFF	; 255

0003ee74 <xmit_spi>:
   3ee74:	98 e0       	ldi	r25, 0x08	; 8
   3ee76:	87 fd       	sbrc	r24, 7
   3ee78:	2a 9a       	sbi	0x05, 2	; 5
   3ee7a:	87 ff       	sbrs	r24, 7
   3ee7c:	2a 98       	cbi	0x05, 2	; 5
   3ee7e:	88 0f       	add	r24, r24
   3ee80:	1b 99       	sbic	0x03, 3	; 3
   3ee82:	83 95       	inc	r24
   3ee84:	29 9a       	sbi	0x05, 1	; 5
   3ee86:	29 98       	cbi	0x05, 1	; 5
   3ee88:	9a 95       	dec	r25
   3ee8a:	a9 f7       	brne	.-22     	; 0x3ee76 <xmit_spi+0x2>
   3ee8c:	08 95       	ret

0003ee8e <flash_erase>:
   3ee8e:	fb 01       	movw	r30, r22
   3ee90:	8b bf       	out	0x3b, r24	; 59
   3ee92:	83 e0       	ldi	r24, 0x03	; 3
   3ee94:	80 93 57 00 	sts	0x0057, r24	; 0x800057 <__TEXT_REGION_LENGTH__+0x700057>
   3ee98:	e8 95       	spm
   3ee9a:	80 91 57 00 	lds	r24, 0x0057	; 0x800057 <__TEXT_REGION_LENGTH__+0x700057>
   3ee9e:	80 fd       	sbrc	r24, 0
   3eea0:	fc cf       	rjmp	.-8      	; 0x3ee9a <flash_erase+0xc>
   3eea2:	81 e1       	ldi	r24, 0x11	; 17
   3eea4:	80 93 57 00 	sts	0x0057, r24	; 0x800057 <__TEXT_REGION_LENGTH__+0x700057>
   3eea8:	e8 95       	spm
   3eeaa:	08 95       	ret

0003eeac <flash_write>:
   3eeac:	0f 92       	push	r0
   3eeae:	1f 92       	push	r1
   3eeb0:	8b bf       	out	0x3b, r24	; 59
   3eeb2:	fb 01       	movw	r30, r22
   3eeb4:	da 01       	movw	r26, r20
   3eeb6:	90 e8       	ldi	r25, 0x80	; 128
   3eeb8:	0d 90       	ld	r0, X+
   3eeba:	1d 90       	ld	r1, X+
   3eebc:	81 e0       	ldi	r24, 0x01	; 1
   3eebe:	80 93 57 00 	sts	0x0057, r24	; 0x800057 <__TEXT_REGION_LENGTH__+0x700057>
   3eec2:	e8 95       	spm
   3eec4:	32 96       	adiw	r30, 0x02	; 2
   3eec6:	9a 95       	dec	r25
   3eec8:	b9 f7       	brne	.-18     	; 0x3eeb8 <flash_write+0xc>
   3eeca:	fb 01       	movw	r30, r22
   3eecc:	85 e0       	ldi	r24, 0x05	; 5
   3eece:	80 93 57 00 	sts	0x0057, r24	; 0x800057 <__TEXT_REGION_LENGTH__+0x700057>
   3eed2:	e8 95       	spm
   3eed4:	80 91 57 00 	lds	r24, 0x0057	; 0x800057 <__TEXT_REGION_LENGTH__+0x700057>
   3eed8:	80 fd       	sbrc	r24, 0
   3eeda:	fc cf       	rjmp	.-8      	; 0x3eed4 <flash_write+0x28>
   3eedc:	81 e1       	ldi	r24, 0x11	; 17
   3eede:	80 93 57 00 	sts	0x0057, r24	; 0x800057 <__TEXT_REGION_LENGTH__+0x700057>
   3eee2:	e8 95       	spm
   3eee4:	1f 90       	pop	r1
   3eee6:	0f 90       	pop	r0
   3eee8:	08 95       	ret

0003eeea <main>:
{
   3eeea:	cd b7       	in	r28, 0x3d	; 61
   3eeec:	de b7       	in	r29, 0x3e	; 62
   3eeee:	cf 52       	subi	r28, 0x2F	; 47
   3eef0:	d1 40       	sbci	r29, 0x01	; 1
   3eef2:	0f b6       	in	r0, 0x3f	; 63
   3eef4:	f8 94       	cli
   3eef6:	de bf       	out	0x3e, r29	; 62
   3eef8:	0f be       	out	0x3f, r0	; 63
   3eefa:	cd bf       	out	0x3d, r28	; 61
	asm volatile ( "ldi	16, %0" :: "i" (RAMEND >> 8) );
   3eefc:	01 e2       	ldi	r16, 0x21	; 33
	asm volatile ( "out %0,16" :: "i" (AVR_STACK_POINTER_HI_ADDR) );
   3eefe:	0e bf       	out	0x3e, r16	; 62
	asm volatile ( "ldi	16, %0" :: "i" (RAMEND & 0x0ff) );
   3ef00:	0f ef       	ldi	r16, 0xFF	; 255
	asm volatile ( "out %0,16" :: "i" (AVR_STACK_POINTER_LO_ADDR) );
   3ef02:	0d bf       	out	0x3d, r16	; 61
	mcuStatusReg	=	MCUSR;
   3ef04:	94 b7       	in	r25, 0x34	; 52
	__asm__ __volatile__ ("cli");
   3ef06:	f8 94       	cli
	__asm__ __volatile__ ("wdr");
   3ef08:	a8 95       	wdr
	MCUSR	=	0;
   3ef0a:	14 be       	out	0x34, r1	; 52
	WDTCSR	|=	_BV(WDCE) | _BV(WDE);
   3ef0c:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
   3ef10:	88 61       	ori	r24, 0x18	; 24
   3ef12:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
	WDTCSR	=	0;
   3ef16:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
	__asm__ __volatile__ ("sei");
   3ef1a:	78 94       	sei
	if (mcuStatusReg & _BV(WDRF))
   3ef1c:	93 ff       	sbrs	r25, 3
   3ef1e:	05 c0       	rjmp	.+10     	; 0x3ef2a <main+0x40>
		app_start();
   3ef20:	e0 91 1e 02 	lds	r30, 0x021E	; 0x80021e <app_start>
   3ef24:	f0 91 1f 02 	lds	r31, 0x021F	; 0x80021f <app_start+0x1>
   3ef28:	19 95       	eicall
	PROGLED_DDR		|=	(1<<PROGLED_PIN);
   3ef2a:	27 9a       	sbi	0x04, 7	; 4
	PROGLED_PORT	|=	(1<<PROGLED_PIN);	// active high LED ON
   3ef2c:	2f 9a       	sbi	0x05, 7	; 5
	UART_STATUS_REG		|=	(1 <<UART_DOUBLE_SPEED);
   3ef2e:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
   3ef32:	82 60       	ori	r24, 0x02	; 2
   3ef34:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
	UART_BAUD_RATE_LOW	=	UART_BAUD_SELECT(BAUDRATE,F_CPU);
   3ef38:	80 e1       	ldi	r24, 0x10	; 16
   3ef3a:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
	UART_CONTROL_REG	=	(1 << UART_ENABLE_RECEIVER) | (1 << UART_ENABLE_TRANSMITTER);
   3ef3e:	88 e1       	ldi	r24, 0x18	; 24
   3ef40:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
	asm volatile ("nop");			// wait until port has changed
   3ef44:	00 00       	nop
   3ef46:	10 e0       	ldi	r17, 0x00	; 0
   3ef48:	00 e0       	ldi	r16, 0x00	; 0
	boot_timer	=	0;
   3ef4a:	c1 2c       	mov	r12, r1
   3ef4c:	d1 2c       	mov	r13, r1
   3ef4e:	76 01       	movw	r14, r12
				boot_state	=	1; // (after ++ -> boot_state=2 bootloader timeout, jump to main 0x00000 )
   3ef50:	57 ec       	ldi	r21, 0xC7	; 199
   3ef52:	85 2e       	mov	r8, r21
   3ef54:	5b e1       	ldi	r21, 0x1B	; 27
   3ef56:	95 2e       	mov	r9, r21
   3ef58:	a1 2c       	mov	r10, r1
   3ef5a:	b1 2c       	mov	r11, r1
	return(UART_STATUS_REG & (1 << UART_RECEIVE_COMPLETE));	// wait for data
   3ef5c:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
		while ((!(Serial_Available())) && (boot_state == 0))		// wait for data
   3ef60:	87 fd       	sbrc	r24, 7
   3ef62:	90 c0       	rjmp	.+288    	; 0x3f084 <main+0x19a>
   3ef64:	01 2b       	or	r16, r17
   3ef66:	09 f4       	brne	.+2      	; 0x3ef6a <main+0x80>
   3ef68:	6b c0       	rjmp	.+214    	; 0x3f040 <main+0x156>
        if(eeprom_read_byte(0x63) == 0xF0){
   3ef6a:	83 e6       	ldi	r24, 0x63	; 99
   3ef6c:	90 e0       	ldi	r25, 0x00	; 0
   3ef6e:	1d d4       	rcall	.+2106   	; 0x3f7aa <eeprom_read_byte>
   3ef70:	80 3f       	cpi	r24, 0xF0	; 240
   3ef72:	09 f0       	breq	.+2      	; 0x3ef76 <main+0x8c>
   3ef74:	64 c2       	rjmp	.+1224   	; 0x3f43e <main+0x554>
           pf_mount(&Fatfs);	/* Initialize file system */
   3ef76:	80 e2       	ldi	r24, 0x20	; 32
   3ef78:	93 e0       	ldi	r25, 0x03	; 3
   3ef7a:	a5 da       	rcall	.-2742   	; 0x3e4c6 <pf_mount>
           if(pf_open("firmware.bin") == FR_OK){
   3ef7c:	84 e0       	ldi	r24, 0x04	; 4
   3ef7e:	92 e0       	ldi	r25, 0x02	; 2
   3ef80:	b6 db       	rcall	.-2196   	; 0x3e6ee <pf_open>
   3ef82:	81 11       	cpse	r24, r1
               sendchar(0x0d);
   3ef84:	5c c2       	rjmp	.+1208   	; 0x3f43e <main+0x554>
   3ef86:	8d e0       	ldi	r24, 0x0D	; 13
               sendchar(0x0a);
   3ef88:	db d8       	rcall	.-3658   	; 0x3e140 <sendchar>
   3ef8a:	8a e0       	ldi	r24, 0x0A	; 10
   3ef8c:	d9 d8       	rcall	.-3662   	; 0x3e140 <sendchar>
               for (fa = 0; fa < 0x3E000; fa += SPM_PAGESIZE) {	/* Update all application pages */
   3ef8e:	ce 5d       	subi	r28, 0xDE	; 222
   3ef90:	de 4f       	sbci	r29, 0xFE	; 254
   3ef92:	18 82       	st	Y, r1
   3ef94:	19 82       	std	Y+1, r1	; 0x01
   3ef96:	1a 82       	std	Y+2, r1	; 0x02
   3ef98:	1b 82       	std	Y+3, r1	; 0x03
   3ef9a:	c2 52       	subi	r28, 0x22	; 34
   3ef9c:	d1 40       	sbci	r29, 0x01	; 1
                   PROGLED_PORT	^=	(1<<PROGLED_PIN);	// turn LED ON
   3ef9e:	85 b1       	in	r24, 0x05	; 5
   3efa0:	80 58       	subi	r24, 0x80	; 128
                   delay_ms(50);
   3efa2:	85 b9       	out	0x05, r24	; 5
   3efa4:	82 e3       	ldi	r24, 0x32	; 50
   3efa6:	90 e0       	ldi	r25, 0x00	; 0
   3efa8:	d7 d8       	rcall	.-3666   	; 0x3e158 <delay_ms>
                   flash_erase(fa);					/* Erase a page */
   3efaa:	ce 5d       	subi	r28, 0xDE	; 222
   3efac:	de 4f       	sbci	r29, 0xFE	; 254
   3efae:	68 81       	ld	r22, Y
   3efb0:	79 81       	ldd	r23, Y+1	; 0x01
   3efb2:	8a 81       	ldd	r24, Y+2	; 0x02
   3efb4:	9b 81       	ldd	r25, Y+3	; 0x03
   3efb6:	c2 52       	subi	r28, 0x22	; 34
   3efb8:	d1 40       	sbci	r29, 0x01	; 1
   3efba:	69 df       	rcall	.-302    	; 0x3ee8e <flash_erase>
                   memset(Buff, 0xFF, SPM_PAGESIZE);	/* Clear buffer */
   3efbc:	40 e0       	ldi	r20, 0x00	; 0
   3efbe:	51 e0       	ldi	r21, 0x01	; 1
   3efc0:	6f ef       	ldi	r22, 0xFF	; 255
   3efc2:	70 e0       	ldi	r23, 0x00	; 0
   3efc4:	80 e2       	ldi	r24, 0x20	; 32
   3efc6:	92 e0       	ldi	r25, 0x02	; 2
   3efc8:	e9 d3       	rcall	.+2002   	; 0x3f79c <memset>
                   pf_read(Buff, SPM_PAGESIZE, &br);	/* Load a page data */
   3efca:	ae 01       	movw	r20, r28
   3efcc:	4f 5f       	subi	r20, 0xFF	; 255
   3efce:	5f 4f       	sbci	r21, 0xFF	; 255
   3efd0:	60 e0       	ldi	r22, 0x00	; 0
   3efd2:	71 e0       	ldi	r23, 0x01	; 1
   3efd4:	80 e2       	ldi	r24, 0x20	; 32
   3efd6:	92 e0       	ldi	r25, 0x02	; 2
   3efd8:	11 dd       	rcall	.-1502   	; 0x3e9fc <pf_read>
   3efda:	89 81       	ldd	r24, Y+1	; 0x01
                   if(br) flash_write(fa, Buff);		/* Write it if the data is available */
   3efdc:	9a 81       	ldd	r25, Y+2	; 0x02
   3efde:	89 2b       	or	r24, r25
   3efe0:	59 f0       	breq	.+22     	; 0x3eff8 <main+0x10e>
   3efe2:	40 e2       	ldi	r20, 0x20	; 32
   3efe4:	52 e0       	ldi	r21, 0x02	; 2
   3efe6:	ce 5d       	subi	r28, 0xDE	; 222
   3efe8:	de 4f       	sbci	r29, 0xFE	; 254
   3efea:	68 81       	ld	r22, Y
   3efec:	79 81       	ldd	r23, Y+1	; 0x01
   3efee:	8a 81       	ldd	r24, Y+2	; 0x02
   3eff0:	9b 81       	ldd	r25, Y+3	; 0x03
   3eff2:	c2 52       	subi	r28, 0x22	; 34
   3eff4:	d1 40       	sbci	r29, 0x01	; 1
   3eff6:	5a df       	rcall	.-332    	; 0x3eeac <flash_write>
   3eff8:	ce 5d       	subi	r28, 0xDE	; 222
               for (fa = 0; fa < 0x3E000; fa += SPM_PAGESIZE) {	/* Update all application pages */
   3effa:	de 4f       	sbci	r29, 0xFE	; 254
   3effc:	28 81       	ld	r18, Y
   3effe:	39 81       	ldd	r19, Y+1	; 0x01
   3f000:	4a 81       	ldd	r20, Y+2	; 0x02
   3f002:	5b 81       	ldd	r21, Y+3	; 0x03
   3f004:	c2 52       	subi	r28, 0x22	; 34
   3f006:	d1 40       	sbci	r29, 0x01	; 1
   3f008:	3f 5f       	subi	r19, 0xFF	; 255
   3f00a:	4f 4f       	sbci	r20, 0xFF	; 255
   3f00c:	5f 4f       	sbci	r21, 0xFF	; 255
   3f00e:	ce 5d       	subi	r28, 0xDE	; 222
   3f010:	de 4f       	sbci	r29, 0xFE	; 254
   3f012:	28 83       	st	Y, r18
   3f014:	39 83       	std	Y+1, r19	; 0x01
   3f016:	4a 83       	std	Y+2, r20	; 0x02
   3f018:	5b 83       	std	Y+3, r21	; 0x03
   3f01a:	c2 52       	subi	r28, 0x22	; 34
   3f01c:	d1 40       	sbci	r29, 0x01	; 1
   3f01e:	21 15       	cp	r18, r1
   3f020:	30 4e       	sbci	r19, 0xE0	; 224
   3f022:	43 40       	sbci	r20, 0x03	; 3
   3f024:	51 05       	cpc	r21, r1
   3f026:	09 f0       	breq	.+2      	; 0x3f02a <main+0x140>
               sendchar(0x0d);
   3f028:	ba cf       	rjmp	.-140    	; 0x3ef9e <main+0xb4>
   3f02a:	8d e0       	ldi	r24, 0x0D	; 13
   3f02c:	89 d8       	rcall	.-3822   	; 0x3e140 <sendchar>
               sendchar(0x0a);
   3f02e:	8a e0       	ldi	r24, 0x0A	; 10
   3f030:	87 d8       	rcall	.-3826   	; 0x3e140 <sendchar>
   3f032:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <check>
               check = 0;
   3f036:	6f ef       	ldi	r22, 0xFF	; 255
               eeprom_write_byte (0x63, 0xFF);
   3f038:	83 e6       	ldi	r24, 0x63	; 99
   3f03a:	90 e0       	ldi	r25, 0x00	; 0
   3f03c:	be d3       	rcall	.+1916   	; 0x3f7ba <eeprom_write_byte>
   3f03e:	ff c1       	rjmp	.+1022   	; 0x3f43e <main+0x554>
   3f040:	25 e0       	ldi	r18, 0x05	; 5
   3f042:	2a 95       	dec	r18
   3f044:	f1 f7       	brne	.-4      	; 0x3f042 <main+0x158>
   3f046:	00 00       	nop
   3f048:	3f ef       	ldi	r19, 0xFF	; 255
   3f04a:	c3 1a       	sub	r12, r19
			boot_timer++;
   3f04c:	d3 0a       	sbc	r13, r19
   3f04e:	e3 0a       	sbc	r14, r19
   3f050:	f3 0a       	sbc	r15, r19
   3f052:	81 e0       	ldi	r24, 0x01	; 1
   3f054:	41 e2       	ldi	r20, 0x21	; 33
			if (boot_timer > boot_timeout)
   3f056:	c4 16       	cp	r12, r20
   3f058:	4e e4       	ldi	r20, 0x4E	; 78
   3f05a:	d4 06       	cpc	r13, r20
   3f05c:	e1 04       	cpc	r14, r1
   3f05e:	f1 04       	cpc	r15, r1
   3f060:	08 f4       	brcc	.+2      	; 0x3f064 <main+0x17a>
   3f062:	80 e0       	ldi	r24, 0x00	; 0
   3f064:	08 2f       	mov	r16, r24
				boot_state	=	1; // (after ++ -> boot_state=2 bootloader timeout, jump to main 0x00000 )
   3f066:	10 e0       	ldi	r17, 0x00	; 0
   3f068:	c7 01       	movw	r24, r14
   3f06a:	b6 01       	movw	r22, r12
   3f06c:	a5 01       	movw	r20, r10
   3f06e:	94 01       	movw	r18, r8
   3f070:	3f d3       	rcall	.+1662   	; 0x3f6f0 <__udivmodsi4>
   3f072:	67 2b       	or	r22, r23
   3f074:	68 2b       	or	r22, r24
			if ((boot_timer % _BLINK_LOOP_COUNT_) == 0)
   3f076:	69 2b       	or	r22, r25
   3f078:	09 f0       	breq	.+2      	; 0x3f07c <main+0x192>
   3f07a:	70 cf       	rjmp	.-288    	; 0x3ef5c <main+0x72>
   3f07c:	85 b1       	in	r24, 0x05	; 5
   3f07e:	80 58       	subi	r24, 0x80	; 128
				PROGLED_PORT	^=	(1<<PROGLED_PIN);	// turn LED ON
   3f080:	85 b9       	out	0x05, r24	; 5
   3f082:	6c cf       	rjmp	.-296    	; 0x3ef5c <main+0x72>
   3f084:	01 2b       	or	r16, r17
   3f086:	09 f0       	breq	.+2      	; 0x3f08a <main+0x1a0>
	if (boot_state==1)
   3f088:	70 cf       	rjmp	.-288    	; 0x3ef6a <main+0x80>
   3f08a:	c4 5d       	subi	r28, 0xD4	; 212
   3f08c:	de 4f       	sbci	r29, 0xFE	; 254
	unsigned int	rcvdCharCntr	=	0;
   3f08e:	19 82       	std	Y+1, r1	; 0x01
   3f090:	18 82       	st	Y, r1
   3f092:	cc 52       	subi	r28, 0x2C	; 44
   3f094:	d1 40       	sbci	r29, 0x01	; 1
   3f096:	31 2c       	mov	r3, r1
   3f098:	21 2c       	mov	r2, r1
	unsigned int	exPointCntr		=	0;
   3f09a:	ce 5d       	subi	r28, 0xDE	; 222
   3f09c:	de 4f       	sbci	r29, 0xFE	; 254
	unsigned int	ii				=	0;
   3f09e:	19 82       	std	Y+1, r1	; 0x01
   3f0a0:	18 82       	st	Y, r1
   3f0a2:	c2 52       	subi	r28, 0x22	; 34
   3f0a4:	d1 40       	sbci	r29, 0x01	; 1
   3f0a6:	81 2c       	mov	r8, r1
   3f0a8:	91 2c       	mov	r9, r1
	address_t		eraseAddress	=	0;
   3f0aa:	54 01       	movw	r10, r8
   3f0ac:	41 2c       	mov	r4, r1
   3f0ae:	51 2c       	mov	r5, r1
	address_t		address			=	0;
   3f0b0:	32 01       	movw	r6, r4
   3f0b2:	41 e0       	ldi	r20, 0x01	; 1
   3f0b4:	50 e0       	ldi	r21, 0x00	; 0
   3f0b6:	ca 5d       	subi	r28, 0xDA	; 218
   3f0b8:	de 4f       	sbci	r29, 0xFE	; 254
	unsigned char	seqNum			=	0;
   3f0ba:	18 82       	st	Y, r1
   3f0bc:	c6 52       	subi	r28, 0x26	; 38
   3f0be:	d1 40       	sbci	r29, 0x01	; 1
   3f0c0:	d1 2c       	mov	r13, r1
   3f0c2:	ce 01       	movw	r24, r28
	unsigned char	checksum		=	0;
   3f0c4:	01 96       	adiw	r24, 0x01	; 1
						msgBuffer[ii++]	=	c;
   3f0c6:	c2 5e       	subi	r28, 0xE2	; 226
   3f0c8:	de 4f       	sbci	r29, 0xFE	; 254
   3f0ca:	99 83       	std	Y+1, r25	; 0x01
   3f0cc:	88 83       	st	Y, r24
   3f0ce:	ce 51       	subi	r28, 0x1E	; 30
   3f0d0:	d1 40       	sbci	r29, 0x01	; 1
   3f0d2:	c2 5e       	subi	r28, 0xE2	; 226
   3f0d4:	de 4f       	sbci	r29, 0xFE	; 254
   3f0d6:	98 81       	ld	r25, Y
   3f0d8:	ce 51       	subi	r28, 0x1E	; 30
   3f0da:	d1 40       	sbci	r29, 0x01	; 1
   3f0dc:	c2 5d       	subi	r28, 0xD2	; 210
   3f0de:	de 4f       	sbci	r29, 0xFE	; 254
   3f0e0:	98 83       	st	Y, r25
   3f0e2:	ce 52       	subi	r28, 0x2E	; 46
   3f0e4:	d1 40       	sbci	r29, 0x01	; 1
   3f0e6:	c1 5e       	subi	r28, 0xE1	; 225
   3f0e8:	de 4f       	sbci	r29, 0xFE	; 254
   3f0ea:	a8 81       	ld	r26, Y
   3f0ec:	cf 51       	subi	r28, 0x1F	; 31
   3f0ee:	d1 40       	sbci	r29, 0x01	; 1
   3f0f0:	c1 5d       	subi	r28, 0xD1	; 209
   3f0f2:	de 4f       	sbci	r29, 0xFE	; 254
   3f0f4:	a8 83       	st	Y, r26
   3f0f6:	cf 52       	subi	r28, 0x2F	; 47
   3f0f8:	d1 40       	sbci	r29, 0x01	; 1
   3f0fa:	fe 01       	movw	r30, r28
   3f0fc:	3b 96       	adiw	r30, 0x0b	; 11
						unsigned char	*p	=	msgBuffer+10;
   3f0fe:	c0 5e       	subi	r28, 0xE0	; 224
   3f100:	de 4f       	sbci	r29, 0xFE	; 254
   3f102:	f9 83       	std	Y+1, r31	; 0x01
   3f104:	e8 83       	st	Y, r30
   3f106:	c0 52       	subi	r28, 0x20	; 32
   3f108:	d1 40       	sbci	r29, 0x01	; 1
   3f10a:	30 e0       	ldi	r19, 0x00	; 0
   3f10c:	20 e0       	ldi	r18, 0x00	; 0
	boot_timer	=	0;
   3f10e:	80 e0       	ldi	r24, 0x00	; 0
   3f110:	2a c0       	rjmp	.+84     	; 0x3f166 <main+0x27c>
   3f112:	41 50       	subi	r20, 0x01	; 1
   3f114:	51 09       	sbc	r21, r1
		if (count > MAX_TIME_COUNT)
   3f116:	61 09       	sbc	r22, r1
   3f118:	71 09       	sbc	r23, r1
   3f11a:	71 f4       	brne	.+28     	; 0x3f138 <main+0x24e>
   3f11c:	6b bf       	out	0x3b, r22	; 59
   3f11e:	fa 01       	movw	r30, r20
			data	=	pgm_read_word_far(0);	//*	get the first word of the user program
   3f120:	47 91       	elpm	r20, Z+
   3f122:	56 91       	elpm	r21, Z
   3f124:	4f 3f       	cpi	r20, 0xFF	; 255
   3f126:	5f 4f       	sbci	r21, 0xFF	; 255
			if (data != 0xffff)					//*	make sure its valid before jumping to it.
   3f128:	19 f0       	breq	.+6      	; 0x3f130 <main+0x246>
   3f12a:	ee 27       	eor	r30, r30
   3f12c:	ff 27       	eor	r31, r31
				asm volatile(
   3f12e:	09 94       	ijmp
   3f130:	41 e0       	ldi	r20, 0x01	; 1
   3f132:	52 e1       	ldi	r21, 0x12	; 18
	boot_timer	=	0;
   3f134:	6a e7       	ldi	r22, 0x7A	; 122
   3f136:	70 e0       	ldi	r23, 0x00	; 0
   3f138:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
	while (!(UART_STATUS_REG & (1 << UART_RECEIVE_COMPLETE)))
   3f13c:	97 ff       	sbrs	r25, 7
   3f13e:	e9 cf       	rjmp	.-46     	; 0x3f112 <main+0x228>
   3f140:	15 c0       	rjmp	.+42     	; 0x3f16c <main+0x282>
   3f142:	31 2c       	mov	r3, r1
   3f144:	21 2c       	mov	r2, r1
					exPointCntr	=	0;
   3f146:	83 30       	cpi	r24, 0x03	; 3
   3f148:	09 f4       	brne	.+2      	; 0x3f14c <main+0x262>
				switch (msgParseState)
   3f14a:	6f c0       	rjmp	.+222    	; 0x3f22a <main+0x340>
   3f14c:	08 f0       	brcs	.+2      	; 0x3f150 <main+0x266>
   3f14e:	47 c0       	rjmp	.+142    	; 0x3f1de <main+0x2f4>
   3f150:	81 30       	cpi	r24, 0x01	; 1
   3f152:	09 f4       	brne	.+2      	; 0x3f156 <main+0x26c>
   3f154:	5b c0       	rjmp	.+182    	; 0x3f20c <main+0x322>
   3f156:	82 30       	cpi	r24, 0x02	; 2
   3f158:	09 f4       	brne	.+2      	; 0x3f15c <main+0x272>
   3f15a:	60 c0       	rjmp	.+192    	; 0x3f21c <main+0x332>
   3f15c:	88 23       	and	r24, r24
   3f15e:	09 f4       	brne	.+2      	; 0x3f162 <main+0x278>
   3f160:	4e c0       	rjmp	.+156    	; 0x3f1fe <main+0x314>
   3f162:	40 e0       	ldi	r20, 0x00	; 0
   3f164:	50 e0       	ldi	r21, 0x00	; 0
	boot_timer	=	0;
   3f166:	41 30       	cpi	r20, 0x01	; 1
   3f168:	51 05       	cpc	r21, r1
				if (boot_state==1)
   3f16a:	11 f7       	brne	.-60     	; 0x3f130 <main+0x246>
   3f16c:	90 91 c6 00 	lds	r25, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
	return UART_DATA_REG;
   3f170:	c4 5d       	subi	r28, 0xD4	; 212
   3f172:	de 4f       	sbci	r29, 0xFE	; 254
				rcvdCharCntr++;
   3f174:	a8 81       	ld	r26, Y
   3f176:	b9 81       	ldd	r27, Y+1	; 0x01
   3f178:	cc 52       	subi	r28, 0x2C	; 44
   3f17a:	d1 40       	sbci	r29, 0x01	; 1
   3f17c:	11 96       	adiw	r26, 0x01	; 1
   3f17e:	c4 5d       	subi	r28, 0xD4	; 212
   3f180:	de 4f       	sbci	r29, 0xFE	; 254
   3f182:	b9 83       	std	Y+1, r27	; 0x01
   3f184:	a8 83       	st	Y, r26
   3f186:	cc 52       	subi	r28, 0x2C	; 44
   3f188:	d1 40       	sbci	r29, 0x01	; 1
   3f18a:	91 32       	cpi	r25, 0x21	; 33
   3f18c:	d1 f6       	brne	.-76     	; 0x3f142 <main+0x258>
				if ((c == '!')  && (rcvdCharCntr < 10))
   3f18e:	1a 97       	sbiw	r26, 0x0a	; 10
   3f190:	c0 f6       	brcc	.-80     	; 0x3f142 <main+0x258>
   3f192:	bf ef       	ldi	r27, 0xFF	; 255
   3f194:	2b 1a       	sub	r2, r27
					exPointCntr++;
   3f196:	3b 0a       	sbc	r3, r27
   3f198:	e3 e0       	ldi	r30, 0x03	; 3
   3f19a:	2e 16       	cp	r2, r30
					if (exPointCntr == 3)
   3f19c:	31 04       	cpc	r3, r1
   3f19e:	99 f6       	brne	.-90     	; 0x3f146 <main+0x25c>
   3f1a0:	31 2c       	mov	r3, r1
   3f1a2:	21 2c       	mov	r2, r1
						exPointCntr		=	0;	//	reset back to zero so we dont get in an endless loop
   3f1a4:	71 e0       	ldi	r23, 0x01	; 1
   3f1a6:	c5 5d       	subi	r28, 0xD5	; 213
						isLeave			=	1;
   3f1a8:	de 4f       	sbci	r29, 0xFE	; 254
   3f1aa:	78 83       	st	Y, r23
   3f1ac:	cb 52       	subi	r28, 0x2B	; 43
   3f1ae:	d1 40       	sbci	r29, 0x01	; 1
   3f1b0:	29 81       	ldd	r18, Y+1	; 0x01
   3f1b2:	24 31       	cpi	r18, 0x14	; 20
			switch (msgBuffer[0])
   3f1b4:	09 f4       	brne	.+2      	; 0x3f1b8 <main+0x2ce>
   3f1b6:	27 c2       	rjmp	.+1102   	; 0x3f606 <main+0x71c>
   3f1b8:	08 f0       	brcs	.+2      	; 0x3f1bc <main+0x2d2>
   3f1ba:	85 c0       	rjmp	.+266    	; 0x3f2c6 <main+0x3dc>
   3f1bc:	26 30       	cpi	r18, 0x06	; 6
   3f1be:	09 f4       	brne	.+2      	; 0x3f1c2 <main+0x2d8>
   3f1c0:	c0 c1       	rjmp	.+896    	; 0x3f542 <main+0x658>
   3f1c2:	08 f0       	brcs	.+2      	; 0x3f1c6 <main+0x2dc>
   3f1c4:	6c c0       	rjmp	.+216    	; 0x3f29e <main+0x3b4>
   3f1c6:	22 30       	cpi	r18, 0x02	; 2
   3f1c8:	09 f4       	brne	.+2      	; 0x3f1cc <main+0x2e2>
   3f1ca:	79 c0       	rjmp	.+242    	; 0x3f2be <main+0x3d4>
   3f1cc:	23 30       	cpi	r18, 0x03	; 3
   3f1ce:	09 f4       	brne	.+2      	; 0x3f1d2 <main+0x2e8>
   3f1d0:	72 c1       	rjmp	.+740    	; 0x3f4b6 <main+0x5cc>
   3f1d2:	21 30       	cpi	r18, 0x01	; 1
   3f1d4:	09 f4       	brne	.+2      	; 0x3f1d8 <main+0x2ee>
   3f1d6:	59 c1       	rjmp	.+690    	; 0x3f48a <main+0x5a0>
   3f1d8:	80 ec       	ldi	r24, 0xC0	; 192
   3f1da:	8a 83       	std	Y+2, r24	; 0x02
					msgBuffer[1]	=	STATUS_CMD_FAILED;
   3f1dc:	71 c0       	rjmp	.+226    	; 0x3f2c0 <main+0x3d6>
   3f1de:	85 30       	cpi	r24, 0x05	; 5
   3f1e0:	b9 f1       	breq	.+110    	; 0x3f250 <main+0x366>
				switch (msgParseState)
   3f1e2:	86 30       	cpi	r24, 0x06	; 6
   3f1e4:	09 f4       	brne	.+2      	; 0x3f1e8 <main+0x2fe>
   3f1e6:	56 c0       	rjmp	.+172    	; 0x3f294 <main+0x3aa>
   3f1e8:	84 30       	cpi	r24, 0x04	; 4
   3f1ea:	19 f1       	breq	.+70     	; 0x3f232 <main+0x348>
   3f1ec:	87 30       	cpi	r24, 0x07	; 7
   3f1ee:	09 f0       	breq	.+2      	; 0x3f1f2 <main+0x308>
			while ( msgParseState != ST_PROCESS )
   3f1f0:	b8 cf       	rjmp	.-144    	; 0x3f162 <main+0x278>
   3f1f2:	c5 5d       	subi	r28, 0xD5	; 213
   3f1f4:	de 4f       	sbci	r29, 0xFE	; 254
   3f1f6:	18 82       	st	Y, r1
   3f1f8:	cb 52       	subi	r28, 0x2B	; 43
   3f1fa:	d1 40       	sbci	r29, 0x01	; 1
   3f1fc:	d9 cf       	rjmp	.-78     	; 0x3f1b0 <main+0x2c6>
   3f1fe:	9b 31       	cpi	r25, 0x1B	; 27
   3f200:	09 f0       	breq	.+2      	; 0x3f204 <main+0x31a>
						if ( c == MESSAGE_START )
   3f202:	af cf       	rjmp	.-162    	; 0x3f162 <main+0x278>
   3f204:	8b e1       	ldi	r24, 0x1B	; 27
   3f206:	d8 2e       	mov	r13, r24
							checksum		=	MESSAGE_START^0;
   3f208:	81 e0       	ldi	r24, 0x01	; 1
   3f20a:	ab cf       	rjmp	.-170    	; 0x3f162 <main+0x278>
							msgParseState	=	ST_GET_SEQ_NUM;
   3f20c:	d9 26       	eor	r13, r25
   3f20e:	ca 5d       	subi	r28, 0xDA	; 218
						checksum		^=	c;
   3f210:	de 4f       	sbci	r29, 0xFE	; 254
						break;
   3f212:	98 83       	st	Y, r25
   3f214:	c6 52       	subi	r28, 0x26	; 38
   3f216:	d1 40       	sbci	r29, 0x01	; 1
   3f218:	82 e0       	ldi	r24, 0x02	; 2
   3f21a:	a3 cf       	rjmp	.-186    	; 0x3f162 <main+0x278>
						msgParseState	=	ST_MSG_SIZE_1;
   3f21c:	29 2f       	mov	r18, r25
						break;
   3f21e:	30 e0       	ldi	r19, 0x00	; 0
						msgLength		=	c<<8;
   3f220:	32 2f       	mov	r19, r18
   3f222:	22 27       	eor	r18, r18
   3f224:	d9 26       	eor	r13, r25
   3f226:	83 e0       	ldi	r24, 0x03	; 3
						checksum		^=	c;
   3f228:	9c cf       	rjmp	.-200    	; 0x3f162 <main+0x278>
						msgParseState	=	ST_MSG_SIZE_2;
   3f22a:	29 2b       	or	r18, r25
						break;
   3f22c:	d9 26       	eor	r13, r25
						msgLength		|=	c;
   3f22e:	84 e0       	ldi	r24, 0x04	; 4
						checksum		^=	c;
   3f230:	98 cf       	rjmp	.-208    	; 0x3f162 <main+0x278>
						msgParseState	=	ST_GET_TOKEN;
   3f232:	9e 30       	cpi	r25, 0x0E	; 14
						break;
   3f234:	91 f5       	brne	.+100    	; 0x3f29a <main+0x3b0>
						if ( c == TOKEN )
   3f236:	d9 26       	eor	r13, r25
   3f238:	ce 5d       	subi	r28, 0xDE	; 222
							checksum		^=	c;
   3f23a:	de 4f       	sbci	r29, 0xFE	; 254
							ii				=	0;
   3f23c:	18 82       	st	Y, r1
   3f23e:	c2 52       	subi	r28, 0x22	; 34
   3f240:	d1 40       	sbci	r29, 0x01	; 1
   3f242:	cd 5d       	subi	r28, 0xDD	; 221
   3f244:	de 4f       	sbci	r29, 0xFE	; 254
   3f246:	18 82       	st	Y, r1
   3f248:	c3 52       	subi	r28, 0x23	; 35
   3f24a:	d1 40       	sbci	r29, 0x01	; 1
   3f24c:	85 e0       	ldi	r24, 0x05	; 5
   3f24e:	89 cf       	rjmp	.-238    	; 0x3f162 <main+0x278>
							msgParseState	=	ST_GET_DATA;
   3f250:	ce 5d       	subi	r28, 0xDE	; 222
   3f252:	de 4f       	sbci	r29, 0xFE	; 254
						msgBuffer[ii++]	=	c;
   3f254:	48 81       	ld	r20, Y
   3f256:	59 81       	ldd	r21, Y+1	; 0x01
   3f258:	c2 52       	subi	r28, 0x22	; 34
   3f25a:	d1 40       	sbci	r29, 0x01	; 1
   3f25c:	4f 5f       	subi	r20, 0xFF	; 255
   3f25e:	5f 4f       	sbci	r21, 0xFF	; 255
   3f260:	e1 e0       	ldi	r30, 0x01	; 1
   3f262:	f0 e0       	ldi	r31, 0x00	; 0
   3f264:	ec 0f       	add	r30, r28
   3f266:	fd 1f       	adc	r31, r29
   3f268:	ce 5d       	subi	r28, 0xDE	; 222
   3f26a:	de 4f       	sbci	r29, 0xFE	; 254
   3f26c:	68 81       	ld	r22, Y
   3f26e:	79 81       	ldd	r23, Y+1	; 0x01
   3f270:	c2 52       	subi	r28, 0x22	; 34
   3f272:	d1 40       	sbci	r29, 0x01	; 1
   3f274:	e6 0f       	add	r30, r22
   3f276:	f7 1f       	adc	r31, r23
   3f278:	90 83       	st	Z, r25
   3f27a:	d9 26       	eor	r13, r25
   3f27c:	42 17       	cp	r20, r18
						checksum		^=	c;
   3f27e:	53 07       	cpc	r21, r19
						if (ii == msgLength )
   3f280:	09 f0       	breq	.+2      	; 0x3f284 <main+0x39a>
   3f282:	1c c2       	rjmp	.+1080   	; 0x3f6bc <main+0x7d2>
   3f284:	ce 5d       	subi	r28, 0xDE	; 222
   3f286:	de 4f       	sbci	r29, 0xFE	; 254
   3f288:	39 83       	std	Y+1, r19	; 0x01
   3f28a:	28 83       	st	Y, r18
   3f28c:	c2 52       	subi	r28, 0x22	; 34
   3f28e:	d1 40       	sbci	r29, 0x01	; 1
   3f290:	86 e0       	ldi	r24, 0x06	; 6
   3f292:	67 cf       	rjmp	.-306    	; 0x3f162 <main+0x278>
							msgParseState	=	ST_GET_CHECK;
   3f294:	9d 15       	cp	r25, r13
   3f296:	09 f4       	brne	.+2      	; 0x3f29a <main+0x3b0>
						if ( c == checksum )
   3f298:	ac cf       	rjmp	.-168    	; 0x3f1f2 <main+0x308>
   3f29a:	80 e0       	ldi	r24, 0x00	; 0
   3f29c:	62 cf       	rjmp	.-316    	; 0x3f162 <main+0x278>
							msgParseState	=	ST_START;
   3f29e:	22 31       	cpi	r18, 0x12	; 18
   3f2a0:	09 f4       	brne	.+2      	; 0x3f2a4 <main+0x3ba>
			switch (msgBuffer[0])
   3f2a2:	47 c1       	rjmp	.+654    	; 0x3f532 <main+0x648>
   3f2a4:	23 31       	cpi	r18, 0x13	; 19
   3f2a6:	e9 f0       	breq	.+58     	; 0x3f2e2 <main+0x3f8>
   3f2a8:	20 31       	cpi	r18, 0x10	; 16
   3f2aa:	49 f0       	breq	.+18     	; 0x3f2be <main+0x3d4>
   3f2ac:	21 31       	cpi	r18, 0x11	; 17
   3f2ae:	09 f0       	breq	.+2      	; 0x3f2b2 <main+0x3c8>
   3f2b0:	93 cf       	rjmp	.-218    	; 0x3f1d8 <main+0x2ee>
   3f2b2:	f1 e0       	ldi	r31, 0x01	; 1
   3f2b4:	c5 5d       	subi	r28, 0xD5	; 213
   3f2b6:	de 4f       	sbci	r29, 0xFE	; 254
   3f2b8:	f8 83       	st	Y, r31
   3f2ba:	cb 52       	subi	r28, 0x2B	; 43
   3f2bc:	d1 40       	sbci	r29, 0x01	; 1
   3f2be:	1a 82       	std	Y+2, r1	; 0x02
   3f2c0:	02 e0       	ldi	r16, 0x02	; 2
					msgBuffer[1]	=	STATUS_CMD_OK;
   3f2c2:	10 e0       	ldi	r17, 0x00	; 0
					msgLength		=	2;
   3f2c4:	73 c0       	rjmp	.+230    	; 0x3f3ac <main+0x4c2>
   3f2c6:	29 31       	cpi	r18, 0x19	; 25
					break;
   3f2c8:	09 f4       	brne	.+2      	; 0x3f2cc <main+0x3e2>
			switch (msgBuffer[0])
   3f2ca:	24 c1       	rjmp	.+584    	; 0x3f514 <main+0x62a>
   3f2cc:	08 f0       	brcs	.+2      	; 0x3f2d0 <main+0x3e6>
   3f2ce:	46 c0       	rjmp	.+140    	; 0x3f35c <main+0x472>
   3f2d0:	26 31       	cpi	r18, 0x16	; 22
   3f2d2:	09 f4       	brne	.+2      	; 0x3f2d6 <main+0x3ec>
   3f2d4:	98 c1       	rjmp	.+816    	; 0x3f606 <main+0x71c>
   3f2d6:	28 31       	cpi	r18, 0x18	; 24
   3f2d8:	09 f4       	brne	.+2      	; 0x3f2dc <main+0x3f2>
   3f2da:	07 c1       	rjmp	.+526    	; 0x3f4ea <main+0x600>
   3f2dc:	25 31       	cpi	r18, 0x15	; 21
   3f2de:	09 f0       	breq	.+2      	; 0x3f2e2 <main+0x3f8>
   3f2e0:	7b cf       	rjmp	.-266    	; 0x3f1d8 <main+0x2ee>
   3f2e2:	0a 81       	ldd	r16, Y+2	; 0x02
   3f2e4:	1b 81       	ldd	r17, Y+3	; 0x03
						unsigned int	size	=	((msgBuffer[1])<<8) | msgBuffer[2];
   3f2e6:	10 27       	eor	r17, r16
   3f2e8:	01 27       	eor	r16, r17
   3f2ea:	10 27       	eor	r17, r16
   3f2ec:	23 31       	cpi	r18, 0x13	; 19
   3f2ee:	09 f0       	breq	.+2      	; 0x3f2f2 <main+0x408>
						if ( msgBuffer[0] == CMD_PROGRAM_FLASH_ISP )
   3f2f0:	50 c1       	rjmp	.+672    	; 0x3f592 <main+0x6a8>
   3f2f2:	81 14       	cp	r8, r1
   3f2f4:	30 ec       	ldi	r19, 0xC0	; 192
							if (eraseAddress < APP_END )
   3f2f6:	93 06       	cpc	r9, r19
   3f2f8:	33 e0       	ldi	r19, 0x03	; 3
   3f2fa:	a3 06       	cpc	r10, r19
   3f2fc:	b1 04       	cpc	r11, r1
   3f2fe:	70 f4       	brcc	.+28     	; 0x3f31c <main+0x432>
   3f300:	43 e0       	ldi	r20, 0x03	; 3
   3f302:	f4 01       	movw	r30, r8
								boot_page_erase(eraseAddress);	// Perform page erase
   3f304:	a0 92 5b 00 	sts	0x005B, r10	; 0x80005b <__TEXT_REGION_LENGTH__+0x70005b>
   3f308:	40 93 57 00 	sts	0x0057, r20	; 0x800057 <__TEXT_REGION_LENGTH__+0x700057>
   3f30c:	e8 95       	spm
   3f30e:	07 b6       	in	r0, 0x37	; 55
   3f310:	00 fc       	sbrc	r0, 0
								boot_spm_busy_wait();		// Wait until the memory is erased.
   3f312:	fd cf       	rjmp	.-6      	; 0x3f30e <main+0x424>
   3f314:	5f ef       	ldi	r21, 0xFF	; 255
   3f316:	95 1a       	sub	r9, r21
								eraseAddress += SPM_PAGESIZE;	// point to next page to be erase
   3f318:	a5 0a       	sbc	r10, r21
   3f31a:	b5 0a       	sbc	r11, r21
   3f31c:	8b 85       	ldd	r24, Y+11	; 0x0b
   3f31e:	de 01       	movw	r26, r28
   3f320:	11 96       	adiw	r26, 0x01	; 1
   3f322:	b3 01       	movw	r22, r6
   3f324:	a2 01       	movw	r20, r4
							signature	=	SIGNATURE_BYTES & 0x000000FF;
   3f326:	21 e0       	ldi	r18, 0x01	; 1
   3f328:	1b 96       	adiw	r26, 0x0b	; 11
								boot_page_fill(address,data);
   3f32a:	9c 91       	ld	r25, X
								data		=	(highByte << 8) | lowByte;
   3f32c:	1b 97       	sbiw	r26, 0x0b	; 11
   3f32e:	0c 01       	movw	r0, r24
   3f330:	fa 01       	movw	r30, r20
								boot_page_fill(address,data);
   3f332:	60 93 5b 00 	sts	0x005B, r22	; 0x80005b <__TEXT_REGION_LENGTH__+0x70005b>
   3f336:	20 93 57 00 	sts	0x0057, r18	; 0x800057 <__TEXT_REGION_LENGTH__+0x700057>
   3f33a:	e8 95       	spm
   3f33c:	11 24       	eor	r1, r1
   3f33e:	4e 5f       	subi	r20, 0xFE	; 254
   3f340:	5f 4f       	sbci	r21, 0xFF	; 255
								address	=	address + 2;	// Select next word in memory
   3f342:	6f 4f       	sbci	r22, 0xFF	; 255
   3f344:	7f 4f       	sbci	r23, 0xFF	; 255
   3f346:	02 50       	subi	r16, 0x02	; 2
   3f348:	11 09       	sbc	r17, r1
								size	-=	2;				// Reduce number of bytes to write by two
   3f34a:	12 96       	adiw	r26, 0x02	; 2
   3f34c:	01 15       	cp	r16, r1
							} while (size);					// Loop until all bytes written
   3f34e:	11 05       	cpc	r17, r1
   3f350:	09 f4       	brne	.+2      	; 0x3f354 <main+0x46a>
   3f352:	0d c1       	rjmp	.+538    	; 0x3f56e <main+0x684>
   3f354:	1a 96       	adiw	r26, 0x0a	; 10
   3f356:	8c 91       	ld	r24, X
								highByte 	=	*p++;
   3f358:	1a 97       	sbiw	r26, 0x0a	; 10
   3f35a:	e6 cf       	rjmp	.-52     	; 0x3f328 <main+0x43e>
   3f35c:	2b 31       	cpi	r18, 0x1B	; 27
   3f35e:	09 f4       	brne	.+2      	; 0x3f362 <main+0x478>
			switch (msgBuffer[0])
   3f360:	b8 c0       	rjmp	.+368    	; 0x3f4d2 <main+0x5e8>
   3f362:	2d 31       	cpi	r18, 0x1D	; 29
   3f364:	79 f0       	breq	.+30     	; 0x3f384 <main+0x49a>
   3f366:	2a 31       	cpi	r18, 0x1A	; 26
   3f368:	09 f0       	breq	.+2      	; 0x3f36c <main+0x482>
   3f36a:	36 cf       	rjmp	.-404    	; 0x3f1d8 <main+0x2ee>
   3f36c:	1a 82       	std	Y+2, r1	; 0x02
   3f36e:	89 e0       	ldi	r24, 0x09	; 9
					msgBuffer[1]	=	STATUS_CMD_OK;
   3f370:	e1 e0       	ldi	r30, 0x01	; 1
					msgBuffer[2]	=	boot_lock_fuse_bits_get( GET_LOCK_BITS );
   3f372:	f0 e0       	ldi	r31, 0x00	; 0
   3f374:	80 93 57 00 	sts	0x0057, r24	; 0x800057 <__TEXT_REGION_LENGTH__+0x700057>
   3f378:	84 91       	lpm	r24, Z
   3f37a:	8b 83       	std	Y+3, r24	; 0x03
   3f37c:	1c 82       	std	Y+4, r1	; 0x04
   3f37e:	04 e0       	ldi	r16, 0x04	; 4
					msgBuffer[3]	=	STATUS_CMD_OK;
   3f380:	10 e0       	ldi	r17, 0x00	; 0
					msgLength		=	4;
   3f382:	14 c0       	rjmp	.+40     	; 0x3f3ac <main+0x4c2>
   3f384:	9d 81       	ldd	r25, Y+5	; 0x05
					break;
   3f386:	90 33       	cpi	r25, 0x30	; 48
						if ( msgBuffer[4]== 0x30 )
   3f388:	09 f0       	breq	.+2      	; 0x3f38c <main+0x4a2>
   3f38a:	67 c0       	rjmp	.+206    	; 0x3f45a <main+0x570>
   3f38c:	8f 81       	ldd	r24, Y+7	; 0x07
   3f38e:	88 23       	and	r24, r24
							unsigned char signatureIndex	=	msgBuffer[6];
   3f390:	09 f4       	brne	.+2      	; 0x3f394 <main+0x4aa>
							if ( signatureIndex == 0 )
   3f392:	77 c0       	rjmp	.+238    	; 0x3f482 <main+0x598>
   3f394:	81 30       	cpi	r24, 0x01	; 1
   3f396:	09 f4       	brne	.+2      	; 0x3f39a <main+0x4b0>
							else if ( signatureIndex == 1 )
   3f398:	76 c0       	rjmp	.+236    	; 0x3f486 <main+0x59c>
   3f39a:	81 e0       	ldi	r24, 0x01	; 1
   3f39c:	1a 82       	std	Y+2, r1	; 0x02
								answerByte	=	SIGNATURE_BYTES & 0x000000FF;
   3f39e:	1b 82       	std	Y+3, r1	; 0x03
							msgBuffer[1]	=	STATUS_CMD_OK;
   3f3a0:	9c 83       	std	Y+4, r25	; 0x04
							msgBuffer[2]	=	0;
   3f3a2:	1d 82       	std	Y+5, r1	; 0x05
							msgBuffer[3]	=	msgBuffer[4];
   3f3a4:	8e 83       	std	Y+6, r24	; 0x06
							msgBuffer[4]	=	0;
   3f3a6:	1f 82       	std	Y+7, r1	; 0x07
							msgBuffer[5]	=	answerByte;
   3f3a8:	07 e0       	ldi	r16, 0x07	; 7
							msgBuffer[6]	=	STATUS_CMD_OK;
   3f3aa:	10 e0       	ldi	r17, 0x00	; 0
							msgLength		=	7;
   3f3ac:	8b e1       	ldi	r24, 0x1B	; 27
   3f3ae:	0f 94 a0 f0 	call	0x3e140	; 0x3e140 <sendchar>
			sendchar(MESSAGE_START);
   3f3b2:	ca 5d       	subi	r28, 0xDA	; 218
   3f3b4:	de 4f       	sbci	r29, 0xFE	; 254
			sendchar(seqNum);
   3f3b6:	88 81       	ld	r24, Y
   3f3b8:	c6 52       	subi	r28, 0x26	; 38
   3f3ba:	d1 40       	sbci	r29, 0x01	; 1
   3f3bc:	0f 94 a0 f0 	call	0x3e140	; 0x3e140 <sendchar>
   3f3c0:	81 2f       	mov	r24, r17
   3f3c2:	0f 94 a0 f0 	call	0x3e140	; 0x3e140 <sendchar>
			sendchar(c);
   3f3c6:	ca 5d       	subi	r28, 0xDA	; 218
   3f3c8:	de 4f       	sbci	r29, 0xFE	; 254
			checksum	^=	c;
   3f3ca:	d8 80       	ld	r13, Y
   3f3cc:	c6 52       	subi	r28, 0x26	; 38
   3f3ce:	d1 40       	sbci	r29, 0x01	; 1
   3f3d0:	d1 26       	eor	r13, r17
   3f3d2:	80 2f       	mov	r24, r16
   3f3d4:	0f 94 a0 f0 	call	0x3e140	; 0x3e140 <sendchar>
			sendchar(c);
   3f3d8:	d0 26       	eor	r13, r16
   3f3da:	8e e0       	ldi	r24, 0x0E	; 14
			checksum ^= c;
   3f3dc:	0f 94 a0 f0 	call	0x3e140	; 0x3e140 <sendchar>
			sendchar(TOKEN);
   3f3e0:	85 e1       	ldi	r24, 0x15	; 21
   3f3e2:	d8 26       	eor	r13, r24
			checksum ^= TOKEN;
   3f3e4:	41 e0       	ldi	r20, 0x01	; 1
   3f3e6:	50 e0       	ldi	r21, 0x00	; 0
			while ( msgLength )
   3f3e8:	4c 0f       	add	r20, r28
   3f3ea:	5d 1f       	adc	r21, r29
   3f3ec:	04 0f       	add	r16, r20
   3f3ee:	15 1f       	adc	r17, r21
   3f3f0:	c2 5d       	subi	r28, 0xD2	; 210
   3f3f2:	de 4f       	sbci	r29, 0xFE	; 254
			p	=	msgBuffer;
   3f3f4:	e8 80       	ld	r14, Y
   3f3f6:	ce 52       	subi	r28, 0x2E	; 46
   3f3f8:	d1 40       	sbci	r29, 0x01	; 1
   3f3fa:	c1 5d       	subi	r28, 0xD1	; 209
   3f3fc:	de 4f       	sbci	r29, 0xFE	; 254
   3f3fe:	f8 80       	ld	r15, Y
   3f400:	cf 52       	subi	r28, 0x2F	; 47
   3f402:	d1 40       	sbci	r29, 0x01	; 1
   3f404:	0e 15       	cp	r16, r14
   3f406:	1f 05       	cpc	r17, r15
			while ( msgLength )
   3f408:	09 f0       	breq	.+2      	; 0x3f40c <main+0x522>
   3f40a:	4d c1       	rjmp	.+666    	; 0x3f6a6 <main+0x7bc>
   3f40c:	8d 2d       	mov	r24, r13
   3f40e:	0f 94 a0 f0 	call	0x3e140	; 0x3e140 <sendchar>
			sendchar(checksum);
   3f412:	ca 5d       	subi	r28, 0xDA	; 218
   3f414:	de 4f       	sbci	r29, 0xFE	; 254
			seqNum++;
   3f416:	b8 81       	ld	r27, Y
   3f418:	c6 52       	subi	r28, 0x26	; 38
   3f41a:	d1 40       	sbci	r29, 0x01	; 1
   3f41c:	bf 5f       	subi	r27, 0xFF	; 255
   3f41e:	ca 5d       	subi	r28, 0xDA	; 218
   3f420:	de 4f       	sbci	r29, 0xFE	; 254
   3f422:	b8 83       	st	Y, r27
   3f424:	c6 52       	subi	r28, 0x26	; 38
   3f426:	d1 40       	sbci	r29, 0x01	; 1
   3f428:	85 b1       	in	r24, 0x05	; 5
   3f42a:	80 58       	subi	r24, 0x80	; 128
			PROGLED_PORT	^=	(1<<PROGLED_PIN);	// active high LED ON
   3f42c:	85 b9       	out	0x05, r24	; 5
   3f42e:	c5 5d       	subi	r28, 0xD5	; 213
   3f430:	de 4f       	sbci	r29, 0xFE	; 254
		while (!isLeave)
   3f432:	e8 81       	ld	r30, Y
   3f434:	cb 52       	subi	r28, 0x2B	; 43
   3f436:	d1 40       	sbci	r29, 0x01	; 1
   3f438:	ee 23       	and	r30, r30
   3f43a:	09 f4       	brne	.+2      	; 0x3f43e <main+0x554>
   3f43c:	3c c1       	rjmp	.+632    	; 0x3f6b6 <main+0x7cc>
   3f43e:	00 00       	nop
   3f440:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
	UART_STATUS_REG	&=	0xfd;
   3f444:	8d 7f       	andi	r24, 0xFD	; 253
   3f446:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
   3f44a:	81 e1       	ldi	r24, 0x11	; 17
   3f44c:	80 93 57 00 	sts	0x0057, r24	; 0x800057 <__TEXT_REGION_LENGTH__+0x700057>
	boot_rww_enable();				// enable application section
   3f450:	e8 95       	spm
   3f452:	ee 27       	eor	r30, r30
   3f454:	ff 27       	eor	r31, r31
	asm volatile(
   3f456:	09 94       	ijmp
   3f458:	ff cf       	rjmp	.-2      	; 0x3f458 <main+0x56e>
   3f45a:	89 2f       	mov	r24, r25
	for(;;);
   3f45c:	80 75       	andi	r24, 0x50	; 80
						else if ( msgBuffer[4] & 0x50 )
   3f45e:	09 f4       	brne	.+2      	; 0x3f462 <main+0x578>
   3f460:	9d cf       	rjmp	.-198    	; 0x3f39c <main+0x4b2>
   3f462:	89 e0       	ldi	r24, 0x09	; 9
   3f464:	f0 e0       	ldi	r31, 0x00	; 0
								answerByte	=	boot_lock_fuse_bits_get(GET_LOW_FUSE_BITS);
   3f466:	e0 e0       	ldi	r30, 0x00	; 0
   3f468:	90 35       	cpi	r25, 0x50	; 80
   3f46a:	39 f0       	breq	.+14     	; 0x3f47a <main+0x590>
							if (msgBuffer[4] == 0x50)
   3f46c:	80 e0       	ldi	r24, 0x00	; 0
   3f46e:	98 35       	cpi	r25, 0x58	; 88
							answerByte	=	0; // for all others command are not implemented, return dummy value for AVRDUDE happy <Worapoht>
   3f470:	09 f0       	breq	.+2      	; 0x3f474 <main+0x58a>
							else if (msgBuffer[4] == 0x58)
   3f472:	94 cf       	rjmp	.-216    	; 0x3f39c <main+0x4b2>
   3f474:	89 e0       	ldi	r24, 0x09	; 9
   3f476:	e3 e0       	ldi	r30, 0x03	; 3
								answerByte	=	boot_lock_fuse_bits_get(GET_HIGH_FUSE_BITS);
   3f478:	f0 e0       	ldi	r31, 0x00	; 0
   3f47a:	80 93 57 00 	sts	0x0057, r24	; 0x800057 <__TEXT_REGION_LENGTH__+0x700057>
   3f47e:	84 91       	lpm	r24, Z
   3f480:	8d cf       	rjmp	.-230    	; 0x3f39c <main+0x4b2>
   3f482:	8e e1       	ldi	r24, 0x1E	; 30
   3f484:	8b cf       	rjmp	.-234    	; 0x3f39c <main+0x4b2>
								answerByte	=	(SIGNATURE_BYTES >> 16) & 0x000000FF;
   3f486:	88 e9       	ldi	r24, 0x98	; 152
   3f488:	89 cf       	rjmp	.-238    	; 0x3f39c <main+0x4b2>
								answerByte	=	(SIGNATURE_BYTES >> 8) & 0x000000FF;
   3f48a:	1a 82       	std	Y+2, r1	; 0x02
   3f48c:	88 e0       	ldi	r24, 0x08	; 8
					msgBuffer[1] 	=	STATUS_CMD_OK;
   3f48e:	8b 83       	std	Y+3, r24	; 0x03
					msgBuffer[2] 	=	8;
   3f490:	81 e4       	ldi	r24, 0x41	; 65
   3f492:	8c 83       	std	Y+4, r24	; 0x04
					msgBuffer[3] 	=	'A';
   3f494:	86 e5       	ldi	r24, 0x56	; 86
   3f496:	8d 83       	std	Y+5, r24	; 0x05
					msgBuffer[4] 	=	'V';
   3f498:	82 e5       	ldi	r24, 0x52	; 82
   3f49a:	8e 83       	std	Y+6, r24	; 0x06
					msgBuffer[5] 	=	'R';
   3f49c:	89 e4       	ldi	r24, 0x49	; 73
   3f49e:	8f 83       	std	Y+7, r24	; 0x07
					msgBuffer[6] 	=	'I';
   3f4a0:	83 e5       	ldi	r24, 0x53	; 83
   3f4a2:	88 87       	std	Y+8, r24	; 0x08
					msgBuffer[7] 	=	'S';
   3f4a4:	80 e5       	ldi	r24, 0x50	; 80
   3f4a6:	89 87       	std	Y+9, r24	; 0x09
					msgBuffer[8] 	=	'P';
   3f4a8:	8f e5       	ldi	r24, 0x5F	; 95
   3f4aa:	8a 87       	std	Y+10, r24	; 0x0a
					msgBuffer[9] 	=	'_';
   3f4ac:	82 e3       	ldi	r24, 0x32	; 50
   3f4ae:	8b 87       	std	Y+11, r24	; 0x0b
					msgBuffer[10]	=	'2';
   3f4b0:	0b e0       	ldi	r16, 0x0B	; 11
   3f4b2:	10 e0       	ldi	r17, 0x00	; 0
					msgLength		=	11;
   3f4b4:	7b cf       	rjmp	.-266    	; 0x3f3ac <main+0x4c2>
   3f4b6:	ea 81       	ldd	r30, Y+2	; 0x02
					break;
   3f4b8:	e0 59       	subi	r30, 0x90	; 144
						switch(msgBuffer[1])
   3f4ba:	80 e0       	ldi	r24, 0x00	; 0
   3f4bc:	e3 30       	cpi	r30, 0x03	; 3
   3f4be:	20 f4       	brcc	.+8      	; 0x3f4c8 <main+0x5de>
   3f4c0:	f0 e0       	ldi	r31, 0x00	; 0
   3f4c2:	ef 5f       	subi	r30, 0xFF	; 255
   3f4c4:	fd 4f       	sbci	r31, 0xFD	; 253
   3f4c6:	80 81       	ld	r24, Z
   3f4c8:	1a 82       	std	Y+2, r1	; 0x02
   3f4ca:	8b 83       	std	Y+3, r24	; 0x03
						msgBuffer[1]	=	STATUS_CMD_OK;
   3f4cc:	03 e0       	ldi	r16, 0x03	; 3
						msgBuffer[2]	=	value;
   3f4ce:	10 e0       	ldi	r17, 0x00	; 0
						msgLength		=	3;
   3f4d0:	6d cf       	rjmp	.-294    	; 0x3f3ac <main+0x4c2>
   3f4d2:	8d 81       	ldd	r24, Y+5	; 0x05
					break;
   3f4d4:	88 23       	and	r24, r24
						unsigned char signatureIndex	=	msgBuffer[4];
   3f4d6:	29 f0       	breq	.+10     	; 0x3f4e2 <main+0x5f8>
						if ( signatureIndex == 0 )
   3f4d8:	81 30       	cpi	r24, 0x01	; 1
   3f4da:	29 f0       	breq	.+10     	; 0x3f4e6 <main+0x5fc>
						else if ( signatureIndex == 1 )
   3f4dc:	81 e0       	ldi	r24, 0x01	; 1
   3f4de:	1a 82       	std	Y+2, r1	; 0x02
							signature	=	SIGNATURE_BYTES & 0x000000FF;
   3f4e0:	4c cf       	rjmp	.-360    	; 0x3f37a <main+0x490>
						msgBuffer[1]	=	STATUS_CMD_OK;
   3f4e2:	8e e1       	ldi	r24, 0x1E	; 30
						msgBuffer[2]	=	fuseBits;
   3f4e4:	fc cf       	rjmp	.-8      	; 0x3f4de <main+0x5f4>
							signature	=	(SIGNATURE_BYTES >>16) & 0x000000FF;
   3f4e6:	88 e9       	ldi	r24, 0x98	; 152
   3f4e8:	fa cf       	rjmp	.-12     	; 0x3f4de <main+0x5f4>
							signature	=	(SIGNATURE_BYTES >> 8) & 0x000000FF;
   3f4ea:	8b 81       	ldd	r24, Y+3	; 0x03
						msgBuffer[1]	=	STATUS_CMD_OK;
   3f4ec:	80 35       	cpi	r24, 0x50	; 80
						if ( msgBuffer[2] == 0x50 )
   3f4ee:	71 f4       	brne	.+28     	; 0x3f50c <main+0x622>
   3f4f0:	8c 81       	ldd	r24, Y+4	; 0x04
   3f4f2:	88 30       	cpi	r24, 0x08	; 8
							if ( msgBuffer[3] == 0x08 )
   3f4f4:	39 f4       	brne	.+14     	; 0x3f504 <main+0x61a>
   3f4f6:	89 e0       	ldi	r24, 0x09	; 9
   3f4f8:	e2 e0       	ldi	r30, 0x02	; 2
								fuseBits	=	boot_lock_fuse_bits_get( GET_EXTENDED_FUSE_BITS );
   3f4fa:	f0 e0       	ldi	r31, 0x00	; 0
   3f4fc:	80 93 57 00 	sts	0x0057, r24	; 0x800057 <__TEXT_REGION_LENGTH__+0x700057>
							fuseBits	=	boot_lock_fuse_bits_get( GET_HIGH_FUSE_BITS );
   3f500:	84 91       	lpm	r24, Z
   3f502:	ed cf       	rjmp	.-38     	; 0x3f4de <main+0x5f4>
   3f504:	89 e0       	ldi	r24, 0x09	; 9
   3f506:	f0 e0       	ldi	r31, 0x00	; 0
								fuseBits	=	boot_lock_fuse_bits_get( GET_LOW_FUSE_BITS );
   3f508:	e0 e0       	ldi	r30, 0x00	; 0
   3f50a:	f8 cf       	rjmp	.-16     	; 0x3f4fc <main+0x612>
   3f50c:	89 e0       	ldi	r24, 0x09	; 9
   3f50e:	e3 e0       	ldi	r30, 0x03	; 3
							fuseBits	=	boot_lock_fuse_bits_get( GET_HIGH_FUSE_BITS );
   3f510:	f0 e0       	ldi	r31, 0x00	; 0
   3f512:	f4 cf       	rjmp	.-24     	; 0x3f4fc <main+0x612>
   3f514:	8d 81       	ldd	r24, Y+5	; 0x05
   3f516:	83 6c       	ori	r24, 0xC3	; 195
						boot_lock_bits_set(lockBits);		// and program it
   3f518:	99 e0       	ldi	r25, 0x09	; 9
   3f51a:	e1 e0       	ldi	r30, 0x01	; 1
   3f51c:	f0 e0       	ldi	r31, 0x00	; 0
   3f51e:	08 2e       	mov	r0, r24
   3f520:	90 93 57 00 	sts	0x0057, r25	; 0x800057 <__TEXT_REGION_LENGTH__+0x700057>
   3f524:	e8 95       	spm
   3f526:	07 b6       	in	r0, 0x37	; 55
   3f528:	00 fc       	sbrc	r0, 0
						boot_spm_busy_wait();
   3f52a:	fd cf       	rjmp	.-6      	; 0x3f526 <main+0x63c>
   3f52c:	1a 82       	std	Y+2, r1	; 0x02
   3f52e:	1b 82       	std	Y+3, r1	; 0x03
						msgBuffer[1]	=	STATUS_CMD_OK;
   3f530:	cd cf       	rjmp	.-102    	; 0x3f4cc <main+0x5e2>
						msgBuffer[2]	=	STATUS_CMD_OK;
   3f532:	80 ec       	ldi	r24, 0xC0	; 192
   3f534:	8a 83       	std	Y+2, r24	; 0x02
					msgBuffer[1]	=	STATUS_CMD_FAILED;	//*	isue 543, return FAILED instead of OK
   3f536:	02 e0       	ldi	r16, 0x02	; 2
   3f538:	10 e0       	ldi	r17, 0x00	; 0
					msgLength		=	2;
   3f53a:	81 2c       	mov	r8, r1
   3f53c:	91 2c       	mov	r9, r1
					eraseAddress	=	0;
   3f53e:	54 01       	movw	r10, r8
   3f540:	35 cf       	rjmp	.-406    	; 0x3f3ac <main+0x4c2>
   3f542:	2a 81       	ldd	r18, Y+2	; 0x02
					break;
   3f544:	3b 81       	ldd	r19, Y+3	; 0x03
					address	=	( ((address_t)(msgBuffer[1])<<24)|((address_t)(msgBuffer[2])<<16)|((address_t)(msgBuffer[3])<<8)|(msgBuffer[4]) )<<1;
   3f546:	4c 81       	ldd	r20, Y+4	; 0x04
   3f548:	5d 81       	ldd	r21, Y+5	; 0x05
   3f54a:	c9 5d       	subi	r28, 0xD9	; 217
   3f54c:	de 4f       	sbci	r29, 0xFE	; 254
   3f54e:	28 83       	st	Y, r18
   3f550:	39 83       	std	Y+1, r19	; 0x01
   3f552:	4a 83       	std	Y+2, r20	; 0x02
   3f554:	5b 83       	std	Y+3, r21	; 0x03
   3f556:	c7 52       	subi	r28, 0x27	; 39
   3f558:	d1 40       	sbci	r29, 0x01	; 1
   3f55a:	ca 01       	movw	r24, r20
   3f55c:	b9 01       	movw	r22, r18
   3f55e:	ea d0       	rcall	.+468    	; 0x3f734 <__bswapsi2>
   3f560:	2b 01       	movw	r4, r22
   3f562:	3c 01       	movw	r6, r24
   3f564:	44 0c       	add	r4, r4
   3f566:	55 1c       	adc	r5, r5
   3f568:	66 1c       	adc	r6, r6
   3f56a:	77 1c       	adc	r7, r7
   3f56c:	a8 ce       	rjmp	.-688    	; 0x3f2be <main+0x3d4>
   3f56e:	85 e0       	ldi	r24, 0x05	; 5
   3f570:	f2 01       	movw	r30, r4
							boot_page_write(tempaddress);
   3f572:	60 92 5b 00 	sts	0x005B, r6	; 0x80005b <__TEXT_REGION_LENGTH__+0x70005b>
   3f576:	80 93 57 00 	sts	0x0057, r24	; 0x800057 <__TEXT_REGION_LENGTH__+0x700057>
   3f57a:	e8 95       	spm
   3f57c:	07 b6       	in	r0, 0x37	; 55
   3f57e:	00 fc       	sbrc	r0, 0
							boot_spm_busy_wait();
   3f580:	fd cf       	rjmp	.-6      	; 0x3f57c <main+0x692>
   3f582:	81 e1       	ldi	r24, 0x11	; 17
   3f584:	80 93 57 00 	sts	0x0057, r24	; 0x800057 <__TEXT_REGION_LENGTH__+0x700057>
							boot_rww_enable();				// Re-enable the RWW section
   3f588:	e8 95       	spm
   3f58a:	1a 82       	std	Y+2, r1	; 0x02
   3f58c:	2a 01       	movw	r4, r20
						msgBuffer[1]	=	STATUS_CMD_OK;
   3f58e:	3b 01       	movw	r6, r22
					break;
   3f590:	97 ce       	rjmp	.-722    	; 0x3f2c0 <main+0x3d6>
   3f592:	d3 01       	movw	r26, r6
   3f594:	c2 01       	movw	r24, r4
							uint16_t ii = address >> 1;
   3f596:	b6 95       	lsr	r27
   3f598:	a7 95       	ror	r26
   3f59a:	97 95       	ror	r25
   3f59c:	87 95       	ror	r24
   3f59e:	6c 01       	movw	r12, r24
   3f5a0:	f8 01       	movw	r30, r16
   3f5a2:	e8 0f       	add	r30, r24
							while (size) {
   3f5a4:	f9 1f       	adc	r31, r25
   3f5a6:	c9 5d       	subi	r28, 0xD9	; 217
   3f5a8:	de 4f       	sbci	r29, 0xFE	; 254
   3f5aa:	f9 83       	std	Y+1, r31	; 0x01
   3f5ac:	e8 83       	st	Y, r30
   3f5ae:	c7 52       	subi	r28, 0x27	; 39
   3f5b0:	d1 40       	sbci	r29, 0x01	; 1
   3f5b2:	c0 5e       	subi	r28, 0xE0	; 224
   3f5b4:	de 4f       	sbci	r29, 0xFE	; 254
						unsigned char	*p	=	msgBuffer+10;
   3f5b6:	88 81       	ld	r24, Y
   3f5b8:	c0 52       	subi	r28, 0x20	; 32
   3f5ba:	d1 40       	sbci	r29, 0x01	; 1
   3f5bc:	cf 5d       	subi	r28, 0xDF	; 223
   3f5be:	de 4f       	sbci	r29, 0xFE	; 254
   3f5c0:	98 81       	ld	r25, Y
   3f5c2:	c1 52       	subi	r28, 0x21	; 33
   3f5c4:	d1 40       	sbci	r29, 0x01	; 1
   3f5c6:	c9 5d       	subi	r28, 0xD9	; 217
   3f5c8:	de 4f       	sbci	r29, 0xFE	; 254
							while (size) {
   3f5ca:	e8 81       	ld	r30, Y
   3f5cc:	f9 81       	ldd	r31, Y+1	; 0x01
   3f5ce:	c7 52       	subi	r28, 0x27	; 39
   3f5d0:	d1 40       	sbci	r29, 0x01	; 1
   3f5d2:	ec 15       	cp	r30, r12
   3f5d4:	fd 05       	cpc	r31, r13
   3f5d6:	69 f4       	brne	.+26     	; 0x3f5f2 <main+0x708>
   3f5d8:	30 e0       	ldi	r19, 0x00	; 0
   3f5da:	20 e0       	ldi	r18, 0x00	; 0
   3f5dc:	00 0f       	add	r16, r16
   3f5de:	11 1f       	adc	r17, r17
   3f5e0:	22 1f       	adc	r18, r18
   3f5e2:	33 1f       	adc	r19, r19
   3f5e4:	b9 01       	movw	r22, r18
   3f5e6:	a8 01       	movw	r20, r16
   3f5e8:	44 0d       	add	r20, r4
   3f5ea:	55 1d       	adc	r21, r5
   3f5ec:	66 1d       	adc	r22, r6
   3f5ee:	77 1d       	adc	r23, r7
   3f5f0:	cc cf       	rjmp	.-104    	; 0x3f58a <main+0x6a0>
   3f5f2:	dc 01       	movw	r26, r24
								eeprom_write_byte((uint8_t*)ii, *p++);
   3f5f4:	6d 91       	ld	r22, X+
   3f5f6:	7d 01       	movw	r14, r26
   3f5f8:	c6 01       	movw	r24, r12
   3f5fa:	df d0       	rcall	.+446    	; 0x3f7ba <eeprom_write_byte>
   3f5fc:	bf ef       	ldi	r27, 0xFF	; 255
   3f5fe:	cb 1a       	sub	r12, r27
								ii++;
   3f600:	db 0a       	sbc	r13, r27
   3f602:	c7 01       	movw	r24, r14
   3f604:	e0 cf       	rjmp	.-64     	; 0x3f5c6 <main+0x6dc>
								eeprom_write_byte((uint8_t*)ii, *p++);
   3f606:	8a 81       	ldd	r24, Y+2	; 0x02
   3f608:	9b 81       	ldd	r25, Y+3	; 0x03
						unsigned int	size	=	((msgBuffer[1])<<8) | msgBuffer[2];
   3f60a:	98 27       	eor	r25, r24
   3f60c:	89 27       	eor	r24, r25
   3f60e:	98 27       	eor	r25, r24
   3f610:	8c 01       	movw	r16, r24
   3f612:	0d 5f       	subi	r16, 0xFD	; 253
						msgLength				=	size+3;
   3f614:	1f 4f       	sbci	r17, 0xFF	; 255
   3f616:	1a 82       	std	Y+2, r1	; 0x02
   3f618:	24 31       	cpi	r18, 0x14	; 20
						*p++	=	STATUS_CMD_OK;
   3f61a:	c9 f4       	brne	.+50     	; 0x3f64e <main+0x764>
						if (msgBuffer[0] == CMD_READ_FLASH_ISP )
   3f61c:	de 01       	movw	r26, r28
   3f61e:	11 96       	adiw	r26, 0x01	; 1
   3f620:	6b be       	out	0x3b, r6	; 59
   3f622:	f2 01       	movw	r30, r4
								data	=	pgm_read_word_far(address);
   3f624:	27 91       	elpm	r18, Z+
   3f626:	36 91       	elpm	r19, Z
   3f628:	12 96       	adiw	r26, 0x02	; 2
   3f62a:	2c 93       	st	X, r18
								*p++	=	(unsigned char)data;		//LSB
   3f62c:	12 97       	sbiw	r26, 0x02	; 2
   3f62e:	fd 01       	movw	r30, r26
   3f630:	34 96       	adiw	r30, 0x04	; 4
								*p++	=	(unsigned char)(data >> 8);	//MSB
   3f632:	13 96       	adiw	r26, 0x03	; 3
   3f634:	3c 93       	st	X, r19
   3f636:	13 97       	sbiw	r26, 0x03	; 3
   3f638:	22 e0       	ldi	r18, 0x02	; 2
   3f63a:	42 0e       	add	r4, r18
								address	+=	2;							// Select next word in memory
   3f63c:	51 1c       	adc	r5, r1
   3f63e:	61 1c       	adc	r6, r1
   3f640:	71 1c       	adc	r7, r1
   3f642:	02 97       	sbiw	r24, 0x02	; 2
   3f644:	12 96       	adiw	r26, 0x02	; 2
								size	-=	2;
   3f646:	00 97       	sbiw	r24, 0x00	; 0
							}while (size);
   3f648:	59 f7       	brne	.-42     	; 0x3f620 <main+0x736>
   3f64a:	10 82       	st	Z, r1
   3f64c:	af ce       	rjmp	.-674    	; 0x3f3ac <main+0x4c2>
						*p++	=	STATUS_CMD_OK;
   3f64e:	fe 01       	movw	r30, r28
					break;
   3f650:	31 96       	adiw	r30, 0x01	; 1
   3f652:	9f 01       	movw	r18, r30
   3f654:	28 0f       	add	r18, r24
   3f656:	39 1f       	adc	r19, r25
   3f658:	b3 01       	movw	r22, r6
   3f65a:	a2 01       	movw	r20, r4
						if (msgBuffer[0] == CMD_READ_FLASH_ISP )
   3f65c:	41 bd       	out	0x21, r20	; 33
   3f65e:	c5 2e       	mov	r12, r21
								EEARL	=	address;			// Setup EEPROM address
   3f660:	d6 2e       	mov	r13, r22
								EEARH	=	((address >> 8));
   3f662:	e7 2e       	mov	r14, r23
   3f664:	ff 24       	eor	r15, r15
   3f666:	c2 bc       	out	0x22, r12	; 34
   3f668:	4f 5f       	subi	r20, 0xFF	; 255
   3f66a:	5f 4f       	sbci	r21, 0xFF	; 255
								address++;					// Select next EEPROM byte
   3f66c:	6f 4f       	sbci	r22, 0xFF	; 255
   3f66e:	7f 4f       	sbci	r23, 0xFF	; 255
   3f670:	f8 9a       	sbi	0x1f, 0	; 31
   3f672:	a0 b5       	in	r26, 0x20	; 32
								EECR	|=	(1<<EERE);			// Read EEPROM
   3f674:	a2 83       	std	Z+2, r26	; 0x02
								*p++	=	EEDR;				// Send EEPROM data
   3f676:	31 96       	adiw	r30, 0x01	; 1
   3f678:	2e 17       	cp	r18, r30
							} while (size);
   3f67a:	3f 07       	cpc	r19, r31
   3f67c:	79 f7       	brne	.-34     	; 0x3f65c <main+0x772>
   3f67e:	ac 01       	movw	r20, r24
   3f680:	41 50       	subi	r20, 0x01	; 1
								address++;					// Select next EEPROM byte
   3f682:	51 09       	sbc	r21, r1
   3f684:	70 e0       	ldi	r23, 0x00	; 0
   3f686:	60 e0       	ldi	r22, 0x00	; 0
   3f688:	4f 5f       	subi	r20, 0xFF	; 255
   3f68a:	5f 4f       	sbci	r21, 0xFF	; 255
   3f68c:	6f 4f       	sbci	r22, 0xFF	; 255
   3f68e:	7f 4f       	sbci	r23, 0xFF	; 255
   3f690:	44 0e       	add	r4, r20
   3f692:	55 1e       	adc	r5, r21
   3f694:	66 1e       	adc	r6, r22
   3f696:	77 1e       	adc	r7, r23
   3f698:	e3 e0       	ldi	r30, 0x03	; 3
   3f69a:	f0 e0       	ldi	r31, 0x00	; 0
								*p++	=	EEDR;				// Send EEPROM data
   3f69c:	ec 0f       	add	r30, r28
   3f69e:	fd 1f       	adc	r31, r29
   3f6a0:	e8 0f       	add	r30, r24
   3f6a2:	f9 1f       	adc	r31, r25
   3f6a4:	d2 cf       	rjmp	.-92     	; 0x3f64a <main+0x760>
   3f6a6:	d7 01       	movw	r26, r14
   3f6a8:	cd 90       	ld	r12, X+
				c	=	*p++;
   3f6aa:	7d 01       	movw	r14, r26
   3f6ac:	8c 2d       	mov	r24, r12
   3f6ae:	0f 94 a0 f0 	call	0x3e140	; 0x3e140 <sendchar>
				sendchar(c);
   3f6b2:	dc 24       	eor	r13, r12
   3f6b4:	a7 ce       	rjmp	.-690    	; 0x3f404 <main+0x51a>
				checksum ^=c;
   3f6b6:	50 e0       	ldi	r21, 0x00	; 0
				msgLength--;
   3f6b8:	40 e0       	ldi	r20, 0x00	; 0
   3f6ba:	27 cd       	rjmp	.-1458   	; 0x3f10a <main+0x220>
   3f6bc:	ce 5d       	subi	r28, 0xDE	; 222
   3f6be:	de 4f       	sbci	r29, 0xFE	; 254
   3f6c0:	59 83       	std	Y+1, r21	; 0x01
   3f6c2:	48 83       	st	Y, r20
   3f6c4:	c2 52       	subi	r28, 0x22	; 34
   3f6c6:	d1 40       	sbci	r29, 0x01	; 1
   3f6c8:	4c cd       	rjmp	.-1384   	; 0x3f162 <main+0x278>

0003f6ca <__divmodhi4>:
   3f6ca:	97 fb       	bst	r25, 7
			while ( msgParseState != ST_PROCESS )
   3f6cc:	07 2e       	mov	r0, r23
   3f6ce:	16 f4       	brtc	.+4      	; 0x3f6d4 <__divmodhi4+0xa>
   3f6d0:	00 94       	com	r0
   3f6d2:	06 d0       	rcall	.+12     	; 0x3f6e0 <__divmodhi4_neg1>
   3f6d4:	77 fd       	sbrc	r23, 7
   3f6d6:	08 d0       	rcall	.+16     	; 0x3f6e8 <__divmodhi4_neg2>
   3f6d8:	3e d0       	rcall	.+124    	; 0x3f756 <__udivmodhi4>
   3f6da:	07 fc       	sbrc	r0, 7
   3f6dc:	05 d0       	rcall	.+10     	; 0x3f6e8 <__divmodhi4_neg2>
   3f6de:	3e f4       	brtc	.+14     	; 0x3f6ee <__divmodhi4_exit>

0003f6e0 <__divmodhi4_neg1>:
   3f6e0:	90 95       	com	r25
   3f6e2:	81 95       	neg	r24
   3f6e4:	9f 4f       	sbci	r25, 0xFF	; 255
   3f6e6:	08 95       	ret

0003f6e8 <__divmodhi4_neg2>:
   3f6e8:	70 95       	com	r23
   3f6ea:	61 95       	neg	r22
   3f6ec:	7f 4f       	sbci	r23, 0xFF	; 255

0003f6ee <__divmodhi4_exit>:
   3f6ee:	08 95       	ret

0003f6f0 <__udivmodsi4>:
   3f6f0:	a1 e2       	ldi	r26, 0x21	; 33
   3f6f2:	1a 2e       	mov	r1, r26
   3f6f4:	aa 1b       	sub	r26, r26
   3f6f6:	bb 1b       	sub	r27, r27
   3f6f8:	fd 01       	movw	r30, r26
   3f6fa:	0d c0       	rjmp	.+26     	; 0x3f716 <__udivmodsi4_ep>

0003f6fc <__udivmodsi4_loop>:
   3f6fc:	aa 1f       	adc	r26, r26
   3f6fe:	bb 1f       	adc	r27, r27
   3f700:	ee 1f       	adc	r30, r30
   3f702:	ff 1f       	adc	r31, r31
   3f704:	a2 17       	cp	r26, r18
   3f706:	b3 07       	cpc	r27, r19
   3f708:	e4 07       	cpc	r30, r20
   3f70a:	f5 07       	cpc	r31, r21
   3f70c:	20 f0       	brcs	.+8      	; 0x3f716 <__udivmodsi4_ep>
   3f70e:	a2 1b       	sub	r26, r18
   3f710:	b3 0b       	sbc	r27, r19
   3f712:	e4 0b       	sbc	r30, r20
   3f714:	f5 0b       	sbc	r31, r21

0003f716 <__udivmodsi4_ep>:
   3f716:	66 1f       	adc	r22, r22
   3f718:	77 1f       	adc	r23, r23
   3f71a:	88 1f       	adc	r24, r24
   3f71c:	99 1f       	adc	r25, r25
   3f71e:	1a 94       	dec	r1
   3f720:	69 f7       	brne	.-38     	; 0x3f6fc <__udivmodsi4_loop>
   3f722:	60 95       	com	r22
   3f724:	70 95       	com	r23
   3f726:	80 95       	com	r24
   3f728:	90 95       	com	r25
   3f72a:	9b 01       	movw	r18, r22
   3f72c:	ac 01       	movw	r20, r24
   3f72e:	bd 01       	movw	r22, r26
   3f730:	cf 01       	movw	r24, r30
   3f732:	08 95       	ret

0003f734 <__bswapsi2>:
   3f734:	69 27       	eor	r22, r25
   3f736:	96 27       	eor	r25, r22
   3f738:	69 27       	eor	r22, r25
   3f73a:	78 27       	eor	r23, r24
   3f73c:	87 27       	eor	r24, r23
   3f73e:	78 27       	eor	r23, r24
   3f740:	08 95       	ret

0003f742 <__muluhisi3>:
   3f742:	1d d0       	rcall	.+58     	; 0x3f77e <__umulhisi3>
   3f744:	a5 9f       	mul	r26, r21
   3f746:	90 0d       	add	r25, r0
   3f748:	b4 9f       	mul	r27, r20
   3f74a:	90 0d       	add	r25, r0
   3f74c:	a4 9f       	mul	r26, r20
   3f74e:	80 0d       	add	r24, r0
   3f750:	91 1d       	adc	r25, r1
   3f752:	11 24       	eor	r1, r1
   3f754:	08 95       	ret

0003f756 <__udivmodhi4>:
   3f756:	aa 1b       	sub	r26, r26
   3f758:	bb 1b       	sub	r27, r27
   3f75a:	51 e1       	ldi	r21, 0x11	; 17
   3f75c:	07 c0       	rjmp	.+14     	; 0x3f76c <__udivmodhi4_ep>

0003f75e <__udivmodhi4_loop>:
   3f75e:	aa 1f       	adc	r26, r26
   3f760:	bb 1f       	adc	r27, r27
   3f762:	a6 17       	cp	r26, r22
   3f764:	b7 07       	cpc	r27, r23
   3f766:	10 f0       	brcs	.+4      	; 0x3f76c <__udivmodhi4_ep>
   3f768:	a6 1b       	sub	r26, r22
   3f76a:	b7 0b       	sbc	r27, r23

0003f76c <__udivmodhi4_ep>:
   3f76c:	88 1f       	adc	r24, r24
   3f76e:	99 1f       	adc	r25, r25
   3f770:	5a 95       	dec	r21
   3f772:	a9 f7       	brne	.-22     	; 0x3f75e <__udivmodhi4_loop>
   3f774:	80 95       	com	r24
   3f776:	90 95       	com	r25
   3f778:	bc 01       	movw	r22, r24
   3f77a:	cd 01       	movw	r24, r26
   3f77c:	08 95       	ret

0003f77e <__umulhisi3>:
   3f77e:	a2 9f       	mul	r26, r18
   3f780:	b0 01       	movw	r22, r0
   3f782:	b3 9f       	mul	r27, r19
   3f784:	c0 01       	movw	r24, r0
   3f786:	a3 9f       	mul	r26, r19
   3f788:	70 0d       	add	r23, r0
   3f78a:	81 1d       	adc	r24, r1
   3f78c:	11 24       	eor	r1, r1
   3f78e:	91 1d       	adc	r25, r1
   3f790:	b2 9f       	mul	r27, r18
   3f792:	70 0d       	add	r23, r0
   3f794:	81 1d       	adc	r24, r1
   3f796:	11 24       	eor	r1, r1
   3f798:	91 1d       	adc	r25, r1
   3f79a:	08 95       	ret

0003f79c <memset>:
   3f79c:	dc 01       	movw	r26, r24
   3f79e:	01 c0       	rjmp	.+2      	; 0x3f7a2 <memset+0x6>
   3f7a0:	6d 93       	st	X+, r22
   3f7a2:	41 50       	subi	r20, 0x01	; 1
   3f7a4:	50 40       	sbci	r21, 0x00	; 0
   3f7a6:	e0 f7       	brcc	.-8      	; 0x3f7a0 <memset+0x4>
   3f7a8:	08 95       	ret

0003f7aa <eeprom_read_byte>:
   3f7aa:	f9 99       	sbic	0x1f, 1	; 31
   3f7ac:	fe cf       	rjmp	.-4      	; 0x3f7aa <eeprom_read_byte>
   3f7ae:	92 bd       	out	0x22, r25	; 34
   3f7b0:	81 bd       	out	0x21, r24	; 33
   3f7b2:	f8 9a       	sbi	0x1f, 0	; 31
   3f7b4:	99 27       	eor	r25, r25
   3f7b6:	80 b5       	in	r24, 0x20	; 32
   3f7b8:	08 95       	ret

0003f7ba <eeprom_write_byte>:
   3f7ba:	26 2f       	mov	r18, r22

0003f7bc <eeprom_write_r18>:
   3f7bc:	f9 99       	sbic	0x1f, 1	; 31
   3f7be:	fe cf       	rjmp	.-4      	; 0x3f7bc <eeprom_write_r18>
   3f7c0:	1f ba       	out	0x1f, r1	; 31
   3f7c2:	92 bd       	out	0x22, r25	; 34
   3f7c4:	81 bd       	out	0x21, r24	; 33
   3f7c6:	20 bd       	out	0x20, r18	; 32
   3f7c8:	0f b6       	in	r0, 0x3f	; 63
   3f7ca:	f8 94       	cli
   3f7cc:	fa 9a       	sbi	0x1f, 2	; 31
   3f7ce:	f9 9a       	sbi	0x1f, 1	; 31
   3f7d0:	0f be       	out	0x3f, r0	; 63
   3f7d2:	01 96       	adiw	r24, 0x01	; 1
   3f7d4:	08 95       	ret

0003f7d6 <_exit>:
   3f7d6:	f8 94       	cli

0003f7d8 <__stop_program>:
   3f7d8:	ff cf       	rjmp	.-2      	; 0x3f7d8 <__stop_program>
