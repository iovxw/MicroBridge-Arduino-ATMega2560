   1               		.file	"mmc.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__RAMPZ__ = 0x3b
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
   8               		.text
   9               	.Ltext0:
  10               		.cfi_sections	.debug_frame
  12               	send_cmd:
  13               	.LVL0:
  14               	.LFB0:
  15               		.file 1 "mmc.c"
   1:mmc.c         **** /*-----------------------------------------------------------------------/
   2:mmc.c         **** /  PFF - Generic low level disk control module            (C)ChaN, 2010
   3:mmc.c         **** /------------------------------------------------------------------------/
   4:mmc.c         **** /
   5:mmc.c         **** /  Copyright (C) 2010, ChaN, all right reserved.
   6:mmc.c         **** /
   7:mmc.c         **** / * This software is a free software and there is NO WARRANTY.
   8:mmc.c         **** / * No restriction on use. You can use, modify and redistribute it for
   9:mmc.c         **** /   personal, non-profit or commercial products UNDER YOUR RESPONSIBILITY.
  10:mmc.c         **** / * Redistributions of source code must retain the above copyright notice.
  11:mmc.c         **** /
  12:mmc.c         **** /------------------------------------------------------------------------/
  13:mmc.c         **** / Dec 6, 2010  First release
  14:mmc.c         **** */
  15:mmc.c         **** 
  16:mmc.c         **** #include "pff.h"
  17:mmc.c         **** #include "diskio.h"
  18:mmc.c         **** #include <avr/io.h>
  19:mmc.c         **** 
  20:mmc.c         **** void init_spi (void);		/* Initialize SPI port (asmfunc.S) */
  21:mmc.c         **** void deselect (void);		/* Select MMC (asmfunc.S) */
  22:mmc.c         **** void select (void);			/* Deselect MMC (asmfunc.S) */
  23:mmc.c         **** void xmit_spi (BYTE d);		/* Send a byte to the MMC (asmfunc.S) */
  24:mmc.c         **** BYTE rcv_spi (void);		/* Send a 0xFF to the MMC and get the received byte (asmfunc.S) */
  25:mmc.c         **** void dly_100us (void);		/* Delay 100 microseconds (asmfunc.S) */
  26:mmc.c         **** 
  27:mmc.c         **** 
  28:mmc.c         **** 
  29:mmc.c         **** /*--------------------------------------------------------------------------
  30:mmc.c         **** 
  31:mmc.c         ****    Module Private Functions
  32:mmc.c         **** 
  33:mmc.c         **** ---------------------------------------------------------------------------*/
  34:mmc.c         **** 
  35:mmc.c         **** /* Definitions for MMC/SDC command */
  36:mmc.c         **** #define CMD0	(0x40+0)	/* GO_IDLE_STATE */
  37:mmc.c         **** #define CMD1	(0x40+1)	/* SEND_OP_COND (MMC) */
  38:mmc.c         **** #define	ACMD41	(0xC0+41)	/* SEND_OP_COND (SDC) */
  39:mmc.c         **** #define CMD8	(0x40+8)	/* SEND_IF_COND */
  40:mmc.c         **** #define CMD16	(0x40+16)	/* SET_BLOCKLEN */
  41:mmc.c         **** #define CMD17	(0x40+17)	/* READ_SINGLE_BLOCK */
  42:mmc.c         **** #define CMD24	(0x40+24)	/* WRITE_BLOCK */
  43:mmc.c         **** #define CMD55	(0x40+55)	/* APP_CMD */
  44:mmc.c         **** #define CMD58	(0x40+58)	/* READ_OCR */
  45:mmc.c         **** 
  46:mmc.c         **** 
  47:mmc.c         **** /* Card type flags (CardType) */
  48:mmc.c         **** #define CT_MMC				0x01	/* MMC ver 3 */
  49:mmc.c         **** #define CT_SD1				0x02	/* SD ver 1 */
  50:mmc.c         **** #define CT_SD2				0x04	/* SD ver 2 */
  51:mmc.c         **** #define CT_BLOCK			0x08	/* Block addressing */
  52:mmc.c         **** 
  53:mmc.c         **** 
  54:mmc.c         **** static
  55:mmc.c         **** BYTE CardType;
  56:mmc.c         **** 
  57:mmc.c         **** 
  58:mmc.c         **** /*-----------------------------------------------------------------------*/
  59:mmc.c         **** /* Send a command packet to MMC                                          */
  60:mmc.c         **** /*-----------------------------------------------------------------------*/
  61:mmc.c         **** 
  62:mmc.c         **** static
  63:mmc.c         **** BYTE send_cmd (
  64:mmc.c         **** 	BYTE cmd,		/* 1st byte (Start + Index) */
  65:mmc.c         **** 	DWORD arg		/* Argument (32 bits) */
  66:mmc.c         **** )
  67:mmc.c         **** {
  16               		.loc 1 67 1 view -0
  17               		.cfi_startproc
  18               		.loc 1 67 1 is_stmt 0 view .LVU1
  19 0000 FF92      		push r15
  20               	.LCFI0:
  21               		.cfi_def_cfa_offset 4
  22               		.cfi_offset 15, -3
  23 0002 0F93      		push r16
  24               	.LCFI1:
  25               		.cfi_def_cfa_offset 5
  26               		.cfi_offset 16, -4
  27 0004 1F93      		push r17
  28               	.LCFI2:
  29               		.cfi_def_cfa_offset 6
  30               		.cfi_offset 17, -5
  31 0006 CF93      		push r28
  32               	.LCFI3:
  33               		.cfi_def_cfa_offset 7
  34               		.cfi_offset 28, -6
  35 0008 DF93      		push r29
  36               	.LCFI4:
  37               		.cfi_def_cfa_offset 8
  38               		.cfi_offset 29, -7
  39               	/* prologue: function */
  40               	/* frame size = 0 */
  41               	/* stack size = 5 */
  42               	.L__stack_usage = 5
  43 000a C82F      		mov r28,r24
  44 000c D42F      		mov r29,r20
  45 000e 152F      		mov r17,r21
  46 0010 062F      		mov r16,r22
  47 0012 F72E      		mov r15,r23
  68:mmc.c         **** 	BYTE n, res;
  48               		.loc 1 68 2 is_stmt 1 view .LVU2
  69:mmc.c         **** 
  70:mmc.c         **** 
  71:mmc.c         **** 	if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
  49               		.loc 1 71 2 view .LVU3
  50               		.loc 1 71 5 is_stmt 0 view .LVU4
  51 0014 87FF      		sbrs r24,7
  52 0016 00C0      		rjmp .L2
  72:mmc.c         **** 		cmd &= 0x7F;
  53               		.loc 1 72 3 is_stmt 1 view .LVU5
  54               	.LVL1:
  73:mmc.c         **** 		res = send_cmd(CMD55, 0);
  55               		.loc 1 73 3 view .LVU6
  56               		.loc 1 73 9 is_stmt 0 view .LVU7
  57 0018 40E0      		ldi r20,0
  58 001a 50E0      		ldi r21,0
  59 001c BA01      		movw r22,r20
  60               	.LVL2:
  61               		.loc 1 73 9 view .LVU8
  62 001e 87E7      		ldi r24,lo8(119)
  63               	.LVL3:
  64               		.loc 1 73 9 view .LVU9
  65 0020 0E94 0000 		call send_cmd
  66               	.LVL4:
  74:mmc.c         **** 		if (res > 1) return res;
  67               		.loc 1 74 3 is_stmt 1 view .LVU10
  68               		.loc 1 74 6 is_stmt 0 view .LVU11
  69 0024 8230      		cpi r24,lo8(2)
  70 0026 00F4      		brsh .L1
  72:mmc.c         **** 		cmd &= 0x7F;
  71               		.loc 1 72 7 view .LVU12
  72 0028 CF77      		andi r28,lo8(127)
  73               	.LVL5:
  74               	.L2:
  75:mmc.c         **** 	}
  76:mmc.c         **** 
  77:mmc.c         **** 	/* Select the card */
  78:mmc.c         **** 	select();
  75               		.loc 1 78 2 is_stmt 1 view .LVU13
  76 002a 0E94 0000 		call select
  77               	.LVL6:
  79:mmc.c         **** 
  80:mmc.c         **** 	/* Send a command packet */
  81:mmc.c         **** 	xmit_spi(cmd);						/* Start + Command index */
  78               		.loc 1 81 2 view .LVU14
  79 002e 8C2F      		mov r24,r28
  80 0030 0E94 0000 		call xmit_spi
  81               	.LVL7:
  82:mmc.c         **** 	xmit_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
  82               		.loc 1 82 2 view .LVU15
  83 0034 8F2D      		mov r24,r15
  84 0036 0E94 0000 		call xmit_spi
  85               	.LVL8:
  83:mmc.c         **** 	xmit_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
  86               		.loc 1 83 2 view .LVU16
  87 003a 802F      		mov r24,r16
  88 003c 0E94 0000 		call xmit_spi
  89               	.LVL9:
  84:mmc.c         **** 	xmit_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
  90               		.loc 1 84 2 view .LVU17
  91 0040 812F      		mov r24,r17
  92 0042 0E94 0000 		call xmit_spi
  93               	.LVL10:
  85:mmc.c         **** 	xmit_spi((BYTE)arg);				/* Argument[7..0] */
  94               		.loc 1 85 2 view .LVU18
  95 0046 8D2F      		mov r24,r29
  96 0048 0E94 0000 		call xmit_spi
  97               	.LVL11:
  86:mmc.c         **** 	n = 0x01;							/* Dummy CRC + Stop */
  98               		.loc 1 86 2 view .LVU19
  87:mmc.c         **** 	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
  99               		.loc 1 87 2 view .LVU20
 100               		.loc 1 87 21 is_stmt 0 view .LVU21
 101 004c 85E9      		ldi r24,lo8(-107)
 102               		.loc 1 87 5 view .LVU22
 103 004e C034      		cpi r28,lo8(64)
 104 0050 01F0      		breq .L4
  88:mmc.c         **** 	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 105               		.loc 1 88 2 is_stmt 1 view .LVU23
 106               		.loc 1 88 21 is_stmt 0 view .LVU24
 107 0052 87E8      		ldi r24,lo8(-121)
 108               		.loc 1 88 5 view .LVU25
 109 0054 C834      		cpi r28,lo8(72)
 110 0056 01F0      		breq .L4
  86:mmc.c         **** 	n = 0x01;							/* Dummy CRC + Stop */
 111               		.loc 1 86 4 view .LVU26
 112 0058 81E0      		ldi r24,lo8(1)
 113               	.L4:
 114               	.LVL12:
  89:mmc.c         **** 	xmit_spi(n);
 115               		.loc 1 89 2 is_stmt 1 view .LVU27
 116 005a 0E94 0000 		call xmit_spi
 117               	.LVL13:
  90:mmc.c         **** 
  91:mmc.c         **** 	/* Receive a command response */
  92:mmc.c         **** 	n = 10;								/* Wait for a valid response in timeout of 10 attempts */
 118               		.loc 1 92 2 view .LVU28
  89:mmc.c         **** 	xmit_spi(n);
 119               		.loc 1 89 2 is_stmt 0 view .LVU29
 120 005e CAE0      		ldi r28,lo8(10)
 121               	.LVL14:
 122               	.L5:
  93:mmc.c         **** 	do {
 123               		.loc 1 93 2 is_stmt 1 discriminator 2 view .LVU30
  94:mmc.c         **** 		res = rcv_spi();
 124               		.loc 1 94 3 discriminator 2 view .LVU31
 125               		.loc 1 94 9 is_stmt 0 discriminator 2 view .LVU32
 126 0060 0E94 0000 		call rcv_spi
 127               	.LVL15:
  95:mmc.c         **** 	} while ((res & 0x80) && --n);
 128               		.loc 1 95 10 is_stmt 1 discriminator 2 view .LVU33
 129               		.loc 1 95 2 is_stmt 0 discriminator 2 view .LVU34
 130 0064 87FF      		sbrs r24,7
 131 0066 00C0      		rjmp .L1
 132               	.LVL16:
 133               		.loc 1 95 24 discriminator 1 view .LVU35
 134 0068 C150      		subi r28,lo8(-(-1))
 135               	.LVL17:
 136               		.loc 1 95 24 discriminator 1 view .LVU36
 137 006a 01F4      		brne .L5
 138               	.LVL18:
 139               	.L1:
 140               	/* epilogue start */
  96:mmc.c         **** 
  97:mmc.c         **** 	return res;			/* Return with the response value */
  98:mmc.c         **** }
 141               		.loc 1 98 1 view .LVU37
 142 006c DF91      		pop r29
 143 006e CF91      		pop r28
 144 0070 1F91      		pop r17
 145 0072 0F91      		pop r16
 146 0074 FF90      		pop r15
 147 0076 0895      		ret
 148               		.cfi_endproc
 149               	.LFE0:
 151               	.global	disk_initialize
 153               	disk_initialize:
 154               	.LFB1:
  99:mmc.c         **** 
 100:mmc.c         **** 
 101:mmc.c         **** 
 102:mmc.c         **** 
 103:mmc.c         **** /*--------------------------------------------------------------------------
 104:mmc.c         **** 
 105:mmc.c         ****    Public Functions
 106:mmc.c         **** 
 107:mmc.c         **** ---------------------------------------------------------------------------*/
 108:mmc.c         **** 
 109:mmc.c         **** /*-----------------------------------------------------------------------*/
 110:mmc.c         **** /* Initialize Disk Drive                                                 */
 111:mmc.c         **** /*-----------------------------------------------------------------------*/
 112:mmc.c         **** 
 113:mmc.c         **** DSTATUS disk_initialize (void)
 114:mmc.c         **** {
 155               		.loc 1 114 1 is_stmt 1 view -0
 156               		.cfi_startproc
 157 0078 CF92      		push r12
 158               	.LCFI5:
 159               		.cfi_def_cfa_offset 4
 160               		.cfi_offset 12, -3
 161 007a DF92      		push r13
 162               	.LCFI6:
 163               		.cfi_def_cfa_offset 5
 164               		.cfi_offset 13, -4
 165 007c EF92      		push r14
 166               	.LCFI7:
 167               		.cfi_def_cfa_offset 6
 168               		.cfi_offset 14, -5
 169 007e FF92      		push r15
 170               	.LCFI8:
 171               		.cfi_def_cfa_offset 7
 172               		.cfi_offset 15, -6
 173 0080 0F93      		push r16
 174               	.LCFI9:
 175               		.cfi_def_cfa_offset 8
 176               		.cfi_offset 16, -7
 177 0082 1F93      		push r17
 178               	.LCFI10:
 179               		.cfi_def_cfa_offset 9
 180               		.cfi_offset 17, -8
 181 0084 CF93      		push r28
 182               	.LCFI11:
 183               		.cfi_def_cfa_offset 10
 184               		.cfi_offset 28, -9
 185 0086 DF93      		push r29
 186               	.LCFI12:
 187               		.cfi_def_cfa_offset 11
 188               		.cfi_offset 29, -10
 189 0088 00D0      		rcall .
 190 008a 0F92      		push __tmp_reg__
 191               	.LCFI13:
 192               		.cfi_def_cfa_offset 15
 193 008c CDB7      		in r28,__SP_L__
 194 008e DEB7      		in r29,__SP_H__
 195               	.LCFI14:
 196               		.cfi_def_cfa_register 28
 197               	/* prologue: function */
 198               	/* frame size = 4 */
 199               	/* stack size = 12 */
 200               	.L__stack_usage = 12
 115:mmc.c         **** 	BYTE n, cmd, ty, ocr[4];
 201               		.loc 1 115 2 view .LVU39
 116:mmc.c         **** 	UINT tmr;
 202               		.loc 1 116 2 view .LVU40
 117:mmc.c         **** 
 118:mmc.c         **** 	init_spi();							/* Initialize ports to control MMC */
 203               		.loc 1 118 2 view .LVU41
 204 0090 0E94 0000 		call init_spi
 205               	.LVL19:
 119:mmc.c         **** 	for (n = 100; n; n--) dly_100us();	/* 10ms delay */
 206               		.loc 1 119 2 view .LVU42
 207               		.loc 1 119 16 view .LVU43
 118:mmc.c         **** 	for (n = 100; n; n--) dly_100us();	/* 10ms delay */
 208               		.loc 1 118 2 is_stmt 0 view .LVU44
 209 0094 14E6      		ldi r17,lo8(100)
 210               	.LVL20:
 211               	.L10:
 212               		.loc 1 119 24 is_stmt 1 discriminator 3 view .LVU45
 213 0096 0E94 0000 		call dly_100us
 214               	.LVL21:
 215               		.loc 1 119 19 discriminator 3 view .LVU46
 216               		.loc 1 119 16 discriminator 3 view .LVU47
 217               		.loc 1 119 2 is_stmt 0 discriminator 3 view .LVU48
 218 009a 1150      		subi r17,lo8(-(-1))
 219               	.LVL22:
 220               		.loc 1 119 2 discriminator 3 view .LVU49
 221 009c 01F4      		brne .L10
 222 009e 1AE0      		ldi r17,lo8(10)
 223               	.LVL23:
 224               	.L11:
 120:mmc.c         **** 	for (n = 10; n; n--) deselect();	/* 80 Dummy clocks with CS=H */
 225               		.loc 1 120 23 is_stmt 1 discriminator 3 view .LVU50
 226 00a0 0E94 0000 		call deselect
 227               	.LVL24:
 228               		.loc 1 120 18 discriminator 3 view .LVU51
 229               		.loc 1 120 15 discriminator 3 view .LVU52
 230               		.loc 1 120 2 is_stmt 0 discriminator 3 view .LVU53
 231 00a4 1150      		subi r17,lo8(-(-1))
 232               	.LVL25:
 233               		.loc 1 120 2 discriminator 3 view .LVU54
 234 00a6 01F4      		brne .L11
 121:mmc.c         **** 
 122:mmc.c         **** 	ty = 0;
 235               		.loc 1 122 2 is_stmt 1 view .LVU55
 236               	.LVL26:
 123:mmc.c         **** 	if (send_cmd(CMD0, 0) == 1) {			/* Enter Idle state */
 237               		.loc 1 123 2 view .LVU56
 238               		.loc 1 123 6 is_stmt 0 view .LVU57
 239 00a8 40E0      		ldi r20,0
 240 00aa 50E0      		ldi r21,0
 241 00ac BA01      		movw r22,r20
 242 00ae 80E4      		ldi r24,lo8(64)
 243 00b0 0E94 0000 		call send_cmd
 244               	.LVL27:
 245 00b4 182F      		mov r17,r24
 246               	.LVL28:
 247               		.loc 1 123 5 view .LVU58
 248 00b6 8130      		cpi r24,lo8(1)
 249 00b8 01F0      		breq .+2
 250 00ba 00C0      		rjmp .L12
 124:mmc.c         **** 		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2 */
 251               		.loc 1 124 3 is_stmt 1 view .LVU59
 252               		.loc 1 124 7 is_stmt 0 view .LVU60
 253 00bc 4AEA      		ldi r20,lo8(-86)
 254 00be 51E0      		ldi r21,lo8(1)
 255 00c0 60E0      		ldi r22,0
 256 00c2 70E0      		ldi r23,0
 257 00c4 88E4      		ldi r24,lo8(72)
 258 00c6 0E94 0000 		call send_cmd
 259               	.LVL29:
 260               		.loc 1 124 6 view .LVU61
 261 00ca 8130      		cpi r24,lo8(1)
 262 00cc 01F0      		breq .+2
 263 00ce 00C0      		rjmp .L13
 264 00d0 8E01      		movw r16,r28
 265 00d2 0F5F      		subi r16,-1
 266 00d4 1F4F      		sbci r17,-1
 267 00d6 6E01      		movw r12,r28
 268 00d8 85E0      		ldi r24,5
 269 00da C80E      		add r12,r24
 270 00dc D11C      		adc r13,__zero_reg__
 271 00de 7801      		movw r14,r16
 272               	.L14:
 125:mmc.c         **** 			for (n = 0; n < 4; n++) ocr[n] = rcv_spi();		/* Get trailing return value of R7 resp */
 273               		.loc 1 125 28 is_stmt 1 discriminator 3 view .LVU62
 274               		.loc 1 125 37 is_stmt 0 discriminator 3 view .LVU63
 275 00e0 0E94 0000 		call rcv_spi
 276               	.LVL30:
 277               		.loc 1 125 35 discriminator 3 view .LVU64
 278 00e4 F701      		movw r30,r14
 279 00e6 8193      		st Z+,r24
 280 00e8 7F01      		movw r14,r30
 281               		.loc 1 125 23 is_stmt 1 discriminator 3 view .LVU65
 282               		.loc 1 125 16 discriminator 3 view .LVU66
 283               		.loc 1 125 4 is_stmt 0 discriminator 3 view .LVU67
 284 00ea EC15      		cp r30,r12
 285 00ec FD05      		cpc r31,r13
 286 00ee 01F4      		brne .L14
 126:mmc.c         **** 			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {			/* The card can work at vdd range of 2.7-3.6V */
 287               		.loc 1 126 4 is_stmt 1 view .LVU68
 288               		.loc 1 126 7 is_stmt 0 view .LVU69
 289 00f0 8B81      		ldd r24,Y+3
 290 00f2 8130      		cpi r24,lo8(1)
 291 00f4 01F4      		brne .L12
 292               		.loc 1 126 23 discriminator 1 view .LVU70
 293 00f6 8C81      		ldd r24,Y+4
 294 00f8 8A3A      		cpi r24,lo8(-86)
 295 00fa 01F4      		brne .L12
 296 00fc 90E1      		ldi r25,lo8(16)
 297 00fe E92E      		mov r14,r25
 298 0100 97E2      		ldi r25,lo8(39)
 299 0102 F92E      		mov r15,r25
 300               	.L15:
 301               	.LVL31:
 127:mmc.c         **** 				for (tmr = 10000; tmr && send_cmd(ACMD41, 1UL << 30); tmr--) dly_100us();	/* Wait for leaving i
 302               		.loc 1 127 30 discriminator 3 view .LVU71
 303 0104 40E0      		ldi r20,0
 304 0106 50E0      		ldi r21,0
 305 0108 60E0      		ldi r22,0
 306 010a 70E4      		ldi r23,lo8(64)
 307 010c 89EE      		ldi r24,lo8(-23)
 308 010e 0E94 0000 		call send_cmd
 309               	.LVL32:
 310               		.loc 1 127 27 discriminator 3 view .LVU72
 311 0112 8111      		cpse r24,__zero_reg__
 312 0114 00C0      		rjmp .L16
 128:mmc.c         **** 				if (tmr && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 313               		.loc 1 128 5 is_stmt 1 view .LVU73
 314               		.loc 1 128 16 is_stmt 0 view .LVU74
 315 0116 40E0      		ldi r20,0
 316 0118 50E0      		ldi r21,0
 317 011a BA01      		movw r22,r20
 318 011c 8AE7      		ldi r24,lo8(122)
 319 011e 0E94 0000 		call send_cmd
 320               	.LVL33:
 321               		.loc 1 128 13 view .LVU75
 322 0122 8111      		cpse r24,__zero_reg__
 323 0124 00C0      		rjmp .L12
 324               	.L18:
 129:mmc.c         **** 					for (n = 0; n < 4; n++) ocr[n] = rcv_spi();
 325               		.loc 1 129 30 is_stmt 1 discriminator 3 view .LVU76
 326               		.loc 1 129 39 is_stmt 0 discriminator 3 view .LVU77
 327 0126 0E94 0000 		call rcv_spi
 328               	.LVL34:
 329               		.loc 1 129 37 discriminator 3 view .LVU78
 330 012a F801      		movw r30,r16
 331 012c 8193      		st Z+,r24
 332 012e 8F01      		movw r16,r30
 333               		.loc 1 129 25 is_stmt 1 discriminator 3 view .LVU79
 334               		.loc 1 129 18 discriminator 3 view .LVU80
 335               		.loc 1 129 6 is_stmt 0 discriminator 3 view .LVU81
 336 0130 CE16      		cp r12,r30
 337 0132 DF06      		cpc r13,r31
 338 0134 01F4      		brne .L18
 130:mmc.c         **** 					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* SDv2 (HC or SC) */
 339               		.loc 1 130 6 is_stmt 1 view .LVU82
 340               		.loc 1 130 9 is_stmt 0 view .LVU83
 341 0136 8981      		ldd r24,Y+1
 342 0138 14E0      		ldi r17,lo8(4)
 343 013a 86FF      		sbrs r24,6
 344 013c 00C0      		rjmp .L19
 345 013e 1CE0      		ldi r17,lo8(12)
 346 0140 00C0      		rjmp .L19
 347               	.L16:
 127:mmc.c         **** 				if (tmr && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 348               		.loc 1 127 66 is_stmt 1 discriminator 4 view .LVU84
 349 0142 0E94 0000 		call dly_100us
 350               	.LVL35:
 127:mmc.c         **** 				if (tmr && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 351               		.loc 1 127 59 discriminator 4 view .LVU85
 127:mmc.c         **** 				if (tmr && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 352               		.loc 1 127 23 discriminator 4 view .LVU86
 127:mmc.c         **** 				if (tmr && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 353               		.loc 1 127 5 is_stmt 0 discriminator 4 view .LVU87
 354 0146 F1E0      		ldi r31,1
 355 0148 EF1A      		sub r14,r31
 356 014a F108      		sbc r15,__zero_reg__
 357               	.LVL36:
 127:mmc.c         **** 				if (tmr && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 358               		.loc 1 127 5 discriminator 4 view .LVU88
 359 014c 01F4      		brne .L15
 360               	.LVL37:
 361               	.L12:
 131:mmc.c         **** 				}
 132:mmc.c         **** 			}
 133:mmc.c         **** 		} else {							/* SDv1 or MMCv3 */
 134:mmc.c         **** 			if (send_cmd(ACMD41, 0) <= 1) 	{
 135:mmc.c         **** 				ty = CT_SD1; cmd = ACMD41;	/* SDv1 */
 136:mmc.c         **** 			} else {
 137:mmc.c         **** 				ty = CT_MMC; cmd = CMD1;	/* MMCv3 */
 138:mmc.c         **** 			}
 139:mmc.c         **** 			for (tmr = 10000; tmr && send_cmd(cmd, 0); tmr--) dly_100us();	/* Wait for leaving idle state */
 140:mmc.c         **** 			if (!tmr || send_cmd(CMD16, 512) != 0)			/* Set R/W block length to 512 */
 141:mmc.c         **** 				ty = 0;
 362               		.loc 1 141 8 view .LVU89
 363 014e 10E0      		ldi r17,0
 364               	.L19:
 365               	.LVL38:
 142:mmc.c         **** 		}
 143:mmc.c         **** 	}
 144:mmc.c         **** 	CardType = ty;
 366               		.loc 1 144 2 is_stmt 1 view .LVU90
 367               		.loc 1 144 11 is_stmt 0 view .LVU91
 368 0150 1093 0000 		sts CardType,r17
 145:mmc.c         **** 	deselect();
 369               		.loc 1 145 2 is_stmt 1 view .LVU92
 370 0154 0E94 0000 		call deselect
 371               	.LVL39:
 146:mmc.c         **** 
 147:mmc.c         **** 	return ty ? 0 : STA_NOINIT;
 372               		.loc 1 147 2 view .LVU93
 373               		.loc 1 147 16 is_stmt 0 view .LVU94
 374 0158 81E0      		ldi r24,lo8(1)
 375 015a 1111      		cpse r17,__zero_reg__
 376 015c 80E0      		ldi r24,0
 377               	.L32:
 378               	/* epilogue start */
 148:mmc.c         **** }
 379               		.loc 1 148 1 view .LVU95
 380 015e 0F90      		pop __tmp_reg__
 381 0160 0F90      		pop __tmp_reg__
 382 0162 0F90      		pop __tmp_reg__
 383 0164 0F90      		pop __tmp_reg__
 384 0166 DF91      		pop r29
 385 0168 CF91      		pop r28
 386 016a 1F91      		pop r17
 387               	.LVL40:
 388               		.loc 1 148 1 view .LVU96
 389 016c 0F91      		pop r16
 390 016e FF90      		pop r15
 391 0170 EF90      		pop r14
 392 0172 DF90      		pop r13
 393 0174 CF90      		pop r12
 394 0176 0895      		ret
 395               	.LVL41:
 396               	.L13:
 134:mmc.c         **** 				ty = CT_SD1; cmd = ACMD41;	/* SDv1 */
 397               		.loc 1 134 4 is_stmt 1 view .LVU97
 134:mmc.c         **** 				ty = CT_SD1; cmd = ACMD41;	/* SDv1 */
 398               		.loc 1 134 8 is_stmt 0 view .LVU98
 399 0178 40E0      		ldi r20,0
 400 017a 50E0      		ldi r21,0
 401 017c BA01      		movw r22,r20
 402 017e 89EE      		ldi r24,lo8(-23)
 403 0180 0E94 0000 		call send_cmd
 404               	.LVL42:
 137:mmc.c         **** 			}
 405               		.loc 1 137 22 view .LVU99
 406 0184 01E4      		ldi r16,lo8(65)
 134:mmc.c         **** 				ty = CT_SD1; cmd = ACMD41;	/* SDv1 */
 407               		.loc 1 134 7 view .LVU100
 408 0186 8230      		cpi r24,lo8(2)
 409 0188 00F4      		brsh .L20
 135:mmc.c         **** 			} else {
 410               		.loc 1 135 8 view .LVU101
 411 018a 12E0      		ldi r17,lo8(2)
 135:mmc.c         **** 			} else {
 412               		.loc 1 135 22 view .LVU102
 413 018c 09EE      		ldi r16,lo8(-23)
 414               	.L20:
 415               	.LVL43:
 139:mmc.c         **** 			if (!tmr || send_cmd(CMD16, 512) != 0)			/* Set R/W block length to 512 */
 416               		.loc 1 139 4 is_stmt 1 view .LVU103
 139:mmc.c         **** 			if (!tmr || send_cmd(CMD16, 512) != 0)			/* Set R/W block length to 512 */
 417               		.loc 1 139 22 view .LVU104
 137:mmc.c         **** 			}
 418               		.loc 1 137 22 is_stmt 0 view .LVU105
 419 018e 80E1      		ldi r24,lo8(16)
 420 0190 E82E      		mov r14,r24
 421 0192 87E2      		ldi r24,lo8(39)
 422 0194 F82E      		mov r15,r24
 423               	.LVL44:
 424               	.L21:
 139:mmc.c         **** 			if (!tmr || send_cmd(CMD16, 512) != 0)			/* Set R/W block length to 512 */
 425               		.loc 1 139 29 discriminator 3 view .LVU106
 426 0196 40E0      		ldi r20,0
 427 0198 50E0      		ldi r21,0
 428 019a BA01      		movw r22,r20
 429 019c 802F      		mov r24,r16
 430 019e 0E94 0000 		call send_cmd
 431               	.LVL45:
 139:mmc.c         **** 			if (!tmr || send_cmd(CMD16, 512) != 0)			/* Set R/W block length to 512 */
 432               		.loc 1 139 26 discriminator 3 view .LVU107
 433 01a2 8111      		cpse r24,__zero_reg__
 434 01a4 00C0      		rjmp .L22
 140:mmc.c         **** 				ty = 0;
 435               		.loc 1 140 4 is_stmt 1 view .LVU108
 140:mmc.c         **** 				ty = 0;
 436               		.loc 1 140 16 is_stmt 0 view .LVU109
 437 01a6 40E0      		ldi r20,0
 438 01a8 52E0      		ldi r21,lo8(2)
 439 01aa 60E0      		ldi r22,0
 440 01ac 70E0      		ldi r23,0
 441 01ae 80E5      		ldi r24,lo8(80)
 442 01b0 0E94 0000 		call send_cmd
 443               	.LVL46:
 140:mmc.c         **** 				ty = 0;
 444               		.loc 1 140 13 view .LVU110
 445 01b4 8111      		cpse r24,__zero_reg__
 446 01b6 00C0      		rjmp .L12
 447 01b8 00C0      		rjmp .L19
 448               	.L22:
 139:mmc.c         **** 			if (!tmr || send_cmd(CMD16, 512) != 0)			/* Set R/W block length to 512 */
 449               		.loc 1 139 54 is_stmt 1 discriminator 4 view .LVU111
 450 01ba 0E94 0000 		call dly_100us
 451               	.LVL47:
 139:mmc.c         **** 			if (!tmr || send_cmd(CMD16, 512) != 0)			/* Set R/W block length to 512 */
 452               		.loc 1 139 47 discriminator 4 view .LVU112
 139:mmc.c         **** 			if (!tmr || send_cmd(CMD16, 512) != 0)			/* Set R/W block length to 512 */
 453               		.loc 1 139 22 discriminator 4 view .LVU113
 139:mmc.c         **** 			if (!tmr || send_cmd(CMD16, 512) != 0)			/* Set R/W block length to 512 */
 454               		.loc 1 139 4 is_stmt 0 discriminator 4 view .LVU114
 455 01be F1E0      		ldi r31,1
 456 01c0 EF1A      		sub r14,r31
 457 01c2 F108      		sbc r15,__zero_reg__
 458               	.LVL48:
 139:mmc.c         **** 			if (!tmr || send_cmd(CMD16, 512) != 0)			/* Set R/W block length to 512 */
 459               		.loc 1 139 4 discriminator 4 view .LVU115
 460 01c4 01F4      		brne .L21
 461 01c6 00C0      		rjmp .L12
 462               		.cfi_endproc
 463               	.LFE1:
 465               	.global	disk_readp
 467               	disk_readp:
 468               	.LVL49:
 469               	.LFB2:
 149:mmc.c         **** 
 150:mmc.c         **** 
 151:mmc.c         **** 
 152:mmc.c         **** /*-----------------------------------------------------------------------*/
 153:mmc.c         **** /* Read partial sector                                                   */
 154:mmc.c         **** /*-----------------------------------------------------------------------*/
 155:mmc.c         **** 
 156:mmc.c         **** DRESULT disk_readp (
 157:mmc.c         **** 	BYTE *buff,		/* Pointer to the read buffer (NULL:Read bytes are forwarded to the stream) */
 158:mmc.c         **** 	DWORD lba,		/* Sector number (LBA) */
 159:mmc.c         **** 	WORD ofs,		/* Byte offset to read from (0..511) */
 160:mmc.c         **** 	WORD cnt		/* Number of bytes to read (ofs + cnt mus be <= 512) */
 161:mmc.c         **** )
 162:mmc.c         **** {
 470               		.loc 1 162 1 is_stmt 1 view -0
 471               		.cfi_startproc
 472               		.loc 1 162 1 is_stmt 0 view .LVU117
 473 01c8 AF92      		push r10
 474               	.LCFI15:
 475               		.cfi_def_cfa_offset 4
 476               		.cfi_offset 10, -3
 477 01ca BF92      		push r11
 478               	.LCFI16:
 479               		.cfi_def_cfa_offset 5
 480               		.cfi_offset 11, -4
 481 01cc CF92      		push r12
 482               	.LCFI17:
 483               		.cfi_def_cfa_offset 6
 484               		.cfi_offset 12, -5
 485 01ce DF92      		push r13
 486               	.LCFI18:
 487               		.cfi_def_cfa_offset 7
 488               		.cfi_offset 13, -6
 489 01d0 EF92      		push r14
 490               	.LCFI19:
 491               		.cfi_def_cfa_offset 8
 492               		.cfi_offset 14, -7
 493 01d2 FF92      		push r15
 494               	.LCFI20:
 495               		.cfi_def_cfa_offset 9
 496               		.cfi_offset 15, -8
 497 01d4 0F93      		push r16
 498               	.LCFI21:
 499               		.cfi_def_cfa_offset 10
 500               		.cfi_offset 16, -9
 501 01d6 1F93      		push r17
 502               	.LCFI22:
 503               		.cfi_def_cfa_offset 11
 504               		.cfi_offset 17, -10
 505 01d8 CF93      		push r28
 506               	.LCFI23:
 507               		.cfi_def_cfa_offset 12
 508               		.cfi_offset 28, -11
 509 01da DF93      		push r29
 510               	.LCFI24:
 511               		.cfi_def_cfa_offset 13
 512               		.cfi_offset 29, -12
 513               	/* prologue: function */
 514               	/* frame size = 0 */
 515               	/* stack size = 10 */
 516               	.L__stack_usage = 10
 517 01dc 5C01      		movw r10,r24
 518 01de 7901      		movw r14,r18
 519 01e0 6801      		movw r12,r16
 163:mmc.c         **** 	DRESULT res;
 520               		.loc 1 163 2 is_stmt 1 view .LVU118
 164:mmc.c         **** 	BYTE rc;
 521               		.loc 1 164 2 view .LVU119
 165:mmc.c         **** 	WORD bc;
 522               		.loc 1 165 2 view .LVU120
 166:mmc.c         **** 
 167:mmc.c         **** 
 168:mmc.c         **** 	if (!(CardType & CT_BLOCK)) lba *= 512;		/* Convert to byte address if needed */
 523               		.loc 1 168 2 view .LVU121
 524               		.loc 1 168 5 is_stmt 0 view .LVU122
 525 01e2 8091 0000 		lds r24,CardType
 526               	.LVL50:
 527               		.loc 1 168 5 view .LVU123
 528 01e6 83FD      		sbrc r24,3
 529 01e8 00C0      		rjmp .L47
 530               		.loc 1 168 30 is_stmt 1 discriminator 1 view .LVU124
 531               		.loc 1 168 34 is_stmt 0 discriminator 1 view .LVU125
 532 01ea 89E0      		ldi r24,9
 533               		1:
 534 01ec 440F      		lsl r20
 535 01ee 551F      		rol r21
 536 01f0 661F      		rol r22
 537 01f2 771F      		rol r23
 538 01f4 8A95      		dec r24
 539 01f6 01F4      		brne 1b
 540               	.LVL51:
 541               	.L47:
 169:mmc.c         **** 
 170:mmc.c         **** 	res = RES_ERROR;
 542               		.loc 1 170 2 is_stmt 1 view .LVU126
 171:mmc.c         **** 	if (send_cmd(CMD17, lba) == 0) {		/* READ_SINGLE_BLOCK */
 543               		.loc 1 171 2 view .LVU127
 544               		.loc 1 171 6 is_stmt 0 view .LVU128
 545 01f8 81E5      		ldi r24,lo8(81)
 546 01fa 0E94 0000 		call send_cmd
 547               	.LVL52:
 548               		.loc 1 171 6 view .LVU129
 549 01fe 182F      		mov r17,r24
 550               		.loc 1 171 5 view .LVU130
 551 0200 8111      		cpse r24,__zero_reg__
 552 0202 00C0      		rjmp .L48
 553 0204 C0E4      		ldi r28,lo8(64)
 554 0206 DCE9      		ldi r29,lo8(-100)
 555               	.L50:
 556               	.LVL53:
 172:mmc.c         **** 
 173:mmc.c         **** 		bc = 40000;
 174:mmc.c         **** 		do {							/* Wait for data packet */
 557               		.loc 1 174 3 is_stmt 1 discriminator 2 view .LVU131
 175:mmc.c         **** 			rc = rcv_spi();
 558               		.loc 1 175 4 discriminator 2 view .LVU132
 559               		.loc 1 175 9 is_stmt 0 discriminator 2 view .LVU133
 560 0208 0E94 0000 		call rcv_spi
 561               	.LVL54:
 176:mmc.c         **** 		} while (rc == 0xFF && --bc);
 562               		.loc 1 176 11 is_stmt 1 discriminator 2 view .LVU134
 563               		.loc 1 176 3 is_stmt 0 discriminator 2 view .LVU135
 564 020c 8F3F      		cpi r24,lo8(-1)
 565 020e 01F4      		brne .L49
 566               	.LVL55:
 567               		.loc 1 176 23 discriminator 1 view .LVU136
 568 0210 2197      		sbiw r28,1
 569               	.LVL56:
 570               		.loc 1 176 23 discriminator 1 view .LVU137
 571 0212 01F4      		brne .L50
 572               	.LVL57:
 573               	.L48:
 170:mmc.c         **** 	if (send_cmd(CMD17, lba) == 0) {		/* READ_SINGLE_BLOCK */
 574               		.loc 1 170 6 view .LVU138
 575 0214 11E0      		ldi r17,lo8(1)
 576 0216 00C0      		rjmp .L55
 577               	.LVL58:
 578               	.L49:
 177:mmc.c         **** 
 178:mmc.c         **** 		if (rc == 0xFE) {				/* A data packet arrived */
 579               		.loc 1 178 3 is_stmt 1 view .LVU139
 580               		.loc 1 178 6 is_stmt 0 view .LVU140
 581 0218 8E3F      		cpi r24,lo8(-2)
 582 021a 01F4      		brne .L48
 179:mmc.c         **** 			bc = 514 - ofs - cnt;
 583               		.loc 1 179 4 is_stmt 1 view .LVU141
 584               		.loc 1 179 7 is_stmt 0 view .LVU142
 585 021c C2E0      		ldi r28,lo8(2)
 586 021e D2E0      		ldi r29,lo8(2)
 587               	.LVL59:
 588               		.loc 1 179 7 view .LVU143
 589 0220 CC19      		sub r28,r12
 590 0222 DD09      		sbc r29,r13
 591 0224 CE19      		sub r28,r14
 592 0226 DF09      		sbc r29,r15
 593               	.LVL60:
 594               	.L63:
 180:mmc.c         **** 
 181:mmc.c         **** 			/* Skip leading bytes */
 182:mmc.c         **** 			if (ofs) {
 595               		.loc 1 182 4 is_stmt 1 view .LVU144
 596               		.loc 1 182 7 is_stmt 0 view .LVU145
 597 0228 E114      		cp r14,__zero_reg__
 598 022a F104      		cpc r15,__zero_reg__
 599 022c 01F0      		breq .L53
 183:mmc.c         **** 				do rcv_spi(); while (--ofs);
 600               		.loc 1 183 5 is_stmt 1 discriminator 1 view .LVU146
 601               		.loc 1 183 8 discriminator 1 view .LVU147
 602 022e 0E94 0000 		call rcv_spi
 603               	.LVL61:
 604               		.loc 1 183 25 discriminator 1 view .LVU148
 605               		.loc 1 183 5 is_stmt 0 discriminator 1 view .LVU149
 606 0232 81E0      		ldi r24,1
 607 0234 E81A      		sub r14,r24
 608 0236 F108      		sbc r15,__zero_reg__
 609               	.LVL62:
 610               		.loc 1 183 5 discriminator 1 view .LVU150
 611 0238 00C0      		rjmp .L63
 612               	.LVL63:
 613               	.L53:
 184:mmc.c         **** 			}
 185:mmc.c         **** 
 186:mmc.c         **** 			/* Receive a part of the sector */
 187:mmc.c         **** 			do {
 614               		.loc 1 187 4 is_stmt 1 discriminator 1 view .LVU151
 188:mmc.c         **** 				*buff++ = rcv_spi();
 615               		.loc 1 188 5 discriminator 1 view .LVU152
 616 023a 7501      		movw r14,r10
 617               		.loc 1 188 10 is_stmt 0 discriminator 1 view .LVU153
 618 023c EFEF      		ldi r30,-1
 619 023e AE1A      		sub r10,r30
 620 0240 BE0A      		sbc r11,r30
 621               	.LVL64:
 622               		.loc 1 188 15 discriminator 1 view .LVU154
 623 0242 0E94 0000 		call rcv_spi
 624               	.LVL65:
 625               		.loc 1 188 13 discriminator 1 view .LVU155
 626 0246 F701      		movw r30,r14
 627 0248 8083      		st Z,r24
 189:mmc.c         **** 			} while (--cnt);
 628               		.loc 1 189 12 is_stmt 1 discriminator 1 view .LVU156
 629               		.loc 1 189 4 is_stmt 0 discriminator 1 view .LVU157
 630 024a F1E0      		ldi r31,1
 631 024c CF1A      		sub r12,r31
 632 024e D108      		sbc r13,__zero_reg__
 633               	.LVL66:
 634               		.loc 1 189 4 discriminator 1 view .LVU158
 635 0250 01F4      		brne .L53
 636               	.L54:
 190:mmc.c         **** 
 191:mmc.c         **** 			/* Skip trailing bytes and CRC */
 192:mmc.c         **** 			do rcv_spi(); while (--bc);
 637               		.loc 1 192 4 is_stmt 1 discriminator 1 view .LVU159
 638               		.loc 1 192 7 discriminator 1 view .LVU160
 639 0252 0E94 0000 		call rcv_spi
 640               	.LVL67:
 641               		.loc 1 192 24 discriminator 1 view .LVU161
 642               		.loc 1 192 4 is_stmt 0 discriminator 1 view .LVU162
 643 0256 2197      		sbiw r28,1
 644               	.LVL68:
 645               		.loc 1 192 4 discriminator 1 view .LVU163
 646 0258 01F4      		brne .L54
 647               	.LVL69:
 648               	.L55:
 193:mmc.c         **** 
 194:mmc.c         **** 			res = RES_OK;
 195:mmc.c         **** 		}
 196:mmc.c         **** 	}
 197:mmc.c         **** 
 198:mmc.c         **** 	deselect();
 649               		.loc 1 198 2 is_stmt 1 view .LVU164
 650 025a 0E94 0000 		call deselect
 651               	.LVL70:
 199:mmc.c         **** 
 200:mmc.c         **** 	return res;
 652               		.loc 1 200 2 view .LVU165
 201:mmc.c         **** }
 653               		.loc 1 201 1 is_stmt 0 view .LVU166
 654 025e 812F      		mov r24,r17
 655               	/* epilogue start */
 656 0260 DF91      		pop r29
 657 0262 CF91      		pop r28
 658 0264 1F91      		pop r17
 659               	.LVL71:
 660               		.loc 1 201 1 view .LVU167
 661 0266 0F91      		pop r16
 662 0268 FF90      		pop r15
 663 026a EF90      		pop r14
 664 026c DF90      		pop r13
 665 026e CF90      		pop r12
 666               	.LVL72:
 667               		.loc 1 201 1 view .LVU168
 668 0270 BF90      		pop r11
 669 0272 AF90      		pop r10
 670               	.LVL73:
 671               		.loc 1 201 1 view .LVU169
 672 0274 0895      		ret
 673               		.cfi_endproc
 674               	.LFE2:
 676               		.local	CardType
 677               		.comm	CardType,1,1
 678               	.Letext0:
 679               		.file 2 "integer.h"
 680               		.file 3 "diskio.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 mmc.c
     /tmp/ccSgNaFV.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccSgNaFV.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccSgNaFV.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccSgNaFV.s:5      *ABS*:000000000000003b __RAMPZ__
     /tmp/ccSgNaFV.s:6      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccSgNaFV.s:7      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccSgNaFV.s:12     .text:0000000000000000 send_cmd
     /tmp/ccSgNaFV.s:153    .text:0000000000000078 disk_initialize
                             .bss:0000000000000000 CardType
     /tmp/ccSgNaFV.s:467    .text:00000000000001c8 disk_readp

UNDEFINED SYMBOLS
select
xmit_spi
rcv_spi
init_spi
dly_100us
deselect
__do_clear_bss
